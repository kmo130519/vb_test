'----------------------------------------------------------------------------------------------n' CLASS: clsCliquetPathQEn' Author: Lee, Seok.n' Amended on: 2011.08.01n' DESC:n' This class performs monte carlo simulation of cliquet option using heston model.n' Quadratic-Exponential Scheme is implemented in this class.n' Refer to 'Efficient simulation of the Heston Stochastic Volatility Model, Leif Andersen, BOA'n' Initialize procedure initializes all the members of this class.n' ----------------------------------------------------------------------------------------------nnOption ExplicitnnnPublic price As Double 'Option price.nnPrivate deal_ticket_ As clsCliquetDealTicket 'Deal information.nPrivate s_ As Double 'Initial stock pricenPublic rate_curve_ As clsRateCurve 'IR CurvenPrivate div_schedule_ As clsDividendSchedule 'Discrete dividend schedulenPrivate heston_param_ As clsHestonParameter 'Parameters related to heston modelnnPrivate call_put_ As StringnnPrivate strike_ As DoublennPrivate time_step_ As clsTimeStep  'time steps. This member has information on dt and fixing schedule.nPrivate cache_ As clsCache 'Some of the calcuations are performed in advance to save calculation cost.nPrivate random_numbers_() As Double 'The array of random numbers to be used during the simulation.nPrivate path_seq_ As Long 'This is the index of paths.nPrivate time_seq_ As Integer 'This is the index of time step.nn'Private previous_performance As DoublennPrivate Const psi_c_ As Double = 1.5  'Defined in the paper. Arbitrary.nPrivate Const gamma_1_ As Double = 0.5 'Defined in the paper. Arbitrary.nPrivate Const epsilon_ As Double = 0.001 'Used to smooth delta to calculate pathwise gamma.nPrivate Const tiny_ As Double = 0.000001nnPrivate distribution_helper_ As Distributions 'Helper class. Written by Jeon, YK.nPrivate func As New Functions 'Helper class. Written by Jeon, YK.nnPrivate random_generator_ As clsRandomGenerator 'Random number generator. Using Quantlib.nnPrivate greeks_ As clsGreeksnn' S(k-1). This is used to calculated pathwise deltanPrivate s_tk_1_ As Doublen'Private s_tk_ As DoublennPrivate rnd_mode_ As StringnPrivate bump_greek_ As BooleannnPrivate Const bump_s_ As Double = 1#nnn'========================nPrivate temp_seq As Integern'========================nnnnn'--------------------------------------------------------------------------------n' Procedure: initializen' INPUT: deal_ticket (Deal information), S, rate_curve, div_schedule, heston_param(market information)n'        rnd_mode ( preference for the random number generation )n' Output: random_numbers, time_step_, cache_, implicitly.n' DESC: Creates objects and initializes the members used in this class.n'--------------------------------------------------------------------------------nPublic Sub initialize(deal_ticket As clsCliquetDealTicket, call_put As String, strike As Double _n                      , s As Double, rate_curve As clsRateCurve, div_schedule As clsDividendSchedule, heston_param As clsHestonParameter _n                      , Optional rnd_mode As String = "SOBOL")n                      n    temp_seq = 1n    n'    Dim temp_fixing_schedule As clsCliquetFixingnnOn Error GoTo ErrorHandlernn    Set deal_ticket_ = deal_ticket  'Temporaryn    s_ = sn    Set rate_curve_ = rate_curven    Set div_schedule_ = div_schedulen    Set heston_param_ = heston_paramn    rnd_mode_ = rnd_moden    n    price = 0n    n    Set time_step_ = New clsTimeStepn    Set cache_ = New clsCachen    Set distribution_helper_ = New Distributionsn    Set func = New Functionsn    Set greeks_ = New clsGreeksn    Set random_generator_ = New clsRandomGeneratorn    n    call_put_ = call_putn    strike_ = striken    n    reset_data Truen    n    initialize_greekn        n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsCliquetMCQE.initialization :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn        nEnd Subnn'---------------------------------------------------n' initialize_greekn' Find the first fixing value before current dayn' to calcuate delta using pahtwise differentiationn'----------------------------------------------------nPrivate Sub initialize_greek()nn    Dim inx As Integern    nOn Error GoTo ErrorHandlern    n    inx = deal_ticket_.get_max_fixing_index()n    n    n    'If the initial stock price was set...n    If deal_ticket_.current_date >= deal_ticket_.get_fixing_date(0).fixing_date And deal_ticket_.get_fixing_date(0).fixing_value > 0 Thenn        n        ' Find the last fixing value...n        Do While deal_ticket_.get_fixing_date(inx).fixing_date > deal_ticket_.current_daten        n            inx = inx - 1n            n        Loopn        n        ' If curren date is a fixing date but not fixed yet...n        If deal_ticket_.current_date = deal_ticket_.get_fixing_date(inx).fixing_date And deal_ticket_.get_fixing_date(inx).fixing_value <= 0 Thenn            n            inx = inx - 1n            n        End Ifn        n        s_tk_1_ = deal_ticket_.get_fixing_date(inx).fixing_valuen        n    Elsen        n        s_tk_1_ = -1n        n    End Ifn    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsCliquetMCQE.initialize_greek :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit SubnnEnd Subnnnn'------------------------------------------------------------------n' resetn' Reset data to run the simulation again with different parameters.n' Set date_changed = True to regenerate time steps.n'-------------------------------------------------------------------nPublic Sub reset_data(Optional date_changed As Boolean = False)nnnOn Error GoTo ErrorHandlern    n    ' If the fixing value is not specified for the past fixing date, set the current market price to be the fixing valuen    deal_ticket_.initialize s_n    n    If date_changed Thenn    n        div_schedule_.initialize_div_inx deal_ticket_.current_daten        n        time_step_.initialize deal_ticket_, div_schedule_n        n        '---------------------------------------------------------------------n        ' If it's maturity date, do not initialize object other than deal_ticketn        '---------------------------------------------------------------------n        If deal_ticket_.current_date < deal_ticket_.maturity_date Thenn        n    n'            cache_.initialize heston_param_, time_step_, rate_curve_, gamma_1_n            n            '******************************************************n            ' Subject to improve.n            ' Generate functions are not included in this class.n            ' Especially, 'SOBOL' sequence generator is included 'xll' provided by 3rd party.n            '******************************************************n            If rnd_mode_ = "BASIC" Thenn                    n                random_numbers_ = random_generator_.uniform_numbers_2d(deal_ticket_.no_of_trials, time_step_.no_of_steps)n                n            ElseIf rnd_mode_ = "SOBOL" Thenn            n                random_numbers_ = random_generator_.sobol_numbers_2d(deal_ticket_.no_of_trials, time_step_.no_of_steps)n                n            Elsen            n                Exit Subn                n            End Ifn            n            n        End Ifn        n    End Ifn    n    '---------------------------------------------------------------------n    ' If it's maturity date, do not initialize object other than deal_ticketn    '---------------------------------------------------------------------n    If deal_ticket_.current_date < deal_ticket_.maturity_date Thenn    n        cache_.initialize heston_param_, time_step_, rate_curve_, gamma_1_n        n    End Ifn    n    path_seq_ = 1n    time_seq_ = 0nn    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsCliquetMCQE.reset_data :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit SubnnEnd Subnn'-----------------------------------------------------------------------------------------------n' RUNn' run the simulation and get the price and greeks.n' Should be initialized for this procedure run properly.n'------------------------------------------------------------------------------------------------nnPublic Sub run()nn    Dim prices() As Doublen    Dim deltas() As Doublen    Dim gammas() As Doublen    Dim vegas() As Doublen    Dim s_origin As Doublen    n    Dim price_temp As Doublen'    Dim price_down As Doublen    nOn Error GoTo ErrorHandlernn    s_origin = s_n        n    do_simulation prices, deltas, gammas, vegasn    n    greeks_.value = func.ReturnAVG(prices) * rate_curve_.get_discount_factor(func.max_date(deal_ticket_.value_date, deal_ticket_.current_date), deal_ticket_.maturity_date)n    greeks_.delta = func.ReturnAVG(deltas) * rate_curve_.get_discount_factor(func.max_date(deal_ticket_.value_date, deal_ticket_.current_date), deal_ticket_.maturity_date)n    greeks_.gamma = func.ReturnAVG(gammas) * rate_curve_.get_discount_factor(func.max_date(deal_ticket_.value_date, deal_ticket_.current_date), deal_ticket_.maturity_date)n    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.run :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn         nEnd SubnnPublic Sub do_simulation(prices() As Double, deltas() As Double, gammas() As Double, vegas() As Double)nn    Dim inx As Longn    nOn Error GoTo ErrorHandlern    n    ReDim prices(1 To deal_ticket_.no_of_trials) As Doublen    ReDim deltas(1 To deal_ticket_.no_of_trials) As Doublen    ReDim gammas(1 To deal_ticket_.no_of_trials) As Doublen    ReDim vegas(1 To deal_ticket_.no_of_trials) As Doublen    n    For inx = 1 To deal_ticket_.no_of_trialsn    n        run_a_trial prices(inx), deltas(inx), gammas(inx), vegas(inx)n        n    Next inxn    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.do_simulation :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn    nnEnd Subnnn' GetternPublic Function greeks() As clsGreeksnn    Set greeks = greeks_nnEnd Functionnn'------------------------------------------------------------------------n' Procedure: set_random_numbersn' DESC: Explicitly set the random number arrays. This sub routine can be usedn' when the random numbers should be set manually.n'------------------------------------------------------------------------nPublic Sub set_random_numbers(random_numbers() As Double)nn    random_numbers_ = random_numbersnnEnd Subnn' SetternPublic Sub set_s(spot As Double)nn    s_ = spotnnEnd Subnnn' SetternPublic Sub set_date(c_date As Date)nnOn Error GoTo ErrorHandlernn    deal_ticket_.current_date = c_daten    n    nExit SubnnErrorHandler:nn    Err.Raise vbObjectError + 1001, "clsCliquetMCQE.set_date :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn    n    nEnd Subnnn'--------------------------------------------------------n' Sub: run_a_trialn' INPUT: voidn' OUTPUT: Price calucated from a path, Pathwise delta.n'--------------------------------------------------------nnPublic Sub run_a_trial(ByRef prices As Double, ByRef deltas As Double, ByRef gammas As Double, ByRef vegas As Double)nn    Dim return_value As Doublen    n    Dim inx As Longn    Dim mirror_s As Doublen    Dim mirror_v As Doublen    Dim performance As Doublen    Dim current_date As Daten    Dim previous_fixing As Doublen    Dim s_tk_1 As Doublen    n    Dim ds_dvol As Doublen    Dim dp_dvol As Doublen    n    Dim s_tk_checked As Booleann    Dim pathwise_delta As Doublen    Dim pathwise_gamma As Doublen    nDim temp_sheet As Worksheetnn        nOn Error GoTo ErrorHandlernn    Set temp_sheet = Sheets("temp")nn    s_tk_checked = Falsen    s_tk_1 = s_tk_1_n    n    pathwise_delta = 0n    pathwise_gamma = 0n    '------------------------------------------------------n    ' Initialize simulation parametersn    '------------------------------------------------------n    mirror_s = s_n    mirror_v = heston_param_.v_initialn    n    '--------------------------------------------------------n    ' Set the fixing index to be the first one.n    '--------------------------------------------------------n    deal_ticket_.rewind_fixing_inxn    div_schedule_.rewind_fixing_inxn    n    time_seq_ = 0n    n    n    'previous_fixing = s_n    n    n    Do While time_seq_ < time_step_.no_of_stepsn    nn    n        '--------------------------------------------------------n        ' Check if it is fixing date and calcuated performancen        '--------------------------------------------------------n        check_dividend mirror_s, time_seq_n'        check_fixing performance, previous_fixing, mirror_s, time_seq_, s_tk_checked, s_tk_1, ds_dvol, pathwise_delta, pathwise_gamma, dp_dvoln                n        '--------------------------------------------------------n        ' Move to next time stepn        '--------------------------------------------------------n        progress_a_step mirror_s, mirror_v, ds_dvoln        n        n    Loopn    n    n    'calc_performancen    n    '--------------------------------------------------------------------n    ' check if the last time step is fixing date and update performancen    '--------------------------------------------------------------------n   ' check_fixing performance, previous_fixing, mirror_s, time_seq_, s_tk_checked, s_tk_1, ds_dvol, pathwise_delta, pathwise_gamma, dp_dvoln    '--------------------------------------------------------------------n    n    n  '  performance = performance + deal_ticket_.previous_performancen        n    '--------------------------------------------------------------------n    ' Apply global condition like 'Global Cap', 'Global Floor'n    '--------------------------------------------------------------------n '   apply_global_condition performance, pathwise_delta, pathwise_gamma, dp_dvoln n    If UCase(call_put_) = "CALL" Thenn        performance = func.max((mirror_s - strike_), 0)n    Elsen        performance = func.max((strike_ - mirror_s), 0)n    End Ifn        n        n    temp_sheet.Cells(path_seq_ + 3, 2).value = performancen    n    path_seq_ = path_seq_ + 1n    n    prices = performancen    deltas = pathwise_deltan    gammas = pathwise_gamman    vegas = dp_dvoln    n    n    n    Exit Subn    nErrorHandler:nnn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.run_a_trial :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn    n    nnEnd Subnn'-----------------------------------------------n' Sub: check_fixingn' Desc: Check if it is fixing date and accumulate performancen'       If it is the first fixing date, performance should not be calculatedn'       If it it the first fixing since s_t(k-1) is set,calculate pathwise deltan'-----------------------------------------------nnPrivate Sub check_fixing(ByRef performance As Double, ByRef previous_fixing As Double, mirror_s As Double, inx As Integer _n                       , s_tk_checked As Boolean, ByRef s_tk_1 As Double, ByRef ds_dvol As Double _n                       , ByRef pathwise_delta As Double, ByRef pathwise_gamma As Double, ByRef dp_dvol As Double)nn    Dim cur_fixing_schedule As clsCliquetFixingn    n    Dim temp As Doublen    nOn Error GoTo ErrorHandlern    n    Set cur_fixing_schedule = deal_ticket_.get_fixing_date()n    n    If time_step_.is_fixing_date(inx) Thenn    n        If Not time_step_.is_first_fixing_date(inx) Thenn        n            ' Min( Max ( S(t) / S(t-1) -1 , local floor ), local cap )n            performance = performance + func.min(func.max(mirror_s / previous_fixing - 1, cur_fixing_schedule.local_floor), cur_fixing_schedule.local_cap)n        n            dp_dvol = dp_dvol + ds_dvol * (func.indicator(mirror_s / s_tk_1 > cur_fixing_schedule.local_floor + 1) _n                                    - func.indicator(mirror_s / s_tk_1 > cur_fixing_schedule.local_cap + 1) _n                                    ) / s_tk_1n                                    n            ds_dvol = 0n            n            ' to calculated pathwise delta. In the case of cliquet, a series of forward starting options, only the first performance affects to delta and gamma.n            If Not s_tk_checked Thenn            n'                s_tk = mirror_sn                s_tk_checked = Truen                's_tk_ = mirror_sn                n                temp = mirror_s / s_tk_1 / s_ * func.indicator(s_tk_1 > 0)n                n                pathwise_delta = (func.indicator(mirror_s / s_tk_1 > cur_fixing_schedule.local_floor + 1) _n                                    - func.indicator(mirror_s / s_tk_1 > cur_fixing_schedule.local_cap + 1) _n                                    ) * tempn                n                pathwise_gamma = temp ^ 2 * (distribution_helper_.NormD((mirror_s / s_tk_1 - cur_fixing_schedule.local_floor - 1) / epsilon_) _n                                           - distribution_helper_.NormD((mirror_s / s_tk_1 - cur_fixing_schedule.local_cap - 1) / epsilon_)) / epsilon_n                                           n            n            End Ifn            n            s_tk_1 = mirror_sn        n        End Ifn        n        previous_fixing = mirror_sn        n        'indicate next fixing indexn        deal_ticket_.move_nextn        n    End Ifn    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.check_fixing :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn        nnEnd SubnnPrivate Sub check_dividend(ByRef mirror_s As Double, inx As Integer)nn    nOn Error GoTo ErrorHandlernn    If time_step_.is_dividend_date(inx) Thenn    n        mirror_s = mirror_s - div_schedule_.get_dividend().dividend * mirror_s / s_n        div_schedule_.move_nextn        n    End Ifnn    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.check_dividend :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn        nEnd SubnnPrivate Sub apply_global_condition(performance As Double, pathwise_delta As Double, pathwise_gamma As Double, pathwise_vega As Double)nn    Dim d2v_dp2 As Doublen    Dim dv_dp As Doublen    'Dim d2p_ds2 As Doublenn    ' Min( Max( Accumulated Performance, Global Floor ), Global Cap )n    n'    dv_dp = (func.indicator(performance > deal_ticket_.global_floor) - func.indicator(performance > deal_ticket_.global_cap))n    n    dv_dp = distribution_helper_.NormCDF((performance - deal_ticket_.global_floor) / epsilon_) - distribution_helper_.NormCDF((performance - deal_ticket_.global_cap) / epsilon_)n    n    d2v_dp2 = distribution_helper_.NormD((performance - deal_ticket_.global_floor) / epsilon_) / epsilon_ - distribution_helper_.NormD((performance - deal_ticket_.global_cap) / epsilon_) / epsilon_n    n    performance = func.min(func.max(performance, deal_ticket_.global_floor), deal_ticket_.global_cap)n    n    pathwise_gamma = pathwise_delta ^ 2 * d2v_dp2 + dv_dp * pathwise_gamman    n    ' "func.indicator" is the indicator function which returns 1 if the condition is true otherwise 0n    pathwise_delta = dv_dp * pathwise_deltan    n    pathwise_vega = dv_dp * pathwise_vega / 100 ' / 100 * 2 * heston_param_.v_initial '% vegannEnd Subnnnn'-------------------------------------------------------n' Sub: progress_a_stepn' Desc: Move to next step. QE Scheme for variance.n'-------------------------------------------------------nPrivate Sub progress_a_step(ByRef s As Double, ByRef v As Double, ByRef ds_dvol As Double)nn    Dim v_dt As Doublen    Dim s_dt As Doublen    Dim large_psi As Booleann    Dim k_star As Doublen    nOn Error GoTo ErrorHandlern    n    n    n    v_dt = next_v(v, k_star)n    s_dt = next_s(ds_dvol, s, v, v_dt, k_star)n    n    '---------------------------------------n    ' subject to improve. 2011.07.15n    '----------------------------------------n    If v < 0 Thenn        v = -vn    End Ifn    n    v = v_dtn    s = s_dtn    n    time_seq_ = time_seq_ + 1n    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.progress_a_step :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Subn        nnEnd Subnnnn'---------------------------------------n' Function: next_vn' input : vn' output : next_v, k_starn' Desc: QE Scheme for heston model. Refer to Andersenn'-------------------------------------------nPrivate Function next_v(v As Double, ByRef k_star As Double) As Doublenn    Dim m As Doublen    Dim s_2 As Doublen    Dim Psi As Doublen    Dim a As Doublen    Dim b_2 As Doublenn    Dim beta As Doublen    Dim p As Doublenn    Dim A_ As DoublennOn Error GoTo ErrorHandlern    n    m = heston_param_.v_long + (v - heston_param_.v_long) * cache_.A1(time_seq_)n    s_2 = v * cache_.A2(time_seq_) + cache_.A3(time_seq_)n    n    Psi = s_2 / m ^ 2n    n    A_ = cache_.K_2(time_seq_) + 0.5 * cache_.K_4(time_seq_)n    n    If Psi <= psi_c_ Thenn    n        b_2 = 2 / Psi - 1 + Sqr(2 / Psi) * Sqr(2 / Psi - 1)n        a = m / (1 + b_2)n        n        next_v = a * (Sqr(b_2) + distribution_helper_.NormInv(random_numbers_(path_seq_, time_seq_ + 1, 2))) ^ 2nn        ' Martingale correctionn        k_star = -A_ * b_2 * a / (1 - 2 * A_ * a) + 0.5 * Log(1 - 2 * A_ * a) - (cache_.K_1(time_seq_) + 0.5 * cache_.K_3(time_seq_)) * vn'        k_star = cache_.K_0(time_seq_)nn        n    Elsen        n        beta = 2 / m / (Psi + 1)n        p = (Psi - 1) / (Psi + 1)n        n        If random_numbers_(path_seq_, time_seq_ + 1, 2) <= p Thenn        n            'next_v = 0n            next_v = tiny_n            n        Elsen            next_v = Log((1 - p) / (1 - random_numbers_(path_seq_, time_seq_ + 1, 2))) / betan        n        End Ifn        n        ' Martingale correctionn       k_star = -Log(p + beta * (1 - p) / (beta - A_)) - (cache_.K_1(time_seq_) + 0.5 * cache_.K_3(time_seq_)) * vnn'       k_star = cache_.K_0(time_seq_)nnn        n    End Ifn    n    n    Exit Functionn    n        nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.next_v :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit Functionnn    nEnd Functionnnn'---------------------------------------n' Function: next_sn' input : s, v, nextv, k_startn' output : next_sn' Desc: Refer to Andersenn'-------------------------------------------nnPrivate Function next_s(ByRef ds_dvol As Double, s As Double, v As Double, next_v As Double, k_star As Double) As DoublennOn Error GoTo ErrorHandlern'Dim temp_sheet As Worksheetn'Set temp_sheet = Application.Sheets("Vega Test")nn    Dim K_all As Doublen    n    K_all = Exp(cache_.forward_rate(time_seq_) * time_step_.dt(time_seq_) + k_star + cache_.K_1(time_seq_) * v + cache_.K_2(time_seq_) * next_v _n          + Sqr(cache_.K_3(time_seq_) * v + cache_.K_4(time_seq_) * next_v) * distribution_helper_.NormInv(random_numbers_(path_seq_, time_seq_ + 1, 1)))n          n    n'    ds_dvol = K_all * ds_dvol _n          + s * K_all * (cache_.K_1(time_seq_) + cache_.K_2(time_seq_) _n                       + 0.5 / Sqr(cache_.K_3(time_seq_) * v + cache_.K_4(time_seq_) * next_v) * (cache_.K_3(time_seq_) + cache_.K_4(time_seq_)) * distribution_helper_.NormInv(random_numbers_(path_seq_, time_seq_ + 1, 1)) _n                        )n                        n'    ds_dvol = (K_all * ds_dvol _n          + s * K_all * (cache_.K_1(time_seq_) + cache_.K_2(time_seq_) _n                       + 0.5 / Sqr(cache_.K_3(time_seq_) * v + cache_.K_4(time_seq_) * next_v) * (cache_.K_3(time_seq_) + cache_.K_4(time_seq_)) * distribution_helper_.NormInv(random_numbers_(path_seq_, time_seq_ + 1, 1)) _n                        )) * 2 * Sqr(v)n                        n                        n    ds_dvol = K_all * ds_dvol _n          + s * K_all * (2 * cache_.K_1(time_seq_) * Sqr(v) + 2 * cache_.K_2(time_seq_) * Sqr(next_v) _n                       + (cache_.K_3(time_seq_) * Sqr(v) + cache_.K_4(time_seq_) * Sqr(next_v)) / Sqr(cache_.K_3(time_seq_) * v + cache_.K_4(time_seq_) * next_v) * distribution_helper_.NormInv(random_numbers_(path_seq_, time_seq_ + 1, 1)) _n                        )n                        n    '-------------------------------------n    ' subject to improven    '-------------------------------------n    next_s = s * K_allnn'##############################################n'tempn'temp_sheet.Cells(path_seq_ + 2, time_seq_ + 2).value = ds_dvoln    n    Exit Functionn        nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsCliquetMCQE.next_s :" & Chr(13) & Err.source, Err.description '1003 <-- Run errorn    Exit FunctionnnEnd FunctionnnPublic Sub set_fixing_value(inx As Integer, fixing_value As Double)nn    deal_ticket_.set_fixing_value inx, fixing_valuen    nEnd SubnnPublic Sub set_current_date(cur_date As Date)nn    deal_ticket_.current_date = cur_datennEnd Subnnn