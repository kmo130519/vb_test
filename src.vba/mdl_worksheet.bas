'---------------------------------n' Modified onn' 2013-10-16n'---------------------------------nOption ExplicitnnPrivate date_initialized__ As BooleannPrivate holidays__() As DatennPublic Function read_rate_curve(the_range As Range, Optional isPrevDate As Boolean = False) As clsRateCurvenn    Dim rtn_obj As clsRateCurven        n    Dim ofs As Integern    If isPrevDate = True Thenn        ofs = 5n    Elsen        ofs = 0n    End Ifn    n    Dim no_of_rate_dates As Integern    no_of_rate_dates = the_range.Offset(0, ofs).Cells(6, 3).valuen    n    If no_of_rate_dates = 0 Thenn        Set rtn_obj = Nothingn    Elsen        Set rtn_obj = New clsRateCurven        rtn_obj.initialize Range(the_range.Offset(0, ofs).Cells(8, 2), the_range.Offset(0, ofs).Cells(7 + no_of_rate_dates, 2)), Range(the_range.Offset(0, ofs).Cells(8, 3), the_range.Offset(0, ofs).Cells(7 + no_of_rate_dates, 3))n    End Ifn    n    Set read_rate_curve = rtn_objnnEnd FunctionnnPublic Function read_corr_set(Optional isPrevDate As Boolean = False) As clsCorrelationPairsnn    Dim rtn_obj As clsCorrelationPairsn    Dim inx As Integern    Dim jnx As Integern    n    Dim the_range As Rangen    Set the_range = shtMarket.Range("correlation_table")n    n    Dim ofs As Integern    If isPrevDate = True Thenn        ofs = the_range.Rows.count + 3n    Elsen        ofs = 0n    End Ifn    n    Set the_range = the_range.Offset(ofs, 0)n    n    Set rtn_obj = New clsCorrelationPairsn    n    For inx = 1 To the_range.Rows.countn    n        For jnx = 1 To inx 'the_range.Columns.countn        n            rtn_obj.set_corr the_range.Cells(inx, 0).value, the_range.Cells(0, jnx).value, the_range.Cells(inx, jnx).valuen        n        Next jnxn        n    Next inxn    n    Set read_corr_set = rtn_objnnEnd Functionnn'local correlation 추가 2019.3.27nPublic Function read_min_corr_set(Optional isPrevDate As Boolean = False) As clsCorrelationPairsnn    Dim rtn_obj As clsCorrelationPairsn    Dim inx As Integern    Dim jnx As Integern    n    Dim the_range As Rangen    Set the_range = shtMarket.Range("min_correlation_table")n    n    Dim ofs As Integern    If isPrevDate = True Thenn        ofs = the_range.Rows.count + 3n    Elsen        ofs = 0n    End Ifn    n    Set the_range = the_range.Offset(ofs, 0)n    n    Set rtn_obj = New clsCorrelationPairsn    n    For inx = 1 To the_range.Rows.countn    n        For jnx = 1 To inx 'the_range.Columns.countn        n            rtn_obj.set_corr the_range.Cells(inx, 0).value, the_range.Cells(0, jnx).value, the_range.Cells(inx, jnx).valuen        n        Next jnxn        n    Next inxn    n    Set read_min_corr_set = rtn_objn    n    Set the_range = Nothingn    Set rtn_obj = NothingnnEnd Functionnn''local correlation 추가 2019.3.27n'Public Sub read_lambda_neutral(Optional isPrevDate As Boolean = False)n'n'    Dim rtn_obj As clsCorrelationPairsn'    Dim inx As Integern'n'    Dim the_range As Rangen'    Set the_range = shtMarket.Range("correlation_table")n'n'    Dim ofs As Integern'    If isPrevDate = True Thenn'        ofs = the_range.Rows.count + 2n'    Elsen'        ofs = 0n'    End Ifn'n'    Set the_range = the_range.Offset(ofs, 0)n'n'    For inx = 2 To the_range.Rows.countn'n'        'rtn_obj.set_min_corr the_range.Cells(inx, 1).value, the_range.Cells(1, jnx).value, the_range.Cells(inx, jnx).valuen'n'    Next inxn'n'End SubnnnPublic Sub read_fr_mkt_tester()n    n    Dim test_market As clsMarketn    n    Set test_market = read_index_market("SPX")nnnEnd SubnnPublic Function read_kospi_index_market(ByVal index_name As String _n                                      , Optional read_local_vol_flag As Boolean = False) As clsMarketnn    Dim rtn_market As clsMarketn    n    Dim spot As Doublen    'Dim prev_s As Doublen    n    Dim rate_curve As clsRateCurven    Dim sabr_surface As clsSABRSurfacen    n    Dim eval_date As Daten    'Dim prev_date As Daten    n    Dim vol_surface_grid As clsPillarGridn    Dim vol_dates() As Daten    Dim no_of_vol_dates As Integern    Dim no_of_div_dates As Integern    n'    Dim rho() As Doublen'    Dim nu() As Doublen'    Dim rho_coeff() As Doublen'    Dim nu_coeff() As Doublen    n'    Dim vol_strikes() As Doublen'    Dim inx As Integern'    Dim dummy_array() As Doublen    n    Dim dividend_schedule As clsDividendSchedulen    Dim dividend_yield As Doublen    n'    Dim heston_param As clsHestonParametern    n'    Dim fwds() As Doublen'    Dim atm_vols() As Doublen'    Dim alpha() As Doublen    nOn Error GoTo ErrorHandlern    n    Set rtn_market = New clsMarketn    rtn_market.index_name = index_namen    n    Dim dates() As Daten    Dim values() As Doublen        n    spot = shtMarket.Range("S").Cells(1, 1).valuen    n    Set rate_curve = New clsRateCurven    rate_curve.initialize shtMarket.Range("rate_dates"), shtMarket.Range("discount")n    n    read_div dates, valuesn    Set dividend_schedule = New clsDividendSchedulen    dividend_schedule.initialize_div UBound(dates), dates, valuesn    n    n    n    n    '----------------n    ' Currencyn    '----------------n    rtn_market.ul_currency = "KRW"n    n    '----------------n    ' Dividend Schedulen    '----------------n    Set rtn_market.div_schedule_ = dividend_schedulen    rtn_market.div_yield_ = shtMarket.Range("Div_Yield").valuen    n    n    '----------------n    ' Daten    '----------------n    eval_date = shtMarket.Range("market_date").valuenn    '------------------------n    ' Spotn    '------------------------n    rtn_market.s_ = spotnn    '----------------n    ' Rate Curven    '----------------n    Set rtn_market.rate_curve_ = rate_curven    n    '----------------n    ' SABR Vol Surfacen    '----------------n    n    Set sabr_surface = New clsSABRSurfacen    n    read_local_vol sabr_surface, index_name, spot, eval_daten                              n    Set rtn_market.sabr_surface_ = sabr_surfacen    n    Set read_kospi_index_market = rtn_marketn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_kospi_index_market", Err.descriptionnnEnd Functionnn'Public Sub read_local_vol(ByRef grid As clsPillarGrid, ByRef vol_data() As Double, ByRef local_vol_data() As Double)n'n'    Set grid = New clsPillarGridn'n'    grid.initializen'n'End SubnnPublic Sub read_fx_rates(quotes() As clsQuote)n    n    Dim no_of_data As Integern    n    Dim inx As Integern    Dim a_quote As clsQuoten    n    no_of_data = shtMarketForeign.Range("fx_rate_start").Cells(0, 1).valuen    n    ReDim quotes(1 To no_of_data) As clsQuoten    n    For inx = 1 To no_of_datan        n        Set a_quote = New clsQuoten        n        a_quote.asset_code = shtMarketForeign.Range("fx_rate_start").Cells(inx + 1, 1).valuen        a_quote.last_price = shtMarketForeign.Range("fx_rate_start").Cells(inx + 1, 4).valuen        a_quote.prev_price = shtMarketForeign.Range("fx_rate_start").Cells(inx + 1, 3).valuen        n        Set quotes(inx) = a_quoten        n        n    Next inxn    nnnEnd Subnn'------------------------------------------------------------------------n'Sub read_real_time_futuresn' Read S&P500 futures prices from excel worksheet.n'------------------------------------------------------------------------nPublic Sub read_real_time_futures(quotes() As clsQuote)nn    Dim no_of_data As Integern    Dim inx As Integern    Dim a_quote As clsQuoten    Dim forward_factor As Doublen    n    Erase quotesn    n    no_of_data = shtMarketForeign.Range("spx_futures_closing").Cells(-1, 1).valuen    n    ReDim quotes(1 To no_of_data) As clsQuoten    n    For inx = 1 To no_of_datan    n        Set a_quote = New clsQuoten        n        a_quote.asset_code = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 1).valuen        a_quote.bl_code = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 2).valuen        a_quote.maturity_date = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 0).valuen        n        a_quote.last_price = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 4).valuen        a_quote.prev_price = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 3).valuen        n        a_quote.prev_theo_price = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 5).valuen        a_quote.theo_price = shtMarketForeign.Range("spx_futures_closing").Cells(inx + 1, 6).valuen        n        Set quotes(inx) = a_quoten    n    Next inxn    nnEnd SubnnPublic Sub read_fx()nn    Dim no_of_data As Integern    Dim inx As Integern    Dim a_quote As clsQuoten    n    Erase fx__n    n    no_of_data = shtMarketForeign.Range("fx_rate_start").Cells(0, 1).valuen    n    ReDim fx__(1 To no_of_data) As clsQuoten    n    For inx = 1 To no_of_datan    n        Set a_quote = New clsQuoten        n        a_quote.asset_code = shtMarketForeign.Range("fx_rate_start").Cells(inx + 1, 1).valuen        a_quote.last_price = shtMarketForeign.Range("fx_rate_start").Cells(inx + 1, 4).valuen        a_quote.prev_price = shtMarketForeign.Range("fx_rate_start").Cells(inx + 1, 3).valuen        n        Set fx__(inx) = a_quoten    n    Next inxn    nnEnd Subnn'Public Function read_index_market(ByVal index_name As String _n'                                        , ByVal base_ccy As String _n'                                        , Optional read_local_vol_flag As Boolean = False _n'                                        , Optional isPrevDate As Boolean = False) As clsMarketnPublic Function read_index_market(ByVal index_name As String _n                                        , Optional read_local_vol_flag As Boolean = False _n                                        , Optional isPrevDate As Boolean = False) As clsMarketnn    Dim rtn_market As clsMarketn    n    Dim spot As Doublen    n    Dim rate_curve As clsRateCurven    Dim drift_adjust As clsRateCurve 'drift adjustment 추가: 2023.11.21n    Dim sabr_surface As clsSABRSurfacenn    Dim eval_date As Daten    n    Dim vol_surface_grid As clsPillarGridn    Dim vol_dates() As Daten    Dim no_of_vol_dates As Integern    Dim no_of_rate_dates As Integern    Dim no_of_adj_dates As Integer 'drift adjustment 추가: 2023.11.21n    Dim no_of_div_dates As Integern    n'    Dim vol_stirkes() As Doublen'    Dim inx As Integern'    Dim dummy_array() As Doublen    n    Dim dividend_schedule As clsDividendSchedulen'    Dim dividend_yield As Doublen    n'    Dim vol_strikes() As Doublen'    Dim atm_vol() As Doublen    nOn Error GoTo ErrorHandlernn    Dim ofs_market_rng As Integern    Dim ofs_vol_rng As Integern    If isPrevDate Thenn        ofs_market_rng = 5n        ofs_vol_rng = 105n    Elsen        ofs_market_rng = 0n        ofs_vol_rng = 0n    End Ifn    n    Set rtn_market = New clsMarketn    rtn_market.index_name = index_namen    n    'Set sabr_surface = Nothingnn    '------------------------n    ' Rangen    '------------------------n    Dim the_range As Rangen    Set the_range = shtMarket.Range(index_name).Offset(0, ofs_market_rng)n    n    no_of_div_dates = the_range.Cells(36, 3).valuen    If no_of_div_dates = 0 Thenn        Set dividend_schedule = Nothingn    Elsen        Set dividend_schedule = New clsDividendSchedulen        dividend_schedule.initialize_div no_of_div_dates, range_to_array_date(shtMarket.Range(the_range.Cells(38, 2), the_range.Cells(37 + no_of_div_dates, 2)), 1), range_to_array(shtMarket.Range(the_range.Cells(38, 3), the_range.Cells(37 + no_of_div_dates, 3)), 1)n        dividend_schedule.ratioDividend = 0n    End Ifn        n    '----------------n    ' Currencyn    '----------------n    rtn_market.ul_currency = the_range.Cells(5, 3).valuen    n    '----------------n    ' Lambda Neutral 2019.3.27n    '----------------n    rtn_market.lambda_neutral = the_range.Cells(24, 3).valuen    n    If shtMarket.Range("SCENARIO_ENABLE") = True Thenn        Dim corr_shock As Doublen        corr_shock = 0n    n        Select Case shtMarket.Range("SCENARIO_ID").Value2n        Case "C+0.1": corr_shock = 0.1n        Case "C+0.2": corr_shock = 0.2n        Case "C+0.3": corr_shock = 0.3n        Case "SC001": corr_shock = 0.1n        Case "SC002": corr_shock = 0.2n        Case "H001_1": corr_shock = 0.25 * 0.1n        Case "H001_2": corr_shock = 0.25 * 0.2n        Case "H001_3": corr_shock = 0.25 * 0.3n        Case "H001_4": corr_shock = 0.25 * 0.4n        Case "H001_5": corr_shock = 0.25 * 0.5n        Case "H001_6": corr_shock = 0.25 * 0.6n        Case "H001_7": corr_shock = 0.25 * 0.7n        Case "H001_8": corr_shock = 0.25 * 0.8n        Case "H001_9": corr_shock = 0.25 * 0.9n        Case "H001": corr_shock = 0.25n        Case "H002_1": corr_shock = 0.1 * 1 / 7n        Case "H002_2": corr_shock = 0.1 * 2 / 7n        Case "H002_3": corr_shock = 0.1 * 3 / 7n        Case "H002_4": corr_shock = 0.1 * 4 / 7n        Case "H002_5": corr_shock = 0.1 * 5 / 7n        Case "H002_6": corr_shock = 0.1 * 6 / 7n        Case "H002": corr_shock = 0.1n        Case "H003_1": corr_shock = 0.15 * 1 / 7n        Case "H003_2": corr_shock = 0.15 * 2 / 7n        Case "H003_3": corr_shock = 0.15 * 3 / 7n        Case "H003_4": corr_shock = 0.15 * 4 / 7n        Case "H003_5": corr_shock = 0.15 * 5 / 7n        Case "H003_6": corr_shock = 0.15 * 6 / 7n        Case "H003": corr_shock = 0.15n        Case "RVS001": corr_shock = 0.55 * 0.1n        Case "RVS002": corr_shock = 0.55 * 0.2n        Case "RVS003": corr_shock = 0.55 * 0.3n        Case "RVS004": corr_shock = 0.55 * 0.4n        Case "RVS005": corr_shock = 0.55 * 0.5n        Case "RVS006": corr_shock = 0.55 * 0.6n        Case "RVS007": corr_shock = 0.55 * 0.7n        Case "RVS008": corr_shock = 0.55 * 0.8n        Case "RVS009": corr_shock = 0.55 * 0.9n        Case "RVS010": corr_shock = 0.55n        Case Else: corr_shock = 0n        End Selectn        rtn_market.lambda_neutral = min(rtn_market.lambda_neutral + corr_shock, 1)n    End Ifn    n    '----------------n    ' FX VOLn    '----------------n'    Select Case base_ccyn'    Case "KRW": rtn_market.ul_currency_vol = the_range.Cells(25, 3).valuen'    Case "USD": rtn_market.ul_currency_vol = the_range.Cells(26, 3).valuen'    End Selectn    rtn_market.set_ul_currency_vol DCF.KRW, the_range.Cells(25, 3).valuen    rtn_market.set_ul_currency_vol DCF.USD, the_range.Cells(26, 3).valuen    n    '--------------------n    ' Dividend Schedulen    '--------------------n    Set rtn_market.div_schedule_ = dividend_schedulen    rtn_market.div_yield_ = the_range.Cells(32, 3).valuen    n    '----------------n    ' Daten    '----------------n    eval_date = shtMarket.Range("market_date").valuen    n    '------------------------n    ' Spotn    '------------------------n    rtn_market.s_ = the_range.Cells(4, 3).valuen    rtn_market.refPriceForDividend = rtn_market.s_ '2018.7.19n    n    '----------------n    ' Rate Curven    '----------------n    no_of_rate_dates = the_range.Cells(6, 3).valuen    If no_of_rate_dates = 0 Thenn        Set rate_curve = Nothingn    Elsen        Set rate_curve = New clsRateCurven        rate_curve.initialize shtMarket.Range(the_range.Cells(8, 2), the_range.Cells(7 + no_of_rate_dates, 2)), shtMarket.Range(the_range.Cells(8, 3), the_range.Cells(7 + no_of_rate_dates, 3))n    End Ifn    n    Set rtn_market.rate_curve_ = rate_curven    n    '----------------n    ' Drift adjustment : 2023.11.21n    '----------------n    Dim term_date() As Daten    Dim adjust() As Doublen    n    no_of_adj_dates = get_drift_adjustment(term_date, adjust, eval_date, index_name)n    If no_of_adj_dates = 0 Thenn        Set drift_adjust = Nothingn    Elsen        Set drift_adjust = New clsRateCurven        drift_adjust.initialize_by_array term_date, adjustn    End Ifn    n    Set rtn_market.drift_adjust_ = drift_adjustn    n    '----------------n    ' SABR Vol Surfacen    '----------------n    n    Set sabr_surface = New clsSABRSurfacen    n    'for leverage indicesn    If index_name = "KRD020021147" Thenn        index_name = "KOSPI200"n    End Ifn    read_local_vol sabr_surface, index_name, spot, eval_date, ofs_vol_rngn                              n    Set rtn_market.sabr_surface_ = sabr_surfacen    n    Set read_index_market = rtn_marketn    n    Set dividend_schedule = Nothingn    Set vol_surface_grid = Nothingn    Set rate_curve = Nothingn    Set sabr_surface = Nothingn    Set rtn_market = Nothingn    Set the_range = Nothingn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_index_market", Err.descriptionnnEnd FunctionnnnPublic Function read_index_market_yesterday(ByVal index_name As String _n                                        , Optional read_local_vol_flag As Boolean = False) As clsMarketn                                        n    Dim ofs As Integern    ofs = 5nn    Dim rtn_market As clsMarketn    n    Dim spot As Doublen    n    Dim rate_curve As clsRateCurven    Dim sabr_surface As clsSABRSurfacenn    Dim eval_date As Daten    n    Dim vol_surface_grid As clsPillarGridn    Dim vol_dates() As Daten    Dim no_of_vol_dates As Integern    Dim no_of_rate_dates As Integern    Dim no_of_div_dates As Integern    n'    Dim vol_stirkes() As Doublen'    Dim inx As Integern'    Dim dummy_array() As Doublen    n    Dim dividend_schedule As clsDividendSchedulen'    Dim dividend_yield As Doublen    n'    Dim vol_strikes() As Doublen'    Dim atm_vol() As Doublen    nOn Error GoTo ErrorHandlernn    Set rtn_market = New clsMarketn    rtn_market.index_name = index_namen    n    'Set sabr_surface = Nothingnn    '------------------------n    ' Rangen    '------------------------n    Dim the_range As Rangen    Set the_range = shtMarket.Range(index_name)n    n    no_of_div_dates = the_range.Cells(28, 3 + ofs).valuen    If no_of_div_dates = 0 Thenn        Set dividend_schedule = Nothingn    Elsen        Set dividend_schedule = New clsDividendSchedulen        dividend_schedule.initialize_div no_of_div_dates, range_to_array_date(shtMarket.Range(the_range.Cells(30, 2 + ofs), the_range.Cells(29 + no_of_div_dates, 2 + ofs)), 1), range_to_array(shtMarket.Range(the_range.Cells(30, 3 + ofs), the_range.Cells(29 + no_of_div_dates, 3 + ofs)), 1)n    End Ifn        n    '----------------n    ' Currencyn    '----------------n    rtn_market.ul_currency = the_range.Cells(5, 3 + ofs).valuen    n    '----------------n    ' FX VOLn    '----------------n    rtn_market.ul_currency_vol = the_range.Cells(25, 3 + ofs).valuen    n    '--------------------n    ' Dividend Schedulen    '--------------------n    Set rtn_market.div_schedule_ = dividend_schedulen    rtn_market.div_yield_ = the_range.Cells(27, 3 + ofs).valuen    n    '----------------n    ' Daten    '----------------n    'eval_date = shtMarket.Range("market_date").Offset(1, 0).valuen    eval_date = shtMarket.Range("market_date").valuen    n    '------------------------n    ' Spotn    '------------------------n    rtn_market.s_ = the_range.Cells(4, 3 + ofs).valuen   n    '----------------n    ' Rate Curven    '----------------n    no_of_rate_dates = the_range.Cells(6, 3 + ofs).valuen    If no_of_rate_dates = 0 Thenn        Set rate_curve = Nothingn    Elsen        Set rate_curve = New clsRateCurven        rate_curve.initialize shtMarket.Range(the_range.Cells(8, 2 + ofs), the_range.Cells(7 + no_of_rate_dates, 2 + ofs)), shtMarket.Range(the_range.Cells(8, 3 + ofs), the_range.Cells(7 + no_of_rate_dates, 3 + ofs))n    End Ifn    n    Set rtn_market.rate_curve_ = rate_curven    n    '----------------n    ' SABR Vol Surfacen    '----------------n    n    Set sabr_surface = New clsSABRSurfacen    n    read_local_vol_yesterday sabr_surface, index_name, spot, eval_daten                              n    Set rtn_market.sabr_surface_ = sabr_surfacen    n    Set read_index_market_yesterday = rtn_marketn    n    Set dividend_schedule = Nothingn    Set vol_surface_grid = Nothingn    Set rate_curve = Nothingn    Set sabr_surface = Nothingn    Set rtn_market = Nothingn    Set the_range = Nothingn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_index_market_yesterday", Err.descriptionnnEnd FunctionnnPublic Function read_local_vol(ByRef sabr_surface As clsSABRSurface, ByVal index_name As String, ByVal spot As Double, ByVal eval_date As Date, Optional ByVal ofs As Integer = 0) ', Optional max_date As Date = -1)nn    Dim vol_surface_range As Rangen    Dim local_vol_surface_range As Rangen    n    Dim vol_surface_grid As clsPillarGridn    Dim local_vol_surface_grid As clsPillarGridn    n    Dim no_of_strikes As Integern    Dim no_of_vol_dates As Integern    Dim no_of_local_vol_dates As Integern    Dim effective_no_of_vol_dates As Integern    n    Dim vol_dates() As Daten    Dim local_vol_dates() As Daten    Dim vol_strikes() As Doublen    Dim local_vol_strikes() As Doublen    Dim vol_data() As Doublen    Dim local_vol_data() As Doublen    n    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    n    Dim sabr_parameters_loc As clsSABRParamArrayn    nOn Error GoTo ErrorHandlern    n    sabr_surface.eval_date_ = eval_daten    n    '-----------------------------------n    ' Set Worksheet Rangen    '-----------------------------------n    Set local_vol_surface_range = shtLocalVol.Range(index_name & "_Local_Vol_Surface").Offset(0, ofs)n    n    '-----------------------------------n    ' Set Gridn    ' The number of local vol dates are not set, yetn    '-----------------------------------n    Set local_vol_surface_grid = New clsPillarGridn    n    no_of_strikes = local_vol_surface_range.Cells(0, 2).valuenn    If no_of_strikes > 0 Thenn    n    '-----------------------------------n    ' Set local_vol_datesn    '-----------------------------------n    'ReDim vol_dates(1 To no_of_vol_dates)n    For inx = 1 To local_vol_surface_range.Cells(0, 1).valuen    n        'day_shift 적용으로 이 부분 삭제:2018.12.5n        'If local_vol_surface_range.Cells(inx + 1, 1).value > eval_date Thenn            push_back_date local_vol_dates, local_vol_surface_range.Cells(inx + 1, 1).valuen            effective_no_of_vol_dates = effective_no_of_vol_dates + 1n        'End Ifnn    Next inxn    n  '  max_date = 0n    n'    If max_date > local_vol_dates(effective_no_of_vol_dates) Thenn'        push_back_date local_vol_dates, max_daten'    End Ifn'n    '-----------------------------------n    ' Set vol_strikes.n    '-----------------------------------n    ReDim vol_strikes(1 To no_of_strikes)n    For inx = 1 To no_of_strikesn        vol_strikes(inx) = local_vol_surface_range.Cells(1, inx + 1).valuen    Next inxn    n    n    '-----------------------------------n    ' Set local_vol_strikes.n    '-----------------------------------n    n    inx = 1n    n    Do While local_vol_surface_range.Cells(1, inx + 1).value > 0n        push_back_double local_vol_strikes, local_vol_surface_range.Cells(1, inx + 1).valuen        inx = inx + 1n    Loopn        nn    n    '-----------------------------------n    ' Initialize gridsn    '-----------------------------------nn    local_vol_surface_grid.initialize spot, local_vol_dates, eval_daten    nn    local_vol_surface_grid.set_strikes local_vol_strikesn    n  '  Set sabr_surface = New clsSABRSurfacen  n    '-----------------------------------n    ' Read Datan    '-----------------------------------n    ReDim local_vol_data(1 To local_vol_surface_grid.no_of_dates, 1 To local_vol_surface_grid.no_of_strikes) As Doublen    n   n    For inx = 1 To local_vol_surface_grid.no_of_dates ' Loop for grid datesn            n        For knx = 1 To local_vol_surface_grid.no_of_strikes ' Loop for strikesn            n            local_vol_data(inx, knx) = local_vol_surface_range.Cells(inx + 1, knx + 1).valuen            n        Next knxn        n    Next inxn    n    sabr_surface.set_local_vol_surface local_vol_surface_grid, local_vol_datann    End Ifn    n    Set vol_surface_range = Nothingn    Set local_vol_surface_range = Nothingn    Set vol_surface_grid = Nothingn    Set local_vol_surface_grid = Nothingn    Set sabr_parameters_loc = Nothingn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_local_vol", Err.descriptionn    nnEnd FunctionnnnPublic Function read_local_vol_yesterday(ByRef sabr_surface As clsSABRSurface, ByVal index_name As String, ByVal spot As Double, ByVal eval_date As Date)  ', Optional max_date As Date = -1)nn    Dim ofs As Integern    ofs = 53n    n    sabr_surface.eval_date_ = eval_datenn    Dim vol_surface_range As Rangen    Dim local_vol_surface_range As Rangen    n    Dim vol_surface_grid As clsPillarGridn    Dim local_vol_surface_grid As clsPillarGridn    n    Dim no_of_strikes As Integern    Dim no_of_vol_dates As Integern    Dim no_of_local_vol_dates As Integern    Dim effective_no_of_vol_dates As Integern    n    Dim vol_dates() As Daten    Dim local_vol_dates() As Daten    Dim vol_strikes() As Doublen    Dim local_vol_strikes() As Doublen    Dim vol_data() As Doublen    Dim local_vol_data() As Doublen    n    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    n    Dim sabr_parameters_loc As clsSABRParamArrayn    nOn Error GoTo ErrorHandlern    n    '-----------------------------------n    ' Set Worksheet Rangen    '-----------------------------------n    Set local_vol_surface_range = shtLocalVol.Range(index_name & "_Local_Vol_Surface").Offset(0, ofs)n    n    '-----------------------------------n    ' Set Gridn    ' The number of local vol dates are not set, yetn    '-----------------------------------n    Set local_vol_surface_grid = New clsPillarGridn    n    no_of_strikes = local_vol_surface_range.Cells(0, 2).valuennn    n    '-----------------------------------n    ' Set local_vol_datesn    '-----------------------------------n    'ReDim vol_dates(1 To no_of_vol_dates)n    For inx = 1 To local_vol_surface_range.Cells(0, 1).valuen      n        If local_vol_surface_range.Cells(inx + 1, 1).value > eval_date Thenn            push_back_date local_vol_dates, local_vol_surface_range.Cells(inx + 1, 1).valuen            effective_no_of_vol_dates = effective_no_of_vol_dates + 1n        End Ifnn    Next inxn    n  '  max_date = 0n    n'    If max_date > local_vol_dates(effective_no_of_vol_dates) Thenn'        push_back_date local_vol_dates, max_daten'    End Ifn'n    '-----------------------------------n    ' Set vol_strikes.n    '-----------------------------------n    ReDim vol_strikes(1 To no_of_strikes)n    For inx = 1 To no_of_strikesn        vol_strikes(inx) = local_vol_surface_range.Cells(1, inx + 1).valuen    Next inxn    n    n    '-----------------------------------n    ' Set local_vol_strikes.n    '-----------------------------------n    n    inx = 1n    n    Do While local_vol_surface_range.Cells(1, inx + 1).value > 0n        push_back_double local_vol_strikes, local_vol_surface_range.Cells(1, inx + 1).valuen        inx = inx + 1n    Loopn        nn    n    '-----------------------------------n    ' Initialize gridsn    '-----------------------------------nn    local_vol_surface_grid.initialize spot, local_vol_dates, eval_daten    nn    local_vol_surface_grid.set_strikes local_vol_strikesn    n  '  Set sabr_surface = New clsSABRSurfacen  n    '-----------------------------------n    ' Read Datan    '-----------------------------------n    ReDim local_vol_data(1 To local_vol_surface_grid.no_of_dates, 1 To local_vol_surface_grid.no_of_strikes) As Doublen    n   n    For inx = 1 To local_vol_surface_grid.no_of_dates ' Loop for grid datesn            n        For knx = 1 To local_vol_surface_grid.no_of_strikes ' Loop for strikesn            n            local_vol_data(inx, knx) = local_vol_surface_range.Cells(inx + 1, knx + 1).valuen            n        Next knxn        n    Next inxn    n    sabr_surface.set_local_vol_surface local_vol_surface_grid, local_vol_datann    Set vol_surface_range = Nothingn    Set local_vol_surface_range = Nothingn    Set vol_surface_grid = Nothingn    Set local_vol_surface_grid = Nothingn    Set sabr_parameters_loc = Nothingn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_local_vol", Err.descriptionn    nnEnd FunctionnnPrivate Function read_sabr_parameter(ul_code As String, position As Integer, no_of_dates As Integer) As Double()n    n    Dim rtn_value() As Doublen    Dim inx As Integern    Dim tmp_last_value As Doublen    n    nOn Error GoTo ErrorHandlern    n    For inx = 1 To no_of_datesn    n        push_back_double rtn_value, shtLocalVol.Range(ul_code & "_Local_Vol_Surface").Cells(inx + 1, position).valuen    n    Next inxn    n    n'    If push_back_last Thenn'n'        tmp_last_value = rtn_value(no_of_dates)n'        push_back_double rtn_value, tmp_last_valuen'    End Ifn        n    read_sabr_parameter = rtn_valuenn    Exit Functionn    nErrorHandler:nn    raise_err "read_sabr_parameter", Err.descriptionnnEnd Functionnnn'--------------------------------------------------------------------n' Function: read_deal_ticketn' Desc: Read deal sheet to make deal ticket objectn'--------------------------------------------------------------------nPublic Function read_barrier_deal_ticket() As clsBarrierDealTicketnn    Dim deal_ticket As clsBarrierDealTicketn    Dim no_of_schedule As Integern    Dim inx As Integern    Dim call_dates() As Daten    Dim strikes() As Doublen    Dim coupons() As Doublen    nOn Error GoTo ErrorHandlernn    Set deal_ticket = New clsBarrierDealTicketn    n    deal_ticket.asset_code = shtBarrierPricer.Range("asset_code").Cells(1, 1).valuen    deal_ticket.fund_code_c = shtBarrierPricer.Range("fund_code_c").Cells(1, 1).valuen    deal_ticket.fund_code_m = shtBarrierPricer.Range("fund_code_m").Cells(1, 1).valuen    deal_ticket.ul_code = shtBarrierPricer.Range("ul_code").Cells(1, 1).valuen    n    deal_ticket.current_date = shtBarrierPricer.Range("current_date").Cells(1, 1).valuen    deal_ticket.value_date = shtBarrierPricer.Range("value_date").Cells(1, 1).valuen    deal_ticket.maturity_date = shtBarrierPricer.Range("maturity_date").Cells(1, 1).valuen    deal_ticket.settlement_date = shtBarrierPricer.Range("settlement_date").Cells(1, 1).valuen    n    deal_ticket.alive_yn = shtBarrierPricer.Range("alive_yn").Cells(1, 1).valuen    deal_ticket.confirmed_yn = shtBarrierPricer.Range("confirmed_yn").Cells(1, 1).valuen    n    deal_ticket.issue_cost = shtBarrierPricer.Range("issue_cost").Cells(1, 1).valuen    deal_ticket.reference = shtBarrierPricer.Range("reference").Cells(1, 1).valuen    n    If UCase(shtBarrierPricer.Range("buy_sell")) = "BUY" Thenn        deal_ticket.quantity = shtBarrierPricer.Range("no_of_contracts").Cells(1, 1).valuen    Elsen        deal_ticket.quantity = shtBarrierPricer.Range("no_of_contracts").Cells(1, 1).value * -1n    End Ifn    n    deal_ticket.call_put = shtBarrierPricer.Range("call_put").Cells(1, 2).valuen    deal_ticket.strike = shtBarrierPricer.Range("strike").Cells(1, 1).valuen    n    deal_ticket.barrier_type = shtBarrierPricer.Range("barrier_type").Cells(1, 2).valuen    deal_ticket.barrier = shtBarrierPricer.Range("barrier").Cells(1, 1).valuen    deal_ticket.rebate = shtBarrierPricer.Range("rebate").Cells(1, 1).valuen    deal_ticket.barrier_monitoring = shtBarrierPricer.Range("Barrier_monitoring_freq.").Cells(1, 1).valuen    deal_ticket.rebate_only = shtBarrierPricer.Range("Rebate_Only").Cells(1, 2).valuen    deal_ticket.barrier_shift = shtBarrierPricer.Range("Barrier_Shift").Cells(1, 1).valuen    n    deal_ticket.participation_rate = shtBarrierPricer.Range("PR").Cells(1, 1).valuen    n    deal_ticket.x_grid = shtBarrierPricer.Range("x_grid").Cells(1, 1).valuen    deal_ticket.v_grid = shtBarrierPricer.Range("v_grid").Cells(1, 1).valuen    deal_ticket.t_grid = shtBarrierPricer.Range("t_grid").Cells(1, 1).valuen    n    deal_ticket.scheme_type = shtBarrierPricer.Range("fdm_scheme").Cells(1, 2).valuen    n    deal_ticket.instrument_type = shtBarrierPricer.Range("Instrument_type").Cells(1, 2).valuen    n    no_of_schedule = shtBarrierPricer.Range("no_of_schedules").valuen    n    If no_of_schedule >= 1 Thenn    n        ReDim call_dates(1 To no_of_schedule) As Daten        ReDim strikes(1 To no_of_schedule) As Doublen        ReDim coupons(1 To no_of_schedule) As Doublen        n        For inx = 1 To no_of_schedulen        n            call_dates(inx) = shtBarrierPricer.Range("schedule_start").Cells(inx, 1).valuen            strikes(inx) = shtBarrierPricer.Range("schedule_start").Cells(inx, 5).valuen            coupons(inx) = shtBarrierPricer.Range("schedule_start").Cells(inx, 4).valuen        n        Next inxn            n    n    End Ifn    n    deal_ticket.funding_spread = shtBarrierPricer.Range("funding_spread").valuen    n    deal_ticket.set_schedule no_of_schedule, call_dates, strikes, couponsn    n    n    no_of_schedule = shtBarrierPricer.Range("no_of_floating_leg").valuen    n    If no_of_schedule >= 1 Thenn    n        ReDim call_dates(1 To no_of_schedule) As Daten        ReDim coupons(1 To no_of_schedule) As Doublen        n        For inx = 1 To no_of_schedulen        n            call_dates(inx) = shtBarrierPricer.Range("floating_leg_start").Cells(inx, 1).valuen            coupons(inx) = shtBarrierPricer.Range("floating_leg_start").Cells(inx, 2).valuen        n        Next inxn            n    n    End Ifn    n    deal_ticket.set_floating_schedule no_of_schedule, call_dates, couponsn    n    Set read_barrier_deal_ticket = deal_ticketn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_deal_ticket"n    nEnd FunctionnnnnPublic Sub clr_tester()n    Dim rtn_obj As Objectn    n   Set rtn_obj = ac_deal_ticket_to_clr(read_ac_deal_ticket())nnEnd Subnn'Modify deal_ticket for KOSPI2LG : 2018.7.9nPublic Function modify_ac_deal_ticket(deal_ticket As clsACDealTicket, market_set As clsMarketSet) As clsACDealTicketn    n    Dim i As Integern    Dim levULCode As Stringn    Dim baseULCode As Stringn    'Dim ratioLeverage As Doublen    'ratioLeverage - >codecodeLeverage : 2020.6.19n    Dim codeLeverage As Integern    n    Dim levULRef As Doublen    Dim levULSpot As Doublen    Dim baseULRef As Doublen    Dim baseULSpot As Doublen    n    Dim isLeveragedUL As Booleann    Dim isLeveragedDeal As Booleann    isLeveragedUL = Falsen    isLeveragedDeal = Falsenn    For i = 1 To deal_ticket.no_of_uln    n        Select Case deal_ticket.ul_code(i)n        Case "KRD020021147"n            levULCode = "KRD020021147"n            baseULCode = get_ua_code(ua.KOSPI200)n            'ratioLeverage = 2n            codeLeverage = 1n            isLeveragedUL = Truen        Case Elsen            codeLeverage = 0n            isLeveragedUL = Falsen        End Selectn        isLeveragedDeal = isLeveragedDeal Or isLeveragedULn        n        If isLeveragedUL Thenn            levULSpot = market_set.market_by_ul(levULCode).s_n            baseULSpot = market_set.market_by_ul(baseULCode).s_n            levULRef = deal_ticket.reference_price(i)n            baseULRef = levULRef * baseULSpot / levULSpotn            n            deal_ticket.set_reference_price baseULRef, in            deal_ticket.set_ul_code baseULCode, in            'deal_ticket.set_ratioLeverage ratioLeverage, in        Elsen            'deal_ticket.set_ratioLeverage 1, in        End Ifn        n        deal_ticket.set_codeLeverage codeLeverage, in                n    Next in    n    deal_ticket.isLeveraged = isLeveragedDealn  n    Set modify_ac_deal_ticket = deal_ticketn    nEnd FunctionnnnPublic Function read_ac_deal_ticket() As clsACDealTicketnn    Dim deal_ticket As clsACDealTicketn    Dim schedule_list() As clsAutocallSchedulen    Dim no_of_schedule As Integern    Dim call_dates() As Daten    Dim strikes() As Doublen    Dim coupons() As Doublen    Dim strike_shifts() As Doublen    'Dim early_exit_touched_flags() As Doublen    Dim early_exit_touched_flags() As Long 'data type 변경: dll(2018.7.17)n    Dim early_exit_performance_types() As Long 'dll(2018.8.8)n    Dim early_exit_barrier_types() As Long 'dll(2018.8.8)n    Dim inx As Integern    Dim jnx As Integern    nOn Error GoTo ErrorHandlernn    Set deal_ticket = New clsACDealTicketn    n    deal_ticket.fund_code_m = shtACPricer.Range("fund_code_m").Cells(1, 1).valuen    deal_ticket.fund_code_c = shtACPricer.Range("fund_code_c").Cells(1, 1).valuen    deal_ticket.asset_code = shtACPricer.Range("asset_code").Cells(1, 1).valuen    n    'no_of_uln    deal_ticket.set_ul_dim shtACPricer.Range("No_of_Underlying").Cells(1, 1).valuen    If shtACPricer.Range("no_of_early_exit_schedule").Cells(1, 1).value = 1 Thenn        deal_ticket.redim_early_exit_barrier shtACPricer.Range("no_of_early_exit_schedule").Cells(1, 1).valuen    End Ifn    n    For inx = 1 To deal_ticket.no_of_uln        deal_ticket.set_ul_code shtACPricer.Range("ul_code").Cells(1, inx).value, inxn    Next inxn    'deal_ticket.set_ul_code shtACPricer.Range("ul_code").Cells(1, 2).value, 2n    n    deal_ticket.current_date = shtACPricer.Range("current_date").Cells(1, 1).valuen    deal_ticket.current_date_origin_ = deal_ticket.current_daten    deal_ticket.value_date = shtACPricer.Range("value_date").Cells(1, 1).valuen    n    deal_ticket.settlement_date = shtACPricer.Range("settlement_date").Cells(1, 1).valuen    n    deal_ticket.alive_yn = shtACPricer.Range("alive_yn").Cells(1, 1).valuen    deal_ticket.confirmed_yn = shtACPricer.Range("confirmed_yn").Cells(1, 1).valuen    n    If UCase(shtACPricer.Range("buy_sell")) = "BUY" Thenn        deal_ticket.notional = shtACPricer.Range("notional").Cells(1, 1).valuen    Elsen        deal_ticket.notional = shtACPricer.Range("notional").Cells(1, 1).value * -1n    End Ifn    deal_ticket.ccy = shtACPricer.Range("CCY").valuen        n    deal_ticket.call_put = shtACPricer.Range("call_put").Cells(1, 2).valuen    deal_ticket.dummy_coupon = shtACPricer.Range("dummy").Cells(1, 1).valuen    deal_ticket.floor_value = shtACPricer.Range("floor_value").valuen        n    deal_ticket.ki_barrier_flag = shtACPricer.Range("ki_flag").Cells(1, 2).valuen    deal_ticket.ki_touched_flag = shtACPricer.Range("ki_touch_flag").Cells(1, 2).valuen    n    For inx = 1 To deal_ticket.no_of_uln        deal_ticket.set_ki_barrier shtACPricer.Range("ki_barrier").Cells(1, inx).value, inxn        'deal_ticket.set_ki_barrier shtACPricer.Range("ki_barrier").Cells(1, 1).value, inxn    Next inxnnn    deal_ticket.put_strike = shtACPricer.Range("put_strike").Cells(1, 1).valuen    deal_ticket.call_participation = shtACPricer.Range("Call_PR").Cells(1, 1).valuen    deal_ticket.call_strike = shtACPricer.Range("Call_Strike").Cells(1, 1).valuen    deal_ticket.put_additional_coupon = shtACPricer.Range("Put_Add_CPN").Cells(1, 1).valuen    deal_ticket.ki_monitoring_freq = shtACPricer.Range("KI_Monitoring_Freq").Cells(1, 1).valuen    deal_ticket.ki_adj_pct = shtACPricer.Range("ki_adj_pct").Cells(1, 1).valuen    deal_ticket.put_participation = shtACPricer.Range("put_participation").Cells(1, 1).valuenn    n    deal_ticket.ejectable_flag = shtACPricer.Range("ejectable_flag").Cells(1, 1).valuen    n    For inx = 1 To deal_ticket.no_of_uln        deal_ticket.set_reference_price shtACPricer.Range("reference").Cells(1, inx).value, inxn        deal_ticket.set_ejected_ul_flag shtACPricer.Range("ejected_ul_flag").Cells(2, inx).value, inxn    Next inxn'    deal_ticket.reference_price_2 = shtACPricer.Range("reference").Cells(1, 3).value  '<-- 2Dnn    'deal_ticket.strike_shift = shtACPricer.Range("strike_shift").Cells(1, 1).valuen    deal_ticket.ki_barrier_shift = shtACPricer.Range("KI_Barrier_Shift").Cells(1, 1).valuen    n    deal_ticket.rate_spread = shtACPricer.Range("Rate_Spread").Cells(1, 1).valuen    deal_ticket.issue_cost = shtACPricer.Range("issue_cost").Cells(1, 1).valuen    deal_ticket.hedge_cost = shtACPricer.Range("Hedge_Cost").Cells(1, 1).valuen    n    n    deal_ticket.issue_price = shtACPricer.Range("price").Cells(2, 1).valuen    n    n    no_of_schedule = shtACPricer.Range("no_of_schedules").Cells(1, 1).valuen    deal_ticket.no_of_schedule = no_of_schedulen    n    If no_of_schedule >= 1 Thenn        n        Erase schedule_list 'ReDim schedule_list(1 To no_of_schedule) As clsAutocallSchedulen        n        Dim a_schedule As clsAutocallSchedulen        n       n        For inx = 1 To no_of_schedulen        n            Set a_schedule = New clsAutocallSchedulen            n            a_schedule.call_date = shtACPricer.Range("schedule_start").Cells(inx, 1).valuen            n            jnx = 1n            n            Don                a_schedule.set_percent_strike shtACPricer.Range("schedule_start").Cells(inx, 4 + jnx).value, jnxn                a_schedule.set_coupon_on_call shtACPricer.Range("schedule_start").Cells(inx, 1 + jnx).value, jnxn                n                jnx = jnx + 1n            n            Loop While shtACPricer.Range("schedule_start").Cells(inx, 4 + jnx).value > 0n            n            '<--- addedn            a_schedule.performance_type = shtACPricer.Range("performance_type_on_call").Cells(inx, 1).valuen            a_schedule.ejectable_order = shtACPricer.Range("ejectable_order_on_call").Cells(inx, 1).value 'dll (2121.11.12)n            n            'for the ejectable structure : dll(2021.11.12)n            If deal_ticket.ejectable_flag = True Thenn                'If a_schedule.call_date = deal_ticket.current_date _n                    And shtACPricer.check_autocall(a_schedule.percent_strike, a_schedule.performance_type) = False Thenn                    a_schedule.ejected_event_flag = 1n                'End Ifn            Elsen                a_schedule.ejected_event_flag = 0n            End Ifn    n            If deal_ticket.no_of_ul = 3 And inx < no_of_schedule And deal_ticket.settlement_date < #6/18/2017# Thenn                a_schedule.strike_shift = 0n            Elsen                'a_schedule.strike_shift = shtACPricer.Range("strike_shift").valuen                a_schedule.strike_shift = shtACPricer.Range("strike_smoothing_width").Cells(inx, 1).valuen            End Ifn            '--->n        n            push_back_clsAutocallSchedule schedule_list, a_schedulen        n        Next inxn        n        deal_ticket.set_schedule_array schedule_listn        n        deal_ticket.strike_at_maturity = schedule_list(no_of_schedule).percent_strike '* deal_ticket.reference_pricen        deal_ticket.coupon_at_maturity = schedule_list(no_of_schedule).coupon_on_calln        deal_ticket.maturity_date = schedule_list(no_of_schedule).call_daten    n    Elsen    n        raise_err "read_ac_deal_ticket", "no schedule found"n        n    End Ifn    n    n    'deal_ticket.set_schedule no_of_schedule, call_dates, strikes, couponsn    n    'deal_ticket.comment = shtACPricer.Range("txtComment").valuen    n    n    deal_ticket.monthly_coupon_flag = shtACPricer.Range("Monthly_Coupon_Flag").Cells(1, 2).valuen        n    '----------------------------------------------------------------------n    ' Read Monthly Coupon Schedulen    '----------------------------------------------------------------------n    no_of_schedule = shtACPricer.Range("no_of_coupon_schedule").Cells(1, 1).valuen    n    If no_of_schedule >= 1 Thenn    n        ReDim call_dates(1 To no_of_schedule) As Daten        ReDim strikes(1 To no_of_schedule) As Doublen        ReDim coupons(1 To no_of_schedule) As Doublen         n        For inx = 1 To no_of_schedulen        n            call_dates(inx) = shtACPricer.Range("cpn_schedule_start").Cells(inx, 1).valuen            strikes(inx) = shtACPricer.Range("cpn_schedule_start").Cells(inx, 2).valuen            coupons(inx) = shtACPricer.Range("cpn_schedule_start").Cells(inx, 3).valuen        n        Next inxn                n    End Ifn        n    deal_ticket.set_coupon_schedule no_of_schedule, call_dates, strikes, couponsn    '----------------------------------------------------------------------nn    deal_ticket.monthly_coupon_amount = shtACPricer.Range("Monthly_Cpn").Cells(1, 1).valuen    n    nn        n    '----------------------------------------------------------------------n    ' Read EE Schedulen    '----------------------------------------------------------------------n    deal_ticket.early_exit_flag = shtACPricer.Range("Early_Exit_Flag").Cells(1, 2).valuen    n'    For inx = 1 To deal_ticket.no_of_uln'        deal_ticket.set_early_exit_barrier shtACPricer.Range("EE_Barrier").Cells(1, inx).value, inxn'        'deal_ticket.set_ki_barrier shtACPricer.Range("ki_barrier").Cells(1, 1).value, inxn'    Next inxn    n    no_of_schedule = shtACPricer.Range("no_of_early_exit_schedule").Cells(1, 1).valuen    n    If no_of_schedule >= 1 Thenn    n        deal_ticket.redim_early_exit_barrier no_of_schedulen    n        ReDim call_dates(1 To no_of_schedule) As Daten        ReDim coupons(1 To no_of_schedule) As Doublen        ReDim strike_shifts(1 To no_of_schedule) As Doublen        'ReDim early_exit_touched_flags(1 To no_of_schedule) As Doublen        ReDim early_exit_touched_flags(1 To no_of_schedule) As Long  'data type 변경: dll(2018.7.17)n        ReDim early_exit_performace_types(1 To no_of_schedule) As Long  'dll(2018.8.8)n        ReDim early_exit_barrier_types(1 To no_of_schedule) As Long  'dll(2018.8.8)n        n        For inx = 1 To no_of_schedulen        n            call_dates(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 1).valuen            coupons(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 2).valuen            strike_shifts(inx) = 0n            n            For jnx = 1 To deal_ticket.no_of_uln                deal_ticket.set_early_exit_barrier shtACPricer.Range("early_exit_schedule_start").Cells(inx, 5).value, deal_ticket.no_of_ul * (inx - 1) + jnxn            Next jnxn            n            If shtACPricer.Range("early_exit_schedule_start").Cells(inx, 6).value = "Y" Thenn                early_exit_touched_flags(inx) = 1#n            ElseIf shtACPricer.Range("early_exit_schedule_start").Cells(inx, 6).value = "N" Thenn                early_exit_touched_flags(inx) = 0#n            End Ifn            n            early_exit_performace_types(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 7).value  'dll(2018.8.8)n            early_exit_barrier_types(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 8).value  'dll(2018.8.8)n            n        Next inxn                n    End Ifn        n    'deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, couponsn    'deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, coupons, strike_shifts, early_exit_touched_flagsn    deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, coupons, strike_shifts, early_exit_touched_flags, early_exit_performace_types, early_exit_barrier_typesn    '----------------------------------------------------------------------nn    n    n    no_of_schedule = shtACPricer.Range("no_of_floating_leg").valuen    n    If no_of_schedule >= 1 Thenn    n        ReDim call_dates(1 To no_of_schedule) As Daten        ReDim coupons(1 To no_of_schedule) As Doublen        n        For inx = 1 To no_of_schedulen        n            call_dates(inx) = shtACPricer.Range("floating_leg_start").Cells(inx, 1).valuen            coupons(inx) = shtACPricer.Range("floating_leg_start").Cells(inx, 2).valuen        n        Next inxn            n    n    End Ifn    n    deal_ticket.set_floating_schedule no_of_schedule, call_dates, couponsn    n    n    deal_ticket.x_grid = shtACPricer.Range("x_grid").Cells(1, 1).valuen    deal_ticket.v_grid = shtACPricer.Range("v_grid").Cells(1, 1).valuen    deal_ticket.t_grid = shtACPricer.Range("t_grid").Cells(1, 1).valuen    deal_ticket.days_per_step = shtACPricer.Range("days_per_step").Cells(1, 1).valuen    deal_ticket.scheme_type = shtACPricer.Range("fdm_scheme").Cells(1, 2).valuen    deal_ticket.mid_day_greek = (shtACPricer.Range("mid_day_greek").Cells(1, 1).value = "Y")n    deal_ticket.vol_scheme_type = shtACPricer.Range("vol_scheme").Cells(1, 2).valuen    deal_ticket.no_of_trials = shtACPricer.Range("no_of_trials").Cells(1, 1).valuen    n    deal_ticket.instrument_type = shtACPricer.Range("Instrument_type").Cells(1, 2).valuen    'deal_ticket.performance_type = shtACPricer.Range("performance_type").Cells(1, 2).valuen    deal_ticket.ki_performance_type = shtACPricer.Range("ki_performance_type").Cells(1, 2).valuen    n    deal_ticket.ra_flag = shtACPricer.Range("Range_Accrual_Flag").Cells(1, 2).valuen    deal_ticket.ra_cpn = shtACPricer.Range("ra_cpn").valuen    deal_ticket.ra_tenor = shtACPricer.Range("ra_tenor").Cells(1, 2).valuen    deal_ticket.ra_min_percent = shtACPricer.Range("ra_min").valuen    deal_ticket.ra_max_percent = shtACPricer.Range("ra_max").valuen    n    '-------------------------------n    '2015-10-05n    '-------------------------------n    Dim no_of_term As Integern    Dim term_array() As Daten    n    no_of_term = shtACPricer.Range("no_of_term").valuen    n    For inx = 1 To no_of_termn        n        push_back_date term_array, shtACPricer.Range("Term_Vega_Start").Cells(inx, 1).valuen    n    Next inxn    n    deal_ticket.set_term_vega_tenor term_arrayn    n    '----------------------------------------------------------------------n    n    Set read_ac_deal_ticket = deal_ticketn    n    Set deal_ticket = Nothingn    For inx = 1 To no_of_schedulen        Set schedule_list(inx) = Nothingn    Next inxn    n    Exit FunctionnnErrorHandler:nn    raise_err "read_ac_deal_ticket", Err.descriptionnnnEnd Functionnnnnn'Public Function read_ac_deal_ticket(deal_code As String) As clsACDealTicketn'n'    Dim deal_ticket As clsACDealTicketn'    Dim no_of_schedule As Integern'    Dim call_dates() As Daten'    Dim strikes() As Doublen'    Dim coupons() As Doublen'    Dim strike_shifts() As Doublen'    'Dim early_exit_touched_flags() As Doublen'    Dim early_exit_touched_flags() As Long 'data type 변경: dll(2018.7.17)n'    Dim early_exit_performance_types() As Long 'dll(2018.8.8)n'    Dim early_exit_barrier_types() As Long 'dll(2018.8.8)n'    Dim inx As Integern'    Dim jnx As Integern'n'    Dim schedule_list() As clsAutocallSchedulen'n'On Error GoTo ErrorHandlern'n'    Set deal_ticket = New clsACDealTicketn'n'    Dim SQL As Stringn'n'    Dim oCmd As New ADODB.Commandn'    Dim oRS As New ADODB.Recordsetn'n'    Dim today As Daten'    today = shtACPricer.Range("current_date").valuen'n'    Dim tDayStr As Stringn'    tDayStr = date2str(today)n'n'    Dim oDB As New ADODB.Connectionn'    oDB.Open connStrn'n'    deal_ticket.current_date = todayn'    deal_ticket.current_date_origin_ = deal_ticket.current_daten'    deal_ticket.asset_code = deal_coden'n'    deal_ticket.alive_yn = "Y"n'    deal_ticket.confirmed_yn = "Y"n'    deal_ticket.call_put = "CALL"n'    deal_ticket.put_participation = 1n'    deal_ticket.put_strike = 1n'    deal_ticket.call_participation = 0n'    deal_ticket.call_strike = 1n'    deal_ticket.put_additional_coupon = 0n'    deal_ticket.ki_adj_pct = 1n'n'    deal_ticket.x_grid = 200n'    deal_ticket.v_grid = 100n'    deal_ticket.t_grid = 254n'    deal_ticket.mid_day_greek = Falsen'    deal_ticket.scheme_type = 1n'    deal_ticket.rate_spread = 0n'    deal_ticket.hedge_cost = 0n'    deal_ticket.issue_price = 0n'n'    deal_ticket.vol_scheme_type = 1n'    deal_ticket.no_of_trials = 16383n'    deal_ticket.instrument_type = 0n'    deal_ticket.ra_flag = 0n'    deal_ticket.ra_cpn = 0n'    deal_ticket.ra_tenor = 0n'    deal_ticket.ra_min_percent = 0n'    deal_ticket.ra_max_percent = 9999n'    deal_ticket.floor_value = 0n'n'    '---------- From Front DBn'    SQL = " select * from sps.ac_deal where asset_code = '" + productCode + "' "n'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    i = 1n'    Dim value_date As Daten'    Dim maturity_date As Daten'    Dim settlement_date As Daten'    Dim dummy_coupon As Doublen'    Dim ki_flag As Longn'    Dim ki_touch_flag As Longn'    Dim ki_monitoring_freq As Integern'    Dim notional As Doublen'    Dim issue_cost As Doublen'    Dim strike_smoothing As Doublen'    Dim ki_barrier_shift As Doublen'n'    Do Until oRS.EOFn'n'        'value daten'        value_date = str2date(oRS("VALUE_DATE"))n'        deal_ticket.value_date = value_daten'        'maturity daten'        maturity_date = str2date(oRS("EXPIRY_DATE"))n'        shtACPricer.Range("maturity_date").Cells(1, i) = maturity_daten'        'issue daten'        settlement_date = str2date(oRS("SETTLEMENT_DATE"))n'        deal_ticket.settlement_date = settlement_daten'n'        'dummy couponn'        dummy_coupon = oRS("DUMMY_COUPON")n'        deal_ticket.dummy_coupon = dummy_couponn'n'        'KI barrier flagn'        If (oRS("KI_BARRIER_YN") = "Y") Thenn'            ki_flag = 1n'        Elsen'            ki_flag = 0n'        End Ifn'        deal_ticket.ki_barrier_flag = ki_flagn'n'        'KI touched flagn'        If (oRS("KI_TOUCHED_YN") = "Y") Thenn'            ki_touch_flag = 1n'        Elsen'            ki_touch_flag = 0n'        End Ifn'        deal_ticket.ki_touched_flag = ki_touch_flagn'n'        'KI monitoring freq.n'        ki_monitoring_freq = oRS("KI_MONITORING_FREQ")n'        deal_ticket.ki_monitoring_freq = ki_monitoring_freqn'n'        'notionaln'        If oRS("NOTIONAL") = 0 Thenn'            notional = 1n'        Elsen'            notional = oRS("NOTIONAL")n'        End Ifn'        deal_ticket.notional = -1 * notional 'SELL 가정n'n'        'issue costn'        issue_cost = oRS("ISSUE_COST")n'        deal_ticket.issue_cost = issue_costn'n'        'KI barrier shiftn'        ki_barrier_shift = oRS("KIBARRIER_SHIFT_SIZE")n'        deal_ticket.ki_barrier_shift = ki_barrier_shiftn'n'        i = i + 1n'        oRS.MoveNextn'    Loopn'n'    oRS.Closen'n'    '---------- From BizOnen'    '기초자산 코드, 최초기준가, KI수준n'    SQL = " SELECT indv_iscd, decode(unas_iscd,'NIKKEI225','NKY',unas_iscd), unas_intl_prc, clrd_sdrt/100, barr_val/100 from BSYS.TBSIMO202D00@GDW where indv_iscd = '" + productCode + "' order by 2"n'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    i = 1n'    Dim redeem_shift As Booleann'    redeem_shift = Falsen'n'    Dim ua_code As Stringn'    Dim ua_ref_spot() As Doublen'    Dim ua_ki_barr() As Doublen'    Dim ua_close_spot() As Doublen'    ReDim ua_ref_spot(0) As Doublen'    ReDim ua_ki_barr(0) As Doublen'    ReDim ua_close_spot(0) As Doublen'n'    Do Until oRS.EOFn'n'        '단축코드 -> KR코드 변환 2019.3.5n'        If isQuote = True Thenn'            Select Case oRS(1)n'            Case "005380": ua_code = "KR7005380001" '현대차n'            Case "005930": ua_code = "KR7005930003" '삼성전자n'            Case "000030": ua_code = "KR7000030007" '우리은행n'            Case "028260": ua_code = "KR7028260008" '삼성물산n'            Case "105560": ua_code = "KR7105560007" 'KB금융n'            Case "035420": ua_code = "KR7035420009" 'NAVERn'            Case "018260": ua_code = "KR7018260000" '삼성SDSn'            Case "005490": ua_code = "KR7005490008" 'POSCOn'            Case "034220": ua_code = "KR7034220004" 'LG디스플레이n'            Case "D02002": ua_code = "KRD020021147" 'KOSPI200 레버리지n'            Case Else: ua_code = oRS(1)n'            End Selectn'        Elsen'            ua_code = oRS(1)n'        End Ifn'n'        'underlying coden'        deal_ticket.set_ul_code ua_code(i), in'n'        ReDim Preserve ua_ref_spot(UBound(ua_ref_spot) + 1) As Doublen'        ReDim Preserve ua_ki_barr(UBound(ua_ki_barr) + 1) As Doublen'        ReDim Preserve ua_close_spot(UBound(ua_close_spot) + 1) As Doublen'n'        ua_close_spot(i) = WorksheetFunction.VLookup(ua_code, Range("ua_close_spot"), 2, False)n'n'        'ref. spot: 신규발행종목 최초기준가 100으로 설정n'        '스트레스테스트 일 경우는 제외 2018.12.20n'        If (scenario_test = False) And (today = value_date) Thenn'            ua_ref_spot(i) = ua_close_spot(i)n'        Elsen'            ua_ref_spot(i) = oRS(2)n'            '최초기준가 검증(발행일에만)n'            If today = settlement_date And check_spot(oRS(1), date2str(value_date), oRS(2), oDB) = False Thenn'                MsgBox deal_code & ": " & oRS(1) & " 기초자산최초기준가 오류"n'            End Ifn'        End Ifn'n'        deal_ticket.set_reference_price ua_ref_spot(i), in'n'        'KI barriern'        ua_ki_barr(i) = oRS(4)n'        deal_ticket.set_ki_barrier ua_ki_barr(i), in'n'        If oRS(1) = "SX5E" Then redeem_shift = Truen'        If oRS(1) = "SPX" Then redeem_shift = Truen'n'        i = i + 1n'        oRS.MoveNextn'    Loopn'n'    'no of underlyingn'    deal_ticket.no_of_ul = i - 1n'n'    If redeem_shift Thenn'        maturity_date = maturity_date + 1n'    End Ifn'n'    oRS.Closen'n'    Dim early_exit_flag As Longn'    '----------------------------------------n'    'performance type, fund_code, ccyn'    SQL = " SELECT UNAS_CHOC_MTHD_CODE, CLRD_TYPE_CODE, substr(PROD_FNCD,1,2), PROD_FNCD, STLM_CRCD " _n'        & " FROM    bsys.TBSIMO201M00@gdw " _n'        & " WHERE   INDV_ISCD = '" + productCode + "' "n'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    Dim isFiveWins As Booleann'    isFiveWins = Falsen'n'    Do Until oRS.EOFn'n'        Select Case oRS(0)n'        Case "1"n'            deal_ticket.ki_performance_type = -1n'        Case "2"n'            deal_ticket.ki_performance_type = 1n'        Case "4"n'            deal_ticket.ki_performance_type = 0n'        Case "5"n'            deal_ticket.ki_performance_type = -1n'        End Selectn'n'        If oRS(1) = "29" Thenn'            early_exit_flag = 1n'        Elsen'            early_exit_flag = 0n'        End Ifn'        deal_ticket.early_exit_flag = early_exit_flagn'n'        If oRS(1) = "38" Thenn'            isFiveWins = Truen'        Elsen'            isFiveWins = Falsen'        End Ifn'n'        deal_ticket.fund_code_m = oRS(2)n'        deal_ticket.fund_code_c = oRS(3)n'        deal_ticket.ccy = oRS(4)n'n'        oRS.MoveNextn'    Loopn'n'n'    '----------------------------------------n'    'Call schedulen'    Dim no_of_ac_schedule As Integern'    Dim call_date() As Daten'    Dim coupon_on_call() As Doublen'    Dim barr_strike() As Doublen'    Dim barr_perform_type() As Integern'    ReDim call_date(0) As Daten'    ReDim coupon_on_call(0) As Doublen'    ReDim barr_strike(0) As Doublen'    ReDim barr_perform_type(0) As Integern'n'    If isFiveWins Thenn'        SQL = " SELECT CLRD_DTRM_DATE, null, "n'        SQL = SQL & "                 NVL(CLRD_INRT,0)/100 CLRD_ERT,"n'        SQL = SQL & "                 NVL(CLRD_BARR_VAL,0)/100 UNAS_SDRT,"n'        SQL = SQL & "                'N' AVRG_APLY_YN"n'        SQL = SQL & "         FROM   BSYS.TBSIMO227L00@GDW"n'        SQL = SQL & "         WHERE  INDV_ISCD = '" + productCode + "'"n'        SQL = SQL & " ORDER BY CLRD_DTRM_DATE"n'    Elsen'        SQL = " SELECT  TRTH_CLRD_DTRM_DATE   DT  " _n'            & "        ,RMS.GET_WORKDATE(TRTH_CLRD_DTRM_DATE,1)   BFRPY_BASE_DT " _n'            & "    ,NVL(CLRD_ERT,0) / 100       BFRPY_BASE_RT " _n'            & "    ,NVL(UNAS_SDRT1,0)/100     BASERT1 " _n'            & "    ,NVL(AVRG_APLY_YN,'N')     AVRG_APLY_YN " _n'            & "FROM    BSYS.TBSIMO203D00@gdw " _n'            & "WHERE   INDV_ISCD = '" + productCode + "' " _n'            & "ORDER BY CLRD_DTRM_DATE "n'    End Ifn'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    i = 1n'    Do Until oRS.EOFn'n'        ReDim Preserve call_date(UBound(call_date) + 1) As Daten'        ReDim Preserve coupon_on_call(UBound(coupon_on_call) + 1) As Doublen'        ReDim Preserve barr_strike(UBound(barr_strike) + 1) As Doublen'        ReDim Preserve barr_perform_type(UBound(barr_perform_type) + 1) As Integern'n'        If redeem_shift Thenn'            '2019.4.18n'            '오늘이 실제 조기상환평가일 후 첫 영업일이면 call date를 오늘로 설정: 상환여부 판단 때문n'            If today = WorksheetFunction.WorkDay(str2date(oRS(0)), 1, shtHolidays.Range("Holidays")) Thenn'                call_date(i) = todayn'            Elsen'                '기초자산 지역에 따라 상환스케줄 1차 조정: 실제 평가일 + 1달력일n'                call_date(i) = str2date(oRS(0)) + 1n'            End Ifn'        Elsen'            call_date(i) = str2date(oRS(0))n'        End Ifn'        shtACPricer.Range("schedule_start").Cells(i, 1) = call_date(i)n'        coupon_on_call(i) = oRS(2)n'        barr_strike(i) = oRS(3)n'        shtACPricer.Range("cpn_on_call").Cells(i, 1) = coupon_on_call(i)n'        shtACPricer.Range("strike_rate").Cells(i, 1) = barr_strike(i)n'n'        'performance_type_on_calln'        If oRS(4) = "Y" Thenn'            barr_perform_type(i) = 0n'        Elsen'            barr_perform_type(i) = -1n'        End Ifn'        shtACPricer.Range("performance_type_on_call").Cells(i, 1) = barr_perform_type(i)n'n'        ''strike smoothingn'        'shtACPricer.Range("strike_smoothing_width").Cells(i, 1) = oRS(5)n'n'        i = i + 1n'        oRS.MoveNextn'    Loopn'n'    oRS.Closen'n'    '----------------------------------------n'    'Strike smoothing factor: sps DB의 call date를 shift할 경우 비즈원 call date와 join되지 않는 문제가 있어 부득이 독립적으로 입수함n'    SQL = "SELECT call_date, strike_smoothing_width from sps.ac_schedule where ASSET_CODE = '" + productCode + "' ORDER BY 1 "n'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    i = 1n'    Do Until oRS.EOFn'n'        'strike smoothingn'        shtACPricer.Range("strike_smoothing_width").Cells(i, 1) = oRS(1)n'n'        i = i + 1n'        oRS.MoveNextn'    Loopn'n'    oRS.Closen'n'    no_of_ac_schedule = i - 1n'    deal_ticket.no_of_schedule = no_of_ac_schedulen'n'n'n'    If no_of_ac_schedule >= 1 Thenn'n'        Erase schedule_list 'ReDim schedule_list(1 To no_of_schedule) As clsAutocallSchedulen'n'        Dim a_schedule As clsAutocallSchedulen'n'n'        For inx = 1 To no_of_ac_schedulen'n'            Set a_schedule = New clsAutocallSchedulen'n'            a_schedule.call_date = shtACPricer.Range("schedule_start").Cells(inx, 1).valuen'n'            jnx = 1n'n'            Don'                a_schedule.set_percent_strike shtACPricer.Range("schedule_start").Cells(inx, 4 + jnx).value, jnxn'                a_schedule.set_coupon_on_call shtACPricer.Range("schedule_start").Cells(inx, 1 + jnx).value, jnxn'n'                jnx = jnx + 1n'n'            Loop While shtACPricer.Range("schedule_start").Cells(inx, 4 + jnx).value > 0n'n'            '<--- addedn'            a_schedule.performance_type = shtACPricer.Range("performance_type_on_call").Cells(inx, 1).valuen'            If deal_ticket.no_of_ul = 3 And inx < no_of_ac_schedule And deal_ticket.settlement_date < #6/18/2017# Thenn'                a_schedule.strike_shift = 0n'            Elsen'                'a_schedule.strike_shift = shtACPricer.Range("strike_shift").valuen'                a_schedule.strike_shift = shtACPricer.Range("strike_smoothing_width").Cells(inx, 1).valuen'            End Ifn'            '--->n'n'            push_back_clsAutocallSchedule schedule_list, a_schedulen'n'        Next inxn'n'        deal_ticket.set_schedule_array schedule_listn'n'        deal_ticket.strike_at_maturity = schedule_list(no_of_ac_schedule).percent_strike '* deal_ticket.reference_pricen'        deal_ticket.coupon_at_maturity = schedule_list(no_of_ac_schedule).coupon_on_calln'        deal_ticket.maturity_date = schedule_list(no_of_ac_schedule).call_daten'n'    Elsen'n'        raise_err "read_ac_deal_ticket", "no schedule found"n'n'    End Ifn'n'n'n'n'n'n'n'    If shtACPricer.Range("no_of_early_exit_schedule").Cells(1, 1).value = 0 Thenn'        deal_ticket.set_ul_dim shtACPricer.Range("No_of_Underlying").Cells(1, 1).valuen'    Elsen'        deal_ticket.set_ul_dim shtACPricer.Range("No_of_Underlying").Cells(1, 1).value, shtACPricer.Range("no_of_early_exit_schedule").Cells(1, 1).valuen'    End Ifn'n'n'n'n'n'n'n''----------------------------------------n'    'Monthly coupon schedulen'    Dim monthly_coupon_flag As Booleann'    monthly_coupon_flag = Falsen'n'    Dim coupon_date() As Daten'    Dim montly_coupon() As Doublen'    Dim coupon_barr() As Doublen'    ReDim coupon_date(0) As Daten'    ReDim montly_coupon(0) As Doublen'    ReDim coupon_barr(0) As Doublen'n'    Dim no_of_monthly_coupon_schedule As Integern'n'n'    '쿠폰구간관리n'    SQL = " SELECT NVL(BONS_CUPN_STA_SDRT/100, 0) CouponBarrier, " _n'        & "         NVL(BONS_CUPN_FIN_SDRT/100, 100) CouponUpperBarrier, " _n'        & "         NVL(BONS_CUPN_INRT/100, 0) CouponRate, SCTN_STA_CTNU, SCTN_FIN_CTNU " _n'        & " FROM    bsys.TBSIMO210L00@gdw " _n'        & " WHERE   INDV_ISCD = '" + productCode + "' ORDER BY SCTN_STA_CTNU ASC"n'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    i = 1n'    Do Until oRS.EOFn'n'        ReDim Preserve coupon_barr(UBound(coupon_barr) + 1) As Doublen'        ReDim Preserve montly_coupon(UBound(montly_coupon) + 1) As Doublen'n'        For i = oRS(3) To oRS(4)n'            'coupon barriern'            coupon_barr(i) = oRS(0)n'            'coupon on calln'            montly_coupon(i) = oRS(2)n'        Next in'n'        oRS.MoveNextn'n'    Loopn'n'    oRS.Closen'n'    '쿠폰지급일관리n'    SQL = " SELECT TRTH_CUPN_VLTN_DATE COUPON_DATE " _n'        & " FROM    BSYS.TBSIMO213L00@GDW   " _n'        & " WHERE   INDV_ISCD = '" + productCode + "' ORDER BY 1 ASC"n'n'    With oCmdn'        .ActiveConnection = oDBn'        .CommandType = adCmdTextn'        .CommandText = SQLn'n'        oRS.Open .Executen'    End Withn'n'    i = 1n'    'coupon daten'    Do Until oRS.EOFn'        monthly_coupon_flag = Truen'        ReDim coupon_date(UBound(coupon_date) + 1) As Daten'n'        If redeem_shift Thenn'            '2019.4.18n'            '오늘이 실제 조기상환평가일 후 첫 영업일이면 call date를 오늘로 설정: 상환여부 판단 때문n'            If today = WorksheetFunction.WorkDay(str2date(oRS(0)), 1, shtHolidays.Range("Holidays")) Thenn'                coupon_date(i) = todayn'            Elsen'                '기초자산 지역에 따라 상환스케줄 1차 조정: 실제 평가일 + 1달력일n'                coupon_date(i) = str2date(oRS(0)) + 1n'            End Ifn'        Elsen'            coupon_date(i) = str2date(oRS(0))n'        End Ifn'n'        i = i + 1n'        oRS.MoveNextn'n'    Loopn'n'    oRS.Closen'n'n'n'    no_of_monthly_coupon_schedule = i - 1n'n'n'n'    If monthly_coupon_flag Thenn'        deal_ticket.monthly_coupon_flag = 1n'    Elsen'        deal_ticket.monthly_coupon_flag = 0n'    End Ifn'n'    deal_ticket.set_coupon_schedule no_of_monthly_coupon_schedule, coupon_date, coupon_barr, montly_couponn'    deal_ticket.monthly_coupon_amount = montly_coupon(1)n'n'n'n'n'    '----------------------------------------------------------------------n'    ' Read EE Schedulen'    '----------------------------------------------------------------------n'n'n''    For inx = 1 To deal_ticket.no_of_uln''        deal_ticket.set_early_exit_barrier shtACPricer.Range("EE_Barrier").Cells(1, inx).value, inxn''        'deal_ticket.set_ki_barrier shtACPricer.Range("ki_barrier").Cells(1, 1).value, inxn''    Next inxn'n'    no_of_schedule = shtACPricer.Range("no_of_early_exit_schedule").Cells(1, 1).valuen'n'    If no_of_schedule >= 1 Thenn'n'        ReDim call_dates(1 To no_of_schedule) As Daten'        ReDim coupons(1 To no_of_schedule) As Doublen'        ReDim strike_shifts(1 To no_of_schedule) As Doublen'        'ReDim early_exit_touched_flags(1 To no_of_schedule) As Doublen'        ReDim early_exit_touched_flags(1 To no_of_schedule) As Long  'data type 변경: dll(2018.7.17)n'        ReDim early_exit_performace_types(1 To no_of_schedule) As Long  'dll(2018.8.8)n'        ReDim early_exit_barrier_types(1 To no_of_schedule) As Long  'dll(2018.8.8)n'n'        For inx = 1 To no_of_schedulen'n'            call_dates(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 1).valuen'            coupons(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 2).valuen'            strike_shifts(inx) = 0n'n'            For jnx = 1 To deal_ticket.no_of_uln'                deal_ticket.set_early_exit_barrier shtACPricer.Range("early_exit_schedule_start").Cells(inx, 5).value, deal_ticket.no_of_ul * (inx - 1) + jnxn'            Next jnxn'n'            If shtACPricer.Range("early_exit_schedule_start").Cells(inx, 6).value = "Y" Thenn'                early_exit_touched_flags(inx) = 1#n'            ElseIf shtACPricer.Range("early_exit_schedule_start").Cells(inx, 6).value = "N" Thenn'                early_exit_touched_flags(inx) = 0#n'            End Ifn'n'            early_exit_performace_types(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 7).value  'dll(2018.8.8)n'            early_exit_barrier_types(inx) = shtACPricer.Range("early_exit_schedule_start").Cells(inx, 8).value  'dll(2018.8.8)n'n'        Next inxn'n'    End Ifn'n'    'deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, couponsn'    'deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, coupons, strike_shifts, early_exit_touched_flagsn'    deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, coupons, strike_shifts, early_exit_touched_flags, early_exit_performace_types, early_exit_barrier_typesn'    '----------------------------------------------------------------------n'n'n'n'    no_of_schedule = shtACPricer.Range("no_of_floating_leg").valuen'n'    If no_of_schedule >= 1 Thenn'n'        ReDim call_dates(1 To no_of_schedule) As Daten'        ReDim coupons(1 To no_of_schedule) As Doublen'n'        For inx = 1 To no_of_schedulen'n'            call_dates(inx) = shtACPricer.Range("floating_leg_start").Cells(inx, 1).valuen'            coupons(inx) = shtACPricer.Range("floating_leg_start").Cells(inx, 2).valuen'n'        Next inxn'n'n'    End Ifn'n'    deal_ticket.set_floating_schedule no_of_schedule, call_dates, couponsn'n'n'n'n'    Set read_ac_deal_ticket = deal_ticketn'n'    Set deal_ticket = Nothingn'    For inx = 1 To no_of_schedulen'        Set schedule_list(inx) = Nothingn'    Next inxn'n'    Exit Functionn'n'ErrorHandler:n'n'    raise_err "read_ac_deal_ticket", Err.descriptionn'n'n'End Functionnn'--------------------------------------------------------------------n' Function: read_deal_ticketn' Desc: Read deal sheet to make deal ticket objectn'--------------------------------------------------------------------nPublic Function read_deal_ticket(Optional time_step As Integer = -1, Optional trials As Long = -1, Optional required_tolerance = -1 _n                               , Optional homogeneous As Boolean = False, Optional local_floor As Double, Optional local_cap As Double)nn    Dim schedule_dates() As Daten    Dim floors() As Doublen    Dim caps() As Doublen    Dim fixing_values() As Doublen    n    Dim deal_ticket As clsCliquetDealTicketn    n    Dim no_of_schedule As Integern    Dim inx As Integern    n    n    On Error GoTo ErrorHandlernn    Set deal_ticket = New clsCliquetDealTicketn    n    no_of_schedule = shtCliquetPricer.Range("no_of_schedule").Cells(1, 1).valuen    n    ReDim schedule_dates(0 To no_of_schedule - 1) As Daten    ReDim floors(0 To no_of_schedule - 1) As Doublen    ReDim caps(0 To no_of_schedule - 1) As Doublen    ReDim fixing_values(0 To no_of_schedule - 1) As Doublen    n    n    For inx = 0 To no_of_schedule - 1n    n        schedule_dates(inx) = shtCliquetPricer.Range("schedule_dates").Cells(inx + 1, 1).valuen        n        If homogeneous Thenn            floors(inx) = local_floorn            caps(inx) = local_capn            fixing_values(inx) = -1n        Elsen            floors(inx) = shtCliquetPricer.Range("floors").Cells(inx + 1, 1).valuen            caps(inx) = shtCliquetPricer.Range("caps").Cells(inx + 1, 1).valuen            fixing_values(inx) = shtCliquetPricer.Range("fixing_values").Cells(inx + 1, 1).valuen        End Ifn    n    Next inxn    n    deal_ticket.current_date = shtCliquetPricer.Range("current_date").Cells(1, 1).valuen    deal_ticket.value_date = shtCliquetPricer.Range("value_date").Cells(1, 1).valuen'    deal_ticket.maturity = shtCliquetPricer.Range("maturity").Cells(1, 1).valuen    n    deal_ticket.set_fixing_schedule no_of_schedule, schedule_dates, floors, caps, fixing_valuesn    n    deal_ticket.asset_code = shtCliquetPricer.Range("asset_code").Cells(1, 1).valuen    deal_ticket.fund_code_c = shtCliquetPricer.Range("fund_code_c").Cells(1, 1).valuen    deal_ticket.fund_code_m = shtCliquetPricer.Range("fund_code_m").Cells(1, 1).valuen    deal_ticket.ul_code = shtCliquetPricer.Range("ul_code").Cells(1, 1).valuen    n    deal_ticket.maturity_date = shtCliquetPricer.Range("maturity_date").Cells(1, 1).valuen    deal_ticket.settlement_date = shtCliquetPricer.Range("settlement_date").Cells(1, 1).valuen    deal_ticket.global_cap = shtCliquetPricer.Range("global_cap").Cells(1, 1).valuen    deal_ticket.global_floor = shtCliquetPricer.Range("global_floor").Cells(1, 1).valuen    n    deal_ticket.alive_yn = shtCliquetPricer.Range("alive_yn").Cells(1, 1).valuen    deal_ticket.confirmed_yn = shtCliquetPricer.Range("confirmed_yn").Cells(1, 1).valuen    deal_ticket.cliquet_type = shtCliquetPricer.Range("cliquet_type").Cells(1, 1).valuen    deal_ticket.r_cliquet_cap = shtCliquetPricer.Range("r_cliquet_cap").Cells(1, 1).valuen    deal_ticket.replace_period_no = shtCliquetPricer.Range("replace_period_no").Cells(1, 1).valuen    deal_ticket.spread = shtCliquetPricer.Range("spread").Cells(1, 1).valuen    deal_ticket.issue_cost = shtCliquetPricer.Range("issue_cost").Cells(1, 1).valuen    n    If UCase(shtCliquetPricer.Range("buy_sell")) = "BUY" Thenn        deal_ticket.notional = shtCliquetPricer.Range("notional").Cells(1, 1).valuen    Elsen        deal_ticket.notional = shtCliquetPricer.Range("notional").Cells(1, 1).value * -1n    End Ifn    n    'deal_ticket.comment = shtCliquetPricer.Range("comment").Cells(1, 1).valuen    deal_ticket.comment = shtCliquetPricer.Range("txtComment").valuen    n    deal_ticket.bump_vega = shtCliquetPricer.Range("bump_greek").Cells(1, 1).valuen    deal_ticket.bump_skew = shtCliquetPricer.Range("bump_greek").Cells(1, 2).valuen    deal_ticket.bump_theta = shtCliquetPricer.Range("bump_greek").Cells(1, 3).valuen    n    n    If time_step = -1 Thenn        deal_ticket.time_step = shtCliquetPricer.Range("time_step").Cells(1, 1).valuen    Elsen        deal_ticket.time_step = time_stepn    End Ifn    n    If trials = -1 Thenn        deal_ticket.no_of_trials = shtCliquetPricer.Range("trial").Cells(1, 1).valuen    Elsen        deal_ticket.no_of_trials = trialsn    End Ifn    n    If required_tolerance = -1 Thenn        deal_ticket.required_tolerance = shtCliquetPricer.Range("required_tolerance").Cells(1, 1).valuen    Elsen        deal_ticket.required_tolerance = required_tolerancen        n    End Ifn    n    deal_ticket.day_fraction_ = shtCliquetPricer.Range("day_fraction").valuen    n    Set read_deal_ticket = deal_ticketn    n    Exit Functionn    nErrorHandler:nn    raise_err "read_deal_ticket"n    nEnd Functionnnnn'--------------------------------------------------------------------n' Function: read_vanilla_ticketn' Desc: Read deal sheet to make deal ticket objectn'--------------------------------------------------------------------nPublic Function read_vanilla_ticket(Optional time_step As Integer = -1, Optional trials As Long = -1, Optional homogeneous As Boolean = False, Optional local_floor As Double, Optional local_cap As Double)nn    Dim schedule_dates() As Daten    Dim floors() As Doublen    Dim caps() As Doublen    Dim fixing_values() As Doublen    n    Dim deal_ticket As clsCliquetDealTicketn    n    Dim no_of_schedule As Integern    Dim inx As Integern    n    n    Dim vanilla_sheet As Worksheetn    n    Set vanilla_sheet = Sheets("vanilla")n    nn    Set deal_ticket = New clsCliquetDealTicketn    n    no_of_schedule = vanilla_sheet.Range("no_of_schedule").Cells(1, 1).valuen    n    ReDim schedule_dates(0 To no_of_schedule - 1) As Daten    ReDim floors(0 To no_of_schedule - 1) As Doublen    ReDim caps(0 To no_of_schedule - 1) As Doublen    ReDim fixing_values(0 To no_of_schedule - 1) As Doublen    n    n    For inx = 0 To no_of_schedule - 1n    n        schedule_dates(inx) = vanilla_sheet.Range("schedule_dates").Cells(inx + 1, 1).valuen        n        If homogeneous Thenn            floors(inx) = local_floorn            caps(inx) = local_capn            fixing_values(inx) = -1n        Elsen            floors(inx) = vanilla_sheet.Range("floors").Cells(inx + 1, 1).valuen            caps(inx) = vanilla_sheet.Range("caps").Cells(inx + 1, 1).valuen            fixing_values(inx) = vanilla_sheet.Range("fixing_values").Cells(inx + 1, 1).valuen        End Ifn    n    Next inxn    n    deal_ticket.set_fixing_schedule no_of_schedule, schedule_dates, floors, caps, fixing_valuesn    n    deal_ticket.asset_code = vanilla_sheet.Range("asset_code").Cells(1, 1).valuen    deal_ticket.ul_code = vanilla_sheet.Range("ul_code").Cells(1, 1).valuen    deal_ticket.current_date = vanilla_sheet.Range("current_date").Cells(1, 1).valuen    deal_ticket.value_date = vanilla_sheet.Range("value_date").Cells(1, 1).valuen    deal_ticket.Maturity = vanilla_sheet.Range("maturity").Cells(1, 1).valuen    deal_ticket.maturity_date = vanilla_sheet.Range("maturity_date").Cells(1, 1).valuen    deal_ticket.settlement_date = vanilla_sheet.Range("settlement_date").Cells(1, 1).valuen    deal_ticket.global_cap = vanilla_sheet.Range("global_cap").Cells(1, 1).valuen    deal_ticket.global_floor = vanilla_sheet.Range("global_floor").Cells(1, 1).valuen    n    If UCase(Application.Range("buy_sell")) = "BUY" Thenn        deal_ticket.notional = vanilla_sheet.Range("notional").Cells(1, 1).valuen    Elsen        deal_ticket.notional = vanilla_sheet.Range("notional").Cells(1, 1).value * -1n    End Ifn    n    deal_ticket.comment = vanilla_sheet.Range("comment").Cells(1, 1).valuen'    deal_ticket.bump_greek = vanilla_sheet.Range("bump_greek").Cells(1, 1).valuen    n    n    If time_step = -1 Thenn        deal_ticket.time_step = vanilla_sheet.Range("time_step").Cells(1, 1).valuen    Elsen        deal_ticket.time_step = time_stepn    End Ifn    n    If trials = -1 Thenn        deal_ticket.no_of_trials = vanilla_sheet.Range("trial").Cells(1, 1).valuen    Elsen        deal_ticket.no_of_trials = trialsn    End Ifn        n    n    Set read_vanilla_ticket = deal_ticketn    n    nEnd FunctionnnnnPublic Sub read_config(config As clsConfig)nnOn Error GoTo ErrorHandlern                                      n    Set config = New clsConfign    n    config.ip_address_ = get_ip_addressn    n    n    n    config.current_date_ = shtConfig.Range("date_config").Cells(1, 1).valuen    n    config.time_step_closing_ = shtConfig.Range("mc_config").Cells(1, 1).valuen    config.no_of_trials_closing_ = 2 ^ shtConfig.Range("mc_config").Cells(3, 1).value - 1n    n    config.time_step_ = shtConfig.Range("mc_config").Cells(4, 1).valuen    config.required_tolerance_ = shtConfig.Range("mc_config").Cells(2, 1).valuen    config.no_of_trials_ = 2 ^ shtConfig.Range("mc_config").Cells(5, 1).value - 1n    n    config.grid_interval_ = shtConfig.Range("closing_config").Cells(1, 1).valuen    config.min_s_ = shtConfig.Range("closing_config").Cells(2, 1).valuen    config.max_s_ = shtConfig.Range("closing_config").Cells(3, 1).valuen    config.file_path_ = shtConfig.Range("closing_config").Cells(4, 1).valuen    n    config.sparse_grid_level = shtConfig.Range("closing_config").Cells(5, 1).valuen    config.sparse_grid_min = shtConfig.Range("closing_config").Cells(6, 1).valuen    config.sparse_grid_max = shtConfig.Range("closing_config").Cells(7, 1).valuen    n    config.max_retrial_count_ = shtConfig.Range("closing_config").Cells(8, 1).valuen    config.snapshot_file_extension = shtConfig.Range("closing_config").Cells(9, 1).valuen    config.position_file_extension = shtConfig.Range("closing_config").Cells(10, 1).valuen    config.position_summary_file_extension = shtConfig.Range("closing_config").Cells(11, 1).valuen    config.realtime_file_name = shtConfig.Range("closing_config").Cells(12, 1).valuen    config.batch_size = shtConfig.Range("closing_config").Cells(14, 1).valuen    n    n    config.market_refresh_interval_ = shtConfig.Range("calculation_config").Cells(1, 1).valuen    n    config.x_grid_ = shtConfig.Range("fdm_config").Cells(1, 1).valuen    config.v_grid_ = shtConfig.Range("fdm_config").Cells(2, 1).valuen    config.time_step_per_day = shtConfig.Range("fdm_config").Cells(3, 1).valuen    config.fdm_scheme_ = shtConfig.Range("fdm_config").Cells(4, 2).valuen    n    config.empirical_vega_weighting = shtConfig.Range("misc_config").Cells(2, 1).valuen    config.vega_reference_maturity = shtConfig.Range("misc_config").Cells(1, 1).valuen    n    config.no_of_strike_grid = shtConfig.Range("misc_config").Cells(3, 1).valuen    config.width_of_strike = shtConfig.Range("misc_config").Cells(4, 1).valuen    n    n    If UCase(shtConfig.Range("calculation_config").Cells(2, 1).value) = "ON" Thenn        config.auto_calculation_ = Truen    Elsen        config.auto_calculation_ = Falsen    End Ifn    n    config.intra_day_greek_ = shtConfig.Range("calculation_config").Cells(3, 1).valuen    config.neglect_barrier_smoothing_ = shtConfig.Range("calculation_config").Cells(4, 1).valuen    n    config.adjust_strike_shift_percent = shtConfig.Range("closing_config").Cells(13, 1).valuen    n    config.set_term_vega_tenor read_term_vega_tenorn    n    Exit Subn    nErrorHandler:nn    raise_err "config"nnEnd SubnnPublic Function read_implied_spot(ByRef spot As Double, ByRef prev_s As Double, ByRef first_futures_date As Date)nn        n    spot = shtMarket.Range("S").Cells(4, 1).valuen    prev_s = shtMarket.Range("prev_s").Cells(4, 1).valuen    first_futures_date = shtMarket.Range("S").Cells(4, 0).valuen    nEnd FunctionnnnPublic Function read_market(ByRef spot As Double, ByRef rate_curve As clsRateCurve, ByRef div_schedule As clsDividendSchedule, ByRef heston_param As clsHestonParameter, ByRef prev_s As Double)nn    n    Dim dates() As Daten    Dim values() As Doublen    Dim inx As Integern        n    spot = shtMarket.Range("S").Cells(1, 1).valuen'    prev_s = shtMarket.Range("prev_s").Cells(1, 1).valuen    n    Set rate_curve = New clsRateCurven    n    rate_curve.initialize shtMarket.Range("rate_dates"), shtMarket.Range("discount")n    n    read_div dates, valuesn    Set div_schedule = New clsDividendSchedulen    n    div_schedule.initialize_div UBound(dates), dates, valuesn    nnEnd FunctionnnPublic Sub read_sabr_parameters(ByRef maturities() As Date, ByRef rho() As Double, ByRef nu() As Double, ByRef rho_coeff() As Double, ByRef nu_coeff() As Double)nn    Dim no_of_maturities As Integern    Dim no_of_rho_coeff As Integern    Dim no_of_nu_coeff As Integern    Dim inx As Integern    n    n    no_of_maturities = shtMarket.Range("no_sabr_maturities").Cells(1, 1).valuen    no_of_rho_coeff = shtMarket.Range("no_of_rho_coeff").Cells(1, 1).valuen    no_of_nu_coeff = shtMarket.Range("no_of_nu_coeff").Cells(1, 1).valuen    n    ReDim maturities(1 To no_of_maturities) As Daten    ReDim rho(1 To no_of_maturities) As Doublen    ReDim nu(1 To no_of_maturities) As Doublen    ReDim rho_coeff(1 To no_of_rho_coeff) As Doublen    ReDim nu_coeff(1 To no_of_nu_coeff) As Doublen    n    For inx = 1 To no_of_maturitiesn        maturities(inx) = shtMarket.Range("sabr_parameters").Cells(inx, 1).valuen        rho(inx) = shtMarket.Range("sabr_parameters").Cells(inx, 3).valuen        nu(inx) = shtMarket.Range("sabr_parameters").Cells(inx, 4).valuen    Next inxn    n    For inx = 1 To no_of_rho_coeffn        rho_coeff(inx) = shtMarket.Range("sabr_coefficient").Cells(inx, 1).valuen    Next inxn    n    For inx = 1 To no_of_nu_coeffn        nu_coeff(inx) = shtMarket.Range("sabr_coefficient").Cells(inx, 2).valuen    Next inxn        nnEnd SubnnPublic Sub read_div(ByRef dates() As Date, ByRef values() As Double)nn    Dim inx As Integern    Dim count As Integern    n    count = shtMarket.Range("dividend_dates").countn    n    ReDim dates(1 To count) As Daten    ReDim values(1 To count) As Doublen    n    For inx = 1 To countn    n        If shtMarket.Range("dividend_dates").Cells(inx, 1).value <> "" Thenn    n            dates(inx) = shtMarket.Range("dividend_dates").Cells(inx, 1).valuen            values(inx) = shtMarket.Range("dividend_values").Cells(inx, 1).valuen        n        Elsen            n            Exit Forn        n        End Ifn    n    Next inxn    n    n    ReDim Preserve dates(1 To inx - 1) As Daten    ReDim Preserve values(1 To inx - 1) As Doublen    nnEnd SubnnPublic Function get_barrier_code_name(range_name As String, code_value As Integer) As Stringnnn    Dim inx As Integern    Dim rtn_value As Stringn    nOn Error GoTo ErrorHandlernn    For inx = 1 To shtBarrierPricer.Range(range_name).Rows.countn    n        If shtBarrierPricer.Range(range_name).Cells(inx, 2).value = code_value Thenn            rtn_value = shtBarrierPricer.Range(range_name).Cells(inx, 1)n            Exit Forn        End Ifn    n    Next inxnn    get_barrier_code_name = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    raise_err "get_barrier_code_name"nnnnEnd FunctionnnPublic Function get_ac_code_name(range_name As String, code_value As Integer) As Stringnnn    Dim inx As Integern    Dim rtn_value As Stringn    nOn Error GoTo ErrorHandlernn    For inx = 1 To shtACPricer.Range(range_name).Rows.countn    n        If shtACPricer.Range(range_name).Cells(inx, 2).value = code_value Thenn            rtn_value = shtACPricer.Range(range_name).Cells(inx, 1)n            Exit Forn        End Ifn    n    Next inxnn    get_ac_code_name = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    raise_err "get_ac_code_name"nnnnEnd Functionnn