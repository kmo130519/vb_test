Option Explicitnnnn'#######################################################n' Class: clsBarrierDealTicketn'#######################################################nnPublic asset_code As StringnPublic fund_code_m As StringnPublic fund_code_c As StringnPublic ul_code As StringnnnPublic current_date As DatenPublic current_date_origin_ As DatennPublic value_date As DatenPublic Maturity As IntegernPublic maturity_date As DatenPublic settlement_date As DatennPublic confirmed_yn As StringnPublic alive_yn As StringnnPublic issue_cost As DoublenPublic reference As DoublennPublic call_put As LongnPublic strike As DoublenPublic barrier_type As LongnPublic barrier As DoublenPublic rebate As DoublenPublic barrier_shift As DoublenPublic barrier_monitoring As IntegernnPublic x_grid As LongnPublic v_grid As LongnPublic t_grid As LongnnPublic scheme_type As LongnnPublic comment As StringnnPublic quantity As DoublennPublic funding_spread As DoublennPublic rebate_only As Long  '1: one touch option, 0:Barrier optionnnPublic participation_rate As DoublennPublic instrument_type As LongnnPrivate func As New FunctionsnnPrivate autocall_schedules_() As clsAutocallSchedulenPrivate floating_schedules_() As clsAutocallSchedule '<--- floating coupon schedule. Should include first fixing date which is equal to value datennPublic no_of_schedule As Integern nPublic Function floating_schedules(inx As Integer) As clsAutocallSchedulenn    Set floating_schedules = floating_schedules_(inx)nnEnd Functionn Public Function autocall_schedules(inx As Integer) As clsAutocallSchedulenn    Set autocall_schedules = autocall_schedules_(inx)nnEnd FunctionnnnPublic Sub set_floating_schedule(no_of_schedule_in As Integer, coupon_date() As Date, fixing_value() As Double)nn    Dim a_schedule As clsAutocallSchedulen    Dim inx As Integern    nOn Error GoTo ErrorHandlern    n    If no_of_schedule_in >= 1 Thennn        ReDim floating_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        no_of_schedule = no_of_schedule_inn'    Elsen'n'        raise_err "clsACDealTicket.setSchedule", "No schedule found"nn    n'n    n        For inx = 1 To no_of_schedulen            n            Set floating_schedules_(inx) = New clsAutocallSchedulen            n            floating_schedules_(inx).call_date = coupon_date(inx)n            floating_schedules_(inx).set_coupon_on_call fixing_value(inx)n        n        Next inxn    n    End Ifn    n    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.set_floating_schedule"nnnEnd SubnnPublic Sub set_schedule(no_of_schedule_in As Integer, calldate() As Date, strike_values() As Double, coupon_on_call() As Double)nn    Dim a_schedule As clsAutocallSchedulen    Dim inx As Integern    nOn Error GoTo ErrorHandlern    n    If no_of_schedule_in >= 1 Thennn        ReDim autocall_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        no_of_schedule = no_of_schedule_inn'    Elsen'n'        raise_err "clsACDealTicket.setSchedule", "No schedule found"nn    n'n    n        For inx = 1 To no_of_schedulen            n            Set autocall_schedules_(inx) = New clsAutocallSchedulen            n            autocall_schedules_(inx).call_date = calldate(inx)n            autocall_schedules_(inx).set_coupon_on_call coupon_on_call(inx)n            autocall_schedules_(inx).set_strike_value strike_values(inx)n        n        Next inxn    n    End Ifn    n    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.setSchedule"nnnEnd SubnnnnPublic Function floating_coupon_dates() As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(floating_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn        n        ReDim rtn_array(1 To no_of_schedule_in) As Longn        n        For inx = 1 To no_of_schedule_inn        n            rtn_array(inx) = CLng(floating_schedules_(inx).call_date)n        n        Next inxn        n    Elsen        n        ReDim rtn_array(1 To 1) As Longn        n        rtn_array(1) = CLng(#12/31/2100#) ' Dummyn    n    End Ifn    n    floating_coupon_dates = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.call_dates"nnEnd FunctionnPublic Function call_dates() As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn        n        ReDim rtn_array(1 To no_of_schedule_in) As Longn        n        For inx = 1 To no_of_schedule_inn        n            rtn_array(inx) = CLng(autocall_schedules_(inx).call_date)n        n        Next inxn        n    Elsen        n        ReDim rtn_array(1 To 1) As Longn        n        rtn_array(1) = CLng(#12/31/2100#) ' Dummyn    n    End Ifn    n    call_dates = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.call_dates"nnEnd FunctionnnPublic Function strike_values() As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn            n        n        ReDim rtn_array(1 To no_of_schedule_in) As Doublen        n        For inx = 1 To no_of_schedule_inn        n            rtn_array(inx) = autocall_schedules_(inx).strike_valuen        n        Next inxn    n    Elsen        ReDim rtn_array(1 To 1) As Doublen        n        rtn_array(1) = 0n        n    End Ifn        n    strike_values = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.strike_values"nnnEnd FunctionnnPublic Function floating_fixing_values() As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(floating_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn                n        ReDim rtn_array(1 To no_of_schedule_in) As Doublen        n        For inx = 1 To no_of_schedule_inn        n            rtn_array(inx) = floating_schedules_(inx).coupon_on_calln        n        Next inxn        n    Elsen        ReDim rtn_array(1 To 1) As Doublen        n        rtn_array(1) = 0n        n    End Ifn    n    floating_fixing_values = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.coupon_on_calls"nnnEnd Functionn'Public current_date_orignnPublic Function coupon_on_calls() As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn                n        ReDim rtn_array(1 To no_of_schedule_in) As Doublen        n        For inx = 1 To no_of_schedule_inn        n            rtn_array(inx) = autocall_schedules_(inx).coupon_on_calln        n        Next inxn        n    Elsen        ReDim rtn_array(1 To 1) As Doublen        n        rtn_array(1) = 0n        n    End Ifn    n    coupon_on_calls = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.coupon_on_calls"nnnEnd Functionn'Public current_date_origin_ As DatennPublic Function copy_obj() As clsCliquetDealTicketnn    Dim obj As clsBarrierDealTicketn    n    Set obj = New clsCliquetDealTicketn    n    obj.fund_code_m = fund_code_mn    obj.fund_code_c = fund_code_cn    obj.asset_code = asset_coden    obj.ul_code = ul_coden    nn    obj.current_date = current_daten    obj.current_date_origin_ = current_date_origin_n    n    obj.value_date = value_daten    obj.Maturity = Maturityn    obj.maturity_date = maturity_daten    obj.settlement_date = settlement_daten    nn    obj.confirmed_yn = confirmed_ynn    obj.alive_yn = alive_ynn    n    obj.issue_cost = issue_costn    obj.reference = referencen    n    obj.call_put = call_putn    obj.strike = striken    obj.barrier_type = barrier_typen    obj.barrier = barriern    obj.rebate = rebaten    obj.barrier_monitoring = barrier_monitoringn    n    obj.x_grid = x_gridn    obj.v_grid = v_gridn    obj.t_grid = t_gridn    n    obj.comment = commentn    n    obj.quantity = quantityn    n   ' obj.set_floating_schedule UBound(floating_schedules_)n   n   obj.copy_schedule UBound(autocall_schedules_), autocall_schedules_n   obj.copy_floating_schedule UBound(floating_schedules_), floating_schedules_n        n    Set copy_obj = objnnEnd FunctionnnnPublic Sub copy_schedule(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)nn    Dim inx As Integern    n    ReDim autocall_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen    no_of_schedule = no_of_schedule_inn    n    For inx = 1 To no_of_schedulen            n        Set autocall_schedules_(inx) = New clsAutocallSchedulen        n        autocall_schedules_(inx).call_date = schs(inx).call_daten        autocall_schedules_(inx).set_coupon_on_call schs(inx).coupon_on_calln        autocall_schedules_(inx).set_percent_strike schs(inx).percent_striken        autocall_schedules_(inx).set_strike_value autocall_schedules_(inx).strike_value  ' * reference_pricen    n    Next inxn    n    nnEnd SubnnnPublic Sub copy_floating_schedule(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)nn    Dim inx As Integern    n    ReDim floating_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen    no_of_schedule = no_of_schedule_inn    n    For inx = 1 To no_of_schedulen            n        Set floating_schedules_(inx) = New clsAutocallSchedulen        n        floating_schedules_(inx).call_date = schs(inx).call_daten        floating_schedules_(inx).set_coupon_on_call schs(inx).coupon_on_calln        floating_schedules_(inx).set_percent_strike schs(inx).percent_striken        floating_schedules_(inx).set_strike_value floating_schedules_(inx).strike_value  ' * reference_pricen    n    Next inxn    n    nnEnd Sub