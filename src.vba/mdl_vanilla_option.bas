Public Declare PtrSafe Function local_vol_vanilla_pricer Lib "C:\cpp_dll\indexPricer_v1.90.dll" _n(ByRef value As Double, ByRef delta As Double, ByRef gamma As Double, ByRef theta As Double _n, ByVal s As Double, ByVal r As Double, ByVal q As Double, ByVal t As Double, ByVal k As Double _n, ByVal call_put As Long, ByVal evaluationDate As Long, ByVal optionType As Long _n, volDates_in() As Long, volStrikes_in() As Double, volMatrix_in() As Double _n, divDates_in() As Long, divs_() As Double _n, ByVal ratio_dividend As Double, ByVal refprice_for_dividend As Double) As Longnnnn'Name           In/Out  VBA Type    Descn'-----------------------------------------------------n'value           Out     double     평가값. Local Currency. KRW 아님.n'delta           Out     double     delta. dValue / dS.n'gamma           Out     double     gamma. dDelta / dS.n'theta           Out     double     theta. dValue / dt. t 단위는 년.n's               In      double     지수.n'r               In      double     금리.n'q               In      double     배당율.n't               In      double     time to maturity. 년도 단위.n'k               In      double     행사가.n'call_put        In      Long       call / put 구분. 0: Call, 1: Putn'evaluation_date In      Long       평가일.n'option_type     In      Long       European / American 구분. 0: European, 1: American.n'vol_dates       In      Long()     로컬볼 서피스 테너 리스트. 1 부터 시작. e.g. vol_dates(1) = 42601, vol_dates(2) = 42603, .... vol_dates(15) = 43084.n'vol_strikes     In      double()   로컬볼 서피스 행사가 리스트. vol_strikes(1) = 1264.2, vol_strike(2) = 1292.13,..... vol_strike(51) = 3712.95n'vol_matrix      In      double()   로컬볼 데이터. 테너 X 행사가의 2 차원 배열. e.g. vol_matrix(1,1 ) = 0.999,.... vol_matrix(1,51)= 0.9999,... vol_matrix(15,1) = ..., vol_matrixk( 15, 51 ) =....n'div_dates       In      Long()     배당락일 리스트.n'divs            In      double()   배당금액.nnnPublic Sub run_futopt_pricing(eval_date As Date _n                            , ByRef the_greeks As clsGreeks _n                            , deal_ticket As clsVanillaOptionDealTicket _n                            , market As clsMarket _n                            , Optional calc_greeks As Boolean = False _n                            , Optional is_ul_vol_index As Boolean = False)nn'<------Adjustment for options on futures: 기초자산 가격을 선물이론가로 넣고 보정하는 것 = 기초자산 가격을 SPX로 넣고 보정을 안하는 것 일거 같은 생각이 드는데 검토 부탁드립니다.n'        If ul_code = "SPX" Thenn'n'            pv_divs = 0n'            For m = 0 To UBound(divs)n'                If (CDate(div_dates(m)) - market_date) / 365 < t Thenn'                    pv_divs = pv_divs + divs(m) * market.rate_curve_.get_discount_factor(CDate(div_dates(m)), market_date)n'                Elsen'                    Exit Forn'                End Ifn'            Next mn'n'            '선도이론가n'            s = (market.s_ - pv_divs) * Exp((r - q) * t)n'n'            '기존 SPX기준 스트라이크 포인트에 대응되는 선도가격을 만기별로 계산 후, 선도가격이 기존 SPX기준 스트라이크 포인트일 때 로컬볼 계산(만기별 로컬볼 보간)n'            Dim tj As Doublen'            Dim rj As Doublen'            Dim fj() As Doublen'            ReDim fj(UBound(vol_strikes))n'n'            For j = 1 To UBound(vol_dates)n'n'                tj = (maturity_date - CDate(vol_dates(j))) / 365n'                rj = market.rate_curve_.get_fwd_rate(maturity_date, CDate(vol_dates(j)))n'n'                pv_divs = 0n'                For m = 0 To UBound(divs)n'                    If div_dates(m) >= vol_dates(j) And (div_dates(m) - vol_dates(j)) / 365 < tj Thenn'                        pv_divs = pv_divs + divs(m) * market.rate_curve_.get_discount_factor(CDate(div_dates(m)), CDate(vol_dates(j)))n'                    End Ifn'                Next mn'n'                For m = 1 To UBound(vol_strikes)n'                    fj(m) = (vol_strikes(m) - pv_divs) * Exp((rj - q) * tj)n'                Next mn'n'                Dim vj() As Doublen'                ReDim vj(UBound(vol_strikes))n'                Dim vj_new() As Doublen'                ReDim vj_new(UBound(vol_strikes))n'n'                For m = 1 To UBound(vol_strikes)n'                    vj(m) = vol_matrix(j, m)n'                Next mn'n'                For m = 1 To UBound(vol_strikes)n'                    vj_new(m) = quadratic_interpolation(vol_strikes(m), fj, vj)n'                Next mn'n'                For m = 1 To UBound(vol_strikes)n'                    vol_matrix(j, m) = vj_new(m)n'                Next mn'n'            Next jn'n'n'        End Ifn'------>nn    If is_ul_vol_index = True Thenn        market.s_ = get_spot_price(deal_ticket.ul_code, date2str(eval_date))n        market.div_yield_ = 0n        Set market.div_schedule_ = Nothingn        Set market.drift_adjust_ = Nothingn    End Ifn            n    Dim i As Integern    n    Dim k As Doublen    Dim s As Doublen    Dim t As Doublen    Dim r As Doublen    Dim q As Doublenn    Dim div_dates() As Longn    Dim divs() As Doublen            n    Dim price As Doublen    Dim delta As Doublen    Dim gamma As Doublen    Dim theta As Doublenn    Dim stickymoneyness_delta_greek_up As clsGreeksn    Dim stickymoneyness_delta_greek_down As clsGreeksn    Dim vol_bump_greek As clsGreeksnn    Dim shifted_strikes() As Doublen    Dim pv_divs As Doublen            n    k = deal_ticket.kn    t = (deal_ticket.maturity_date - eval_date) / 365n    r = market.rate_curve_.get_fwd_rate(eval_date, deal_ticket.maturity_date)n    s = market.s_n    n    If market.drift_adjust_ Is Nothing Thenn        q = 0n    Elsen        q = market.div_yield_ - market.get_drift_adjust(deal_ticket.maturity_date) 'drift adjustment 추가: 2023.11.21n    End Ifn    n    If market.div_schedule_ Is Nothing Thenn        pv_divs = 0n    Elsen        div_dates = market.div_schedule_.get_div_datesn        divs = market.div_schedule_.get_divsn    n        For i = 0 To UBound(divs)n            If (div_dates(i) - CLng(eval_date)) / 365 < t Thenn                pv_divs = pv_divs + divs(i) * market.rate_curve_.get_discount_factor(CDate(div_dates(i)), eval_date)n            End Ifn        Next in    End Ifn    n'        vol_dates = market.sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(1, 0, eval_date)n'        vol_strikes = market.sabr_surface_.local_vol_surface.grid_.get_all_strikes(1)n'        vol_matrix = market.sabr_surface_.local_vol_surface.vol_surfacenn    Select Case deal_ticket.prod_typen    Case "F"n       n        price = (s - pv_divs) * Exp((r - q) * t)n        n    Case "C", "P"nn        Call local_vol_vanilla_pricer(price, delta, gamma, theta, _n                                        s, _n                                        r, _n                                        q, _n                                        t, _n                                        k, _n                                        deal_ticket.call_put, CLng(eval_date), deal_ticket.option_type, _n                                        market.sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(1, 0, eval_date), _n                                        market.sabr_surface_.local_vol_surface.grid_.get_all_strikes(1), _n                                        market.sabr_surface_.local_vol_surface.vol_surface, _n                                        div_dates, divs, _n                                        0, market.refPriceForDividend)n    End Selectn    n    'from unit metrics to dollar valuesn    the_greeks.ul_price = sn    the_greeks.value = price * deal_ticket.conversion_ratio * deal_ticket.qtyn            n    If calc_greeks = True Thenn    n        Select Case deal_ticket.prod_typen        Case "F"n            n            If is_ul_vol_index = True Thenn                delta = 0n                the_greeks.vega = Exp((r - q) * t) * deal_ticket.conversion_ratio * deal_ticket.qtyn            Elsen                delta = Exp((r - q) * t)n                the_greeks.vega = 0n            End Ifn            n            gamma = 0n            theta = -1 * (s - pv_divs) * Exp((r - q) * t) * (r - q)nn            the_greeks.sticky_moneyness_delta = delta * s * deal_ticket.conversion_ratio * deal_ticket.qtyn            the_greeks.sticky_moneyness_gamma = 0n                n        Case "C", "P"n        n            Dim backup_market As clsMarketn            Set backup_market = market.copy_objn            n            'Set market = backup_market.copy_objn            n            'sticky monenyness delta (1% up)n            Set stickymoneyness_delta_greek_up = New clsGreeksnn            'market.s_ = s * 1.01n            backup_market.s_ = s * 1.01n            n            'shifted_strikes = market.sabr_surface_.local_vol_surface.grid_.get_all_strikesn            shifted_strikes = backup_market.sabr_surface_.local_vol_surface.grid_.get_all_strikesn            'For i = 1 To market.sabr_surface_.local_vol_surface.grid_.no_of_strikesn            For i = 1 To backup_market.sabr_surface_.local_vol_surface.grid_.no_of_strikesn                shifted_strikes(i) = shifted_strikes(i) * 1.01n            Next in            'market.sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn            backup_market.sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn            n            'Call run_futopt_pricing(eval_date, stickymoneyness_delta_greek_up, deal_ticket, market)n            Call run_futopt_pricing(eval_date, stickymoneyness_delta_greek_up, deal_ticket, backup_market)n            n            'Set market = backup_market.copy_objn            Set backup_market = market.copy_objn            n            'sticky monenyness delta (1% down)n            Set stickymoneyness_delta_greek_down = New clsGreeksnn            'market.s_ = s * 0.99n            backup_market.s_ = s * 0.99n            n            'shifted_strikes = market.sabr_surface_.local_vol_surface.grid_.get_all_strikesn            shifted_strikes = backup_market.sabr_surface_.local_vol_surface.grid_.get_all_strikesn            'For i = 1 To market.sabr_surface_.local_vol_surface.grid_.no_of_strikesn            For i = 1 To backup_market.sabr_surface_.local_vol_surface.grid_.no_of_strikesn                shifted_strikes(i) = shifted_strikes(i) * 0.99n            Next in            'market.sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn            backup_market.sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn            n            'Call run_futopt_pricing(eval_date, stickymoneyness_delta_greek_down, deal_ticket, market)n            Call run_futopt_pricing(eval_date, stickymoneyness_delta_greek_down, deal_ticket, backup_market)n            n            'Set market = backup_market.copy_objn            Set backup_market = market.copy_objn            n            '1%p vegan            Set vol_bump_greek = New clsGreeksn            n            'market.sabr_surface_.bump_vol_surface 0.01n            backup_market.sabr_surface_.bump_vol_surface 0.01n            n            'Call run_futopt_pricing(eval_date, vol_bump_greek, deal_ticket, market)n            Call run_futopt_pricing(eval_date, vol_bump_greek, deal_ticket, backup_market)n            n            'market.sabr_surface_.rewind_vol_bumpn            backup_market.sabr_surface_.rewind_vol_bumpn            n            'Set market = backup_market.copy_objn            Set backup_market = market.copy_objn        n            'pertubation: from dollar values to dollar valuesn            the_greeks.vega = vol_bump_greek.value - the_greeks.valuen            the_greeks.sticky_moneyness_delta = (stickymoneyness_delta_greek_up.value - stickymoneyness_delta_greek_down.value) / (2 * 0.01 * the_greeks.ul_price) * sn            the_greeks.sticky_moneyness_gamma = (stickymoneyness_delta_greek_up.value + stickymoneyness_delta_greek_down.value - 2 * the_greeks.value) / (the_greeks.ul_price * 0.01) ^ 2n            n        End Selectn    n        'from unit metrics to dollar valuesn        the_greeks.delta = delta * s * deal_ticket.conversion_ratio * deal_ticket.qtyn        the_greeks.gamma = 0.5 * gamma * (s * 0.01) ^ 2 * deal_ticket.conversion_ratio * deal_ticket.qtyn        the_greeks.theta = theta * deal_ticket.conversion_ratio * deal_ticket.qtyn        n    End Ifnn    Set stickymoneyness_delta_greek_up = Nothingn    Set stickymoneyness_delta_greek_down = Nothingn    Set vol_bump_greek = Nothingn    Set backup_market = Nothingn    nEnd Sub