Option ExplicitnnPublic value As DoublenPublic delta As DoublenPublic implied_tree_delta As Double ' Refer to Derman, 1999nPublic implied_tree_gamma As Double ' Refer to Derman, 1999nPublic sticky_strike_delta As Double ' Refer to Derman, 1999nPublic sticky_strike_gamma As Double ' Refer to Derman, 1999nPublic sticky_moneyness_delta As Double ' Refer to Derman, 1999nPublic sticky_moneyness_gamma As Double ' Refer to Derman, 1999nPublic percent_dollar_gamma_implied_tree As Double ' Refer to Derman, 1999nPublic vega As DoublenPublic w_vega As DoublennPublic implied_tree_ratio As DoublennnPublic gamma As DoublennnPublic ul_code As StringnnPublic no_of_ul As Integer '2015/10/19nnnPrivate deltas_() As DoublenPrivate implied_tree_deltas_() As Double ' Refer to Derman, 1999nPrivate implied_tree_gammas_() As Double ' Refer to Derman, 1999nPrivate sticky_strike_deltas_() As Double ' Refer to Derman, 1999nPrivate sticky_strike_gammas_() As Double ' Refer to Derman, 1999n'added 2018.09.07nPrivate sticky_moneyness_deltas_() As DoublenPrivate sticky_moneyness_gammas_() As DoublennPrivate vegas_() As DoublenPrivate volgas_() As DoublenPrivate vannas_() As DoublenPrivate gammas_() As DoublenPublic cross_gamma12 As DoublenPublic cross_gamma13 As DoublenPublic cross_gamma23 As DoublenPrivate corr_sens_() As DoublennnPrivate partial_skews_() As Double ' 2015-10-05nPrivate term_skews_() As Double ' 2015-10-05nPrivate partial_vegas_() As Double ' 2015-10-05nPrivate term_vegas_() As Double ' 2015-10-05nPrivate partial_convs_() As Double ' 2015-10-05nPrivate term_convs_() As Double ' 2015-10-05nPrivate term_dates_() As Date ' 2015-10-05nPublic no_of_tenors As IntegernnPublic duration As DoublennPrivate eff_duration_() As Double '2016-01-22nnPrivate skew_s_() As DoublenPrivate conv_s_() As DoublennPrivate xAxis_() As DoublenPrivate yAxis_() As DoublenPrivate zAxis_() As DoublenPrivate snapshot_value_() As DoublennPrivate value_matrix_() As clsValueMatrixnnnnPublic theta As DoublenPublic volga As DoublenPublic vanna As DoublenPublic rho As Double ' for PL CurrencynPrivate rho_ul_() As Double ' for drift termnnPublic skew_s As DoublenPublic conv_s As DoublennPublic asset_code As StringnnPublic implied_vol As DoublennPublic ul_price As DoublenPublic ul_initial_price As DoublennnnPrivate ul_prices_() As DoublenPrivate ul_initial_prices_() As DoublennPublic eval_date As DatennPublic term_date As DatennPublic simulation_variance As Double ' Variance of the simulation pathsnn' Greek Coden' VALUE, DELTA, GAMMA, VEGA, THETA, VOLGA, VANNA, SKEW, CONVnnnPublic Sub set_value_matrix(inx As Integer, a_value_matrix As clsValueMatrix)nn   n    nOn Error Resume Nextnn    Dim temp_inx As Integern    n    temp_inx = UBound(value_matrix_)n    n    If (Err.number = 9) Or temp_inx < inx Thenn    n        ReDim Preserve value_matrix_(1 To inx) As clsValueMatrixn    n    End Ifn    nOn Error GoTo ErrorHandlern    n    Set value_matrix_(inx) = a_value_matrixn    n    n    Exit Subn    nErrorHandler:nn    raise_err "set_value_matrix"n    nnEnd SubnnPublic Function value_matrix(inx As Integer) As clsValueMatrixnn    Set value_matrix = value_matrix_(inx)nnEnd FunctionnnnnnnPublic Sub redim_arrays(no_of_ul_in As Integer, Optional no_of_term As Integer = 6)nn    no_of_ul = no_of_ul_inn    n    If no_of_ul_in > 0 Thenn        ReDim Preserve deltas_(1 To no_of_ul_in) As Doublen        ReDim Preserve vegas_(1 To no_of_ul_in) As Doublen        ReDim Preserve volgas_(1 To no_of_ul_in) As Doublen        ReDim Preserve vannas_(1 To no_of_ul_in) As Doublen        ReDim Preserve gammas_(1 To no_of_ul_in) As Doublen        ReDim Preserve skew_s_(1 To no_of_ul_in) As Doublen        ReDim Preserve conv_s_(1 To no_of_ul_in) As Doublen        ReDim Preserve ul_prices_(1 To no_of_ul_in) As Doublen        n        ReDim Preserve eff_duration_(1 To no_of_ul_in) As Doublen        n        ReDim Preserve ul_initial_prices_(1 To no_of_ul_in) As Doublen        n        ReDim Preserve sticky_strike_deltas_(1 To no_of_ul_in) As Doublen        ReDim Preserve sticky_strike_gammas_(1 To no_of_ul_in) As Doublen        ReDim Preserve implied_tree_deltas_(1 To no_of_ul_in) As Doublen        n        ReDim Preserve corr_sens_(1 To no_of_ul_in, 1 To no_of_ul_in) As Doublen        n        ReDim Preserve rho_ul_(1 To no_of_ul_in) As Doublen        n        If no_of_term > 0 Thenn            ReDim Preserve term_vegas_(1 To no_of_ul_in, 1 To no_of_term) As Doublen            ReDim Preserve partial_vegas_(1 To no_of_ul_in, 1 To no_of_term) As Doublen            ReDim Preserve term_skews_(1 To no_of_ul_in, 1 To no_of_term) As Doublen            ReDim Preserve partial_skews_(1 To no_of_ul_in, 1 To no_of_term) As Doublen            ReDim Preserve term_convs_(1 To no_of_ul_in, 1 To no_of_term) As Doublen            ReDim Preserve partial_convs_(1 To no_of_ul_in, 1 To no_of_term) As Doublen            ReDim Preserve term_dates_(1 To no_of_ul_in, 1 To no_of_term) As Daten        End Ifn        n        no_of_tenors = no_of_termn    End IfnnnEnd SubnnnPublic Function copy_obj() As clsGreeksnn    Dim temp_cls As clsGreeksn    Dim no_of_uls As Integern    Dim inx As Integern    Dim jnx As Integern    n    Set temp_cls = New clsGreeksn    n    temp_cls.value = valuen    temp_cls.delta = deltan    temp_cls.vega = vegan    temp_cls.gamma = gamman    temp_cls.theta = thetan    temp_cls.volga = volgan    temp_cls.vanna = vannan    n    temp_cls.skew_s = skew_sn    temp_cls.conv_s = conv_sn    n    temp_cls.cross_gamma = cross_gamman    n    For inx = 1 To no_of_ulsn        For jnx = inx + 1 To no_of_ulsn            temp_cls.set_corr_sens inx, jnx, corr_sens_(inx, jnx)n        Next jnxn    Next inxn    n    temp_cls.implied_tree_delta = implied_tree_deltan    temp_cls.sticky_strike_delta = sticky_strike_deltan    n    no_of_uls = get_array_size_double(deltas_)n    temp_cls.redim_arrays no_of_ulsn    n    For inx = 1 To no_of_ulsn        temp_cls.set_deltas inx, deltas_(inx)n    Next inxn    n    no_of_uls = get_array_size_double(vegas_)n    For inx = 1 To no_of_ulsn        temp_cls.set_vegas inx, vegas_(inx)n    Next inxn    n    no_of_uls = get_array_size_double(vannas_)n    For inx = 1 To no_of_ulsn        temp_cls.set_vannas inx, vannas_(inx)n    Next inxn    n    no_of_uls = get_array_size_double(volgas_)n    For inx = 1 To no_of_ulsn        temp_cls.set_volgas inx, volgas_(inx)n    Next inxn        n    no_of_uls = get_array_size_double(sticky_strike_deltas_)n    For inx = 1 To no_of_ulsn        temp_cls.set_deltas inx, sticky_strike_deltas_(inx)n    Next inxn    n            n    no_of_uls = get_array_size_double(implied_tree_deltas_)n    For inx = 1 To no_of_ulsn        temp_cls.set_deltas inx, implied_tree_deltas_(inx)n    Next inxn    n    n    no_of_uls = get_array_size_double(gammas_)n    For inx = 1 To no_of_ulsn        temp_cls.set_gammas inx, gammas_(inx)n    Next inxn    n    no_of_uls = get_array_size_double(skew_s_)n    For inx = 1 To no_of_ulsn        temp_cls.set_skews inx, skew_s_(inx)n    Next inxn    n    no_of_uls = get_array_size_double(conv_s_)n    For inx = 1 To no_of_ulsn        temp_cls.set_convs inx, conv_s_(inx)n    Next inxn    n    no_of_uls = get_array_size_double(ul_prices_)n    For inx = 1 To no_of_ulsn        temp_cls.set_ul_prices inx, ul_prices_(inx)n    Next inxn                n    no_of_uls = get_array_size_double(ul_initial_prices_)n    For inx = 1 To no_of_ulsn        temp_cls.set_ul_initial_prices inx, ul_initial_prices_(inx)n    Next inxn                n    no_of_uls = get_array_size_double(rho_ul_)n    n    For inx = 1 To no_of_ulsn        temp_cls.set_rho_ul inx, rho_ul_(inx)n    Next inxn            n    temp_cls.simulation_variance = simulation_variancen    n    n    n    Set copy_obj = temp_clsnnEnd FunctionnnPublic Sub set_xAxis(xAxis() As Double, Optional log_value As Boolean = True, Optional as_percentage_of As Double = 1#)n    n    Dim inx As Integern    nOn Error Resume Nextnn    ReDim xAxis_(LBound(xAxis) To UBound(xAxis)) As Doublen    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        n        raise_err "set_xAxis", "xAxis not initialized.."n    n    End Ifn    n    If log_value Thenn    n        For inx = LBound(xAxis) To UBound(xAxis)n            n            xAxis_(inx) = Exp(xAxis(inx)) / as_percentage_ofn        n        Next inxn    n    Elsen    n        For inx = LBound(xAxis) To UBound(xAxis)n        n            xAxis_(inx) = xAxis(inx) / as_percentage_ofn            n        Next inxn        n    End Ifn    n    Exit Subn    nErrorHandler:nn    raise_err "set_xAxis"nnnEnd SubnnnPublic Sub set_yAxis(yAxis() As Double, Optional log_value As Boolean = True, Optional as_percentage_of As Double = 1#)n    n    Dim inx As Integern    nOn Error Resume Nextnn    ReDim yAxis_(LBound(yAxis) To UBound(yAxis)) As Doublen    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        n        raise_err "set_yAxis", "yAxis not initialized.."n    n    End Ifn    n    If log_value Thenn    n        For inx = LBound(yAxis) To UBound(yAxis)n            n            yAxis_(inx) = Exp(yAxis(inx)) / as_percentage_ofn        n        Next inxn    n    Elsen        n        For inx = LBound(yAxis) To UBound(yAxis)n            n            yAxis_(inx) = (yAxis(inx)) / as_percentage_ofn        n        Next inxn        n    End Ifn    n    Exit Subn    nErrorHandler:nn    raise_err "set_yAxis"nnnEnd SubnPublic Sub set_zAxis(zAxis() As Double, Optional log_value As Boolean = True, Optional as_percentage_of As Double = 1#)n    n    Dim inx As Integern    nOn Error Resume Nextnn    ReDim zAxis_(LBound(zAxis) To UBound(zAxis)) As Doublen    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        n        raise_err "set_zAxis", "yAxis not initialized.."n    n    End Ifn    n    If log_value Thenn    n        For inx = LBound(zAxis) To UBound(zAxis)n            n            zAxis_(inx) = Exp(zAxis(inx)) / as_percentage_ofn        n        Next inxn    n    Elsen        n    n        For inx = LBound(zAxis) To UBound(zAxis)n            n            zAxis_(inx) = (zAxis(inx)) / as_percentage_ofn        n        Next inxn        n    End Ifn    n    Exit Subn    nErrorHandler:nn    raise_err "set_zAxis"nnnEnd SubnnPublic Sub set_snapshot_value(snapshot_value() As Double, Optional notional As Double = 1)n    n    Dim inx As Longn    nOn Error Resume Nextnn    ReDim snapshot_value_(LBound(snapshot_value) To UBound(snapshot_value)) As Doublen    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        n        raise_err "set_snapshot_value", "snapshot_value_ not initialized.."n    n    End Ifn    n   n   For inx = LBound(snapshot_value) To UBound(snapshot_value)n            n        snapshot_value_(inx) = snapshot_value(inx) * notionaln        n   Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "set_snaptshot_value", Err.descriptionnnnEnd SubnnnnPublic Function xAxis(ByVal inx As Integer) As Doublenn    xAxis = xAxis_(inx)nnEnd FunctionnnPublic Function yAxis(ByVal inx As Integer) As Doublenn    yAxis = yAxis_(inx)nnEnd FunctionnPublic Function snapshot_value(ByVal inx As Integer) As Doublenn    snapshot_value = snapshot_value_(inx)nnEnd Functionn'Public Function snapshot_value_bump(ByVal inx As Integer) As Doublen'n'    snapshot_value_bump = snapshot_value_vol_bump_(inx)n'n'End FunctionnnPublic Function get_xAxis() As Double()nn    get_xAxis = xAxis_nnEnd FunctionnnPublic Function get_yAxis() As Double()nn    get_yAxis = yAxis_nnEnd FunctionnPublic Function get_zAxis() As Double()nn    get_zAxis = zAxis_nnEnd FunctionnPublic Function get_snapshot_value() As Double()nn    get_snapshot_value = snapshot_value_nnEnd Functionn'Public Function get_snapshot_value_bump() As Double()n'n'    get_snapshot_value_bump = snapshot_value_vol_bump_n'n'End FunctionnnnPublic Function ul_prices(ByVal inx As Integer) As Doublenn    ul_prices = ul_prices_(inx)n    nEnd FunctionnPublic Function ul_initial_prices(ByVal inx As Integer) As Doublenn    ul_initial_prices = ul_initial_prices_(inx)n    nEnd FunctionnnPublic Function deltas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    deltas = deltas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        deltas = 0n    Elsen        raise_err "clsGreeks.deltas", Err.descriptionn    End Ifn    nEnd FunctionnnnPublic Function eff_duration(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    eff_duration = eff_duration_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        eff_duration = 0n    Elsen        raise_err "clsGreeks.deltas", Err.descriptionn    End Ifn    nEnd Functionnn'2015-10-05nPublic Function term_vega(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    term_vega = term_vegas_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        term_vega = 0n    Elsen        raise_err "clsGreeks.term_vega", Err.descriptionn    End Ifn    nEnd Functionnn'2015-10-05nPublic Function partial_vega(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    partial_vega = partial_vegas_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        partial_vega = 0n    Elsen        raise_err "clsGreeks.partial_vega", Err.descriptionn    End Ifn    nEnd FunctionnPublic Function term_skew(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    term_skew = term_skews_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        term_skew = 0n    Elsen        raise_err "clsGreeks.term_skew", Err.descriptionn    End Ifn    nEnd Functionnn'2015-10-05nPublic Function partial_skew(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    partial_skew = partial_skews_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        partial_skew = 0n    Elsen        raise_err "clsGreeks.partial_skew", Err.descriptionn    End Ifn    nEnd FunctionnnPublic Function term_conv(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    term_conv = term_convs_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        term_conv = 0n    Elsen        raise_err "clsGreeks.term_conv", Err.descriptionn    End Ifn    nEnd Functionnn'2015-10-05nPublic Function partial_conv(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    partial_conv = partial_convs_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        partial_conv = 0n    Elsen        raise_err "clsGreeks.partial_conv", Err.descriptionn    End Ifn    nEnd Functionn'2015-10-05nPublic Function get_term_date(ByVal inx As Integer, ByVal jnx As Integer) As DatennOn Error GoTo ErrorHandlernn    get_term_date = term_dates_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        get_term_date = 0n    Elsen        raise_err "clsGreeks.term_date", Err.descriptionn    End Ifn    nEnd FunctionnnPublic Function corr_sens(ByVal inx As Integer, ByVal jnx As Integer) As DoublennOn Error GoTo ErrorHandlernn    corr_sens = corr_sens_(inx, jnx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        corr_sens = 0n    Elsen        raise_err "clsGreeks.corr_sens", Err.descriptionn    End Ifn    nEnd FunctionnPublic Function implied_tree_deltas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    implied_tree_deltas = implied_tree_deltas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        implied_tree_deltas = 0n    Elsen        raise_err "clsGreeks.implied_tree_deltas", Err.descriptionn    End Ifn    nEnd FunctionnPublic Function implied_tree_gammas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    implied_tree_gammas = implied_tree_gammas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        implied_tree_gammas = 0n    Elsen        raise_err "clsGreeks.implied_tree_gammas", Err.descriptionn    End Ifn    nEnd Functionnn'added 2018.9.7nPublic Function sticky_moneyness_deltas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    sticky_moneyness_deltas = sticky_moneyness_deltas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        sticky_moneyness_deltas = 0n    Elsen        raise_err "clsGreeks.sticky_moneyness_deltas", Err.descriptionn    End Ifn    nEnd FunctionnnPublic Function sticky_moneyness_gammas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    sticky_moneyness_gammas = sticky_moneyness_gammas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        sticky_moneyness_gammas = 0n    Elsen        raise_err "clsGreeks.sticky_moneyness_gammas", Err.descriptionn    End Ifn    nEnd FunctionnnnPublic Function sticky_strike_deltas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    sticky_strike_deltas = sticky_strike_deltas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        sticky_strike_deltas = 0n    Elsen        raise_err "clsGreeks.sticky_strike_deltas", Err.descriptionn    End Ifn    nEnd FunctionnnPublic Function sticky_strike_gammas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    sticky_strike_gammas = sticky_strike_gammas_(inx)n    n    Exit FunctionnnErrorHandler:n    n    If Err.number = 9 Thenn        sticky_strike_gammas = 0n    Elsen        raise_err "clsGreeks.sticky_strike_gammas", Err.descriptionn    End Ifn    nEnd FunctionnnPublic Function gammas(ByVal inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    gammas = gammas_(inx)n        n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        gammas = 0n    Elsen        raise_err "clsGreeks.deltas", Err.descriptionn    End Ifn    nEnd FunctionnPublic Function rho_ul(Optional ByVal inx As Integer = 1) As DoublennOn Error GoTo ErrorHandlernn    rho_ul = rho_ul_(inx)n        n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        rho_ul = 0n    Elsen        raise_err "clsGreeks.rho_ul", Err.descriptionn    End Ifn    nEnd FunctionnPublic Function skew_s_s(ByVal inx As Integer) As DoublennnOn Error GoTo ErrorHandlernn    skew_s_s = skew_s_(inx)n    n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        skew_s_s = 0n    Elsen        raise_err "clsGreeks.skew_s_s", Err.descriptionn    End Ifn        nEnd FunctionnPublic Function conv_s_s(ByVal inx As Integer) As DoublennnOn Error GoTo ErrorHandlernn    conv_s_s = conv_s_(inx)n    n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        conv_s_s = 0n    Elsen        raise_err "clsGreeks.conv_s_s", Err.descriptionn    End Ifn        nEnd FunctionnPublic Function vegas(ByVal inx As Integer) As DoublennnOn Error GoTo ErrorHandlernn    vegas = vegas_(inx)n    n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        vegas = 0n    Elsen        raise_err "clsGreeks.vegas", Err.descriptionn    End Ifn            n    n    nEnd FunctionnnPublic Function vannas(ByVal inx As Integer) As DoublennnOn Error GoTo ErrorHandlernn    vannas = vannas_(inx)n    n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        vannas = 0n    Elsen        raise_err "clsGreeks.vannas", Err.descriptionn    End Ifn            n    n    nEnd FunctionnnPublic Function volgas(ByVal inx As Integer) As DoublennnOn Error GoTo ErrorHandlernn    volgas = volgas_(inx)n    n    Exit Functionn    nErrorHandler:n    n    If Err.number = 9 Thenn        volgas = 0n    Elsen        raise_err "clsGreeks.volgas", Err.descriptionn    End Ifn            n    n    nEnd Functionnnn'------------------------n' 2015-10-19n'------------------------nnPublic Sub to_term_vega(current_date As Date) '<------nn    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    n    n    nOn Error GoTo ErrorHandlern    n    If no_of_tenors > 0 Then 'get_array_size_date(term_dates_) > 0 Thenn    n        If no_of_tenors > 1 Thenn        n            If term_dates_(1, no_of_tenors) > term_dates_(1, no_of_tenors - 1) Then  '<=====n        n                For inx = 1 To no_of_uln                    n                    '-----n                    'treat the last termn                    term_vegas_(inx, no_of_tenors) = partial_vegas_(inx, no_of_tenors) - partial_vegas_(inx, no_of_tenors - 1)n                    term_vegas_(inx, no_of_tenors) = term_vegas_(inx, no_of_tenors) * (term_dates_(inx, no_of_tenors) - current_date) / (term_dates_(inx, no_of_tenors) - term_dates_(inx, no_of_tenors - 1))n                    '<----n                n                    For jnx = no_of_tenors - 1 To 2 Step -1n                    n                        term_vegas_(inx, jnx) = partial_vega(inx, jnx) - partial_vegas_(inx, jnx - 1) ' FWD Vegan                        n                        For knx = jnx + 1 To no_of_tenorsn                            term_vegas_(inx, jnx) = term_vegas_(inx, jnx) - term_vegas_(inx, knx) * (term_dates_(inx, jnx) - term_dates_(inx, jnx - 1)) / (term_dates_(inx, knx) - current_date) 'Extract Q_k / T_kn                        Next knxn                        n                        term_vegas_(inx, jnx) = term_vegas_(inx, jnx) * (term_dates_(inx, jnx) - current_date) / (term_dates_(inx, jnx) - term_dates_(inx, jnx - 1))n                    n                    Next jnxn                    n                    '-- treat the first termn                    term_vegas_(inx, 1) = partial_vegas_(inx, 1)n                    n                    For knx = 2 To no_of_tenorsn                        term_vegas_(inx, 1) = term_vegas_(inx, 1) - term_vegas_(inx, knx) * (term_dates_(inx, 1) - current_date) / (term_dates_(inx, knx) - current_date) 'Extract Q_k / T_kn                    Next knxn                        n                    term_vegas_(inx, 1) = term_vegas_(inx, 1) * (term_dates_(inx, 1) - current_date) / (term_dates_(inx, 1) - current_date)n                    '<-----n                n                Next inxn            n            End Ifn            n        Elsen        n            For inx = 1 To no_of_uln                term_vegas_(inx, no_of_tenors) = partial_vegas_(inx, no_of_tenors)n            Next inxn                n        End Ifn            nn    n    End Ifnnn    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.to_term_vega", Err.descriptionnnnEnd SubnnnPublic Sub to_term_skew(current_date As Date) '<------nn    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    n    n    nOn Error GoTo ErrorHandlern    n    If no_of_tenors > 0 Then 'get_array_size_date(term_dates_) > 0 Thenn    n        If no_of_tenors > 1 Thenn        n            If term_dates_(1, no_of_tenors) > term_dates_(1, no_of_tenors - 1) Then  '<=====n        n                For inx = 1 To no_of_uln                    n                    '-----n                    'treat the last termn                    term_skews_(inx, no_of_tenors) = partial_skews_(inx, no_of_tenors) - partial_skews_(inx, no_of_tenors - 1)n                    term_skews_(inx, no_of_tenors) = term_skews_(inx, no_of_tenors) * (term_dates_(inx, no_of_tenors) - current_date) / (term_dates_(inx, no_of_tenors) - term_dates_(inx, no_of_tenors - 1))n                    '<----n                n                    For jnx = no_of_tenors - 1 To 2 Step -1n                    n                        term_skews_(inx, jnx) = partial_skew(inx, jnx) - partial_skews_(inx, jnx - 1) ' FWD skewn                        n                        For knx = jnx + 1 To no_of_tenorsn                            term_skews_(inx, jnx) = term_skews_(inx, jnx) - term_skews_(inx, knx) * (term_dates_(inx, jnx) - term_dates_(inx, jnx - 1)) / (term_dates_(inx, knx) - current_date) 'Extract Q_k / T_kn                        Next knxn                        n                        term_skews_(inx, jnx) = term_skews_(inx, jnx) * (term_dates_(inx, jnx) - current_date) / (term_dates_(inx, jnx) - term_dates_(inx, jnx - 1))n                    n                    Next jnxn                    n                    '-- treat the first termn                    term_skews_(inx, 1) = partial_skews_(inx, 1)n                    n                    For knx = 2 To no_of_tenorsn                        term_skews_(inx, 1) = term_skews_(inx, 1) - term_skews_(inx, knx) * (term_dates_(inx, 1) - current_date) / (term_dates_(inx, knx) - current_date) 'Extract Q_k / T_kn                    Next knxn                        n                    term_skews_(inx, 1) = term_skews_(inx, 1) * (term_dates_(inx, 1) - current_date) / (term_dates_(inx, 1) - current_date)n                    '<-----n                n                Next inxn            End Ifn        n        Elsen    n            For inx = 1 To no_of_uln                term_skews_(inx, no_of_tenors) = partial_skews_(inx, no_of_tenors)n            Next inxn            n        End Ifn        n    n    n    End Ifnnn    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.to_term_skew", Err.descriptionnnnEnd SubnnPublic Sub to_term_conv(current_date As Date) '<------nn    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    n    n    nOn Error GoTo ErrorHandlern    n    If no_of_tenors > 0 Then 'get_array_size_date(term_dates_) > 0 Thenn    n        If no_of_tenors > 1 Thenn            n            If term_dates_(1, no_of_tenors) > term_dates_(1, no_of_tenors - 1) Then  '<=====n            n                For inx = 1 To no_of_uln                    n                    '-----n                    'treat the last termn                    term_convs_(inx, no_of_tenors) = partial_convs_(inx, no_of_tenors) - partial_convs_(inx, no_of_tenors - 1)n                    term_convs_(inx, no_of_tenors) = term_convs_(inx, no_of_tenors) * (term_dates_(inx, no_of_tenors) - current_date) / (term_dates_(inx, no_of_tenors) - term_dates_(inx, no_of_tenors - 1))n                    '<----n                n                    For jnx = no_of_tenors - 1 To 2 Step -1n                    n                        term_convs_(inx, jnx) = partial_conv(inx, jnx) - partial_convs_(inx, jnx - 1) ' FWD convn                        n                        For knx = jnx + 1 To no_of_tenorsn                            term_convs_(inx, jnx) = term_convs_(inx, jnx) - term_convs_(inx, knx) * (term_dates_(inx, jnx) - term_dates_(inx, jnx - 1)) / (term_dates_(inx, knx) - current_date) 'Extract Q_k / T_kn                        Next knxn                        n                        term_convs_(inx, jnx) = term_convs_(inx, jnx) * (term_dates_(inx, jnx) - current_date) / (term_dates_(inx, jnx) - term_dates_(inx, jnx - 1))n                    n                    Next jnxn                    n                    '-- treat the first termn                    term_convs_(inx, 1) = partial_convs_(inx, 1)n                    n                    For knx = 2 To no_of_tenorsn                        term_convs_(inx, 1) = term_convs_(inx, 1) - term_convs_(inx, knx) * (term_dates_(inx, 1) - current_date) / (term_dates_(inx, knx) - current_date) 'Extract Q_k / T_kn                    Next knxn                        n                    term_convs_(inx, 1) = term_convs_(inx, 1) * (term_dates_(inx, 1) - current_date) / (term_dates_(inx, 1) - current_date)n                    '<-----n                n                Next inxn        n            End Ifn            n        Elsen        n            For inx = 1 To no_of_uln                term_convs_(inx, no_of_tenors) = partial_convs_(inx, no_of_tenors)n            Next inxn            n        End Ifn        n    n    n    End Ifnnn    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.to_term_conv", Err.descriptionnnnEnd SubnnnnPublic Sub set_ul_prices(ByVal inx As Integer, ByVal ul_price_value As Double)nn    ul_prices_(inx) = ul_price_valuennEnd SubnPublic Sub set_ul_initial_prices(ByVal inx As Integer, ByVal ul_price_value As Double)nn    ul_initial_prices_(inx) = ul_price_valuennEnd SubnPublic Sub set_implied_tree_deltas(ByVal inx As Integer, ByVal delta_value As Double)nnn    implied_tree_deltas_(inx) = delta_valuennEnd SubnPublic Sub set_sticky_strike_deltas(ByVal inx As Integer, ByVal delta_value As Double)nnn    sticky_strike_deltas_(inx) = delta_valuennEnd SubnnPublic Sub set_sticky_strike_gammas(ByVal inx As Integer, ByVal gamma_value As Double)nnn    sticky_strike_gammas_(inx) = gamma_valuennEnd SubnPublic Sub set_eff_durations(ByVal inx As Integer, ByVal eff_duration_value As Double)nnn    eff_duration_(inx) = eff_duration_valuennEnd SubnPublic Sub set_deltas(ByVal inx As Integer, ByVal delta_value As Double)nnn    deltas_(inx) = delta_valuennEnd SubnnPublic Sub set_gammas(ByVal inx As Integer, ByVal delta_value As Double)nnn    gammas_(inx) = delta_valuennEnd SubnnPublic Sub set_rho_ul(ByVal inx As Integer, ByVal rho_value As Double)nnn    rho_ul_(inx) = rho_valuennEnd SubnnnPublic Sub set_vegas(ByVal inx As Integer, ByVal delta_value As Double)nnn    vegas_(inx) = delta_valuennEnd SubnPublic Sub set_vannas(ByVal inx As Integer, ByVal value As Double)nnn    vannas_(inx) = valuennEnd SubnPublic Sub set_volgas(ByVal inx As Integer, ByVal value As Double)nnn    volgas_(inx) = valuennEnd SubnnPublic Sub set_skews(ByVal inx As Integer, ByVal skew_value As Double)nnn    skew_s_(inx) = skew_valuennEnd SubnnPublic Sub set_convs(ByVal inx As Integer, ByVal conv_value As Double)nnn    conv_s_(inx) = conv_valuennEnd Subnn'--------------------------n'2015-10-05nPublic Sub set_term_vegas(ByVal inx As Integer, ByVal jnx As Integer, ByVal vega_value As Double)nn    term_vegas_(inx, jnx) = vega_valuen    nnEnd Subn'--------------------------n'2015-10-05nPublic Sub set_partial_vegas(ByVal inx As Integer, ByVal jnx As Integer, ByVal vega_value As Double)nn    partial_vegas_(inx, jnx) = vega_valuen    nnEnd Subnnn'--------------------------n'2015-10-19nPublic Sub set_term_skews(ByVal inx As Integer, ByVal jnx As Integer, ByVal skew_value As Double)nn    term_skews_(inx, jnx) = skew_valuen    nnEnd Subnn'--------------------------n'2015-10-19nPublic Sub set_term_convs(ByVal inx As Integer, ByVal jnx As Integer, ByVal conv_value As Double)nn    term_convs_(inx, jnx) = conv_valuen    nnEnd Subnn'--------------------------n'2015-10-19nPublic Sub set_term_skews_per_ul(ByVal ul_inx As Integer, skew_values() As Double)nn    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    If get_array_size_double(skew_values) < no_of_tenors Thenn    n        ReDim Preserve skew_values(1 To no_of_tenors) As Doublen        n    End Ifnn    For inx = 1 To no_of_tenorsn        term_skews_(ul_inx, inx) = skew_values(inx)n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.set_term_skews_per_ul", Err.descriptionn    nnEnd Subnn'--------------------------n'2015-10-19nPublic Sub set_term_convs_per_ul(ByVal ul_inx As Integer, conv_values() As Double)nn    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    If get_array_size_double(conv_values) < no_of_tenors Thenn    n        ReDim Preserve conv_values(1 To no_of_tenors) As Doublen        n    End Ifnn    For inx = 1 To no_of_tenorsn        term_convs_(ul_inx, inx) = conv_values(inx)n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.set_term_convs_per_ul", Err.descriptionn    nnEnd Subn'--------------------------n'2015-10-19nPublic Sub set_term_vegas_per_ul(ByVal ul_inx As Integer, vega_values() As Double)nn    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    If get_array_size_double(vega_values) < no_of_tenors Thenn    n        ReDim Preserve vega_values(1 To no_of_tenors) As Doublen        n    End Ifnn    For inx = 1 To no_of_tenorsn        term_vegas_(ul_inx, inx) = vega_values(inx)n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.set_term_vegas_per_ul", Err.descriptionn    nnEnd Subn'--------------------------n'2015-10-19nPublic Sub set_partial_skews(ByVal inx As Integer, ByVal jnx As Integer, ByVal skew_value As Double)nn    partial_skews_(inx, jnx) = skew_valuen    nnEnd Subnn'--------------------------n'2015-10-19nPublic Sub set_partial_convs(ByVal inx As Integer, ByVal jnx As Integer, ByVal conv_value As Double)nn    partial_convs_(inx, jnx) = conv_valuen    nnEnd SubnPublic Sub set_term_dates(ByVal inx As Integer, ByVal jnx As Integer, ByVal term_date_in As Date)nn    term_dates_(inx, jnx) = term_date_inn    nnEnd Subnn'--------------------------n'2015-10-19nPublic Sub set_term_dates_per_ul(ByVal ul_inx As Integer, term_date_in() As Date)nn    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    For inx = 1 To no_of_tenorsn        term_dates_(ul_inx, inx) = term_date_in(inx)n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsGreeks.set_term_vegas_per_ul", Err.descriptionn    nnEnd SubnnnPublic Sub set_corr_sens(ByVal inx As Integer, ByVal jnx As Integer, ByVal corr_sens_value As Double)nn    corr_sens_(inx, jnx) = corr_sens_valuen    corr_sens_(jnx, inx) = corr_sens_valuennEnd SubnnPublic Sub set_all_ul_initial_prices(ul_initial_prices() As Double)nnn    ul_initial_prices_ = ul_initial_pricesnnEnd SubnPublic Sub set_all_ul_prices(ul_prices() As Double)nnn    ul_prices_ = ul_pricesnnEnd SubnPublic Function get_all_gammas() As Double()nnn    get_all_gammas = gammas_nnEnd FunctionnPublic Function get_all_deltas() As Double()nnn    get_all_deltas = deltas_nnEnd FunctionnnPublic Function get_all_eff_durations() As Double()nnn    get_all_eff_durations = eff_duration_nnEnd FunctionnPublic Function get_all_rho_ul() As Double()nnn    get_all_rho_ul = rho_ul_nnEnd FunctionnnPublic Function get_all_vegas() As Double()nnn    get_all_vegas = vegas_nnEnd FunctionnnPublic Function get_all_skews() As Double()nnn    get_all_skews = skew_s_nnEnd FunctionnnPublic Function get_all_term_skews() As Double()nnn    get_all_term_skews = term_skews_nnEnd FunctionnnnPublic Function get_all_convs() As Double()nnn    get_all_convs = conv_s_nnEnd FunctionnnPublic Function get_all_term_convs() As Double()nnn    get_all_term_convs = term_convs_nnEnd FunctionnnPublic Function get_all_term_vegas() As Double()nnn    get_all_term_vegas = term_vegas_nnEnd FunctionnnPublic Function get_all_term_dates() As Date()nnn    get_all_term_dates = term_dates_nnEnd FunctionnPublic Function get_all_vannas() As Double()nnn    get_all_vannas = vannas_nnEnd FunctionnPublic Sub set_all_eff_durations(duration_value() As Double, Optional input_base As Integer = 1)nn    Dim inx As Integern    Dim array_size As Integern    n    n    array_size = get_array_size_double(duration_value)n    n    ReDim eff_duration_(1 To array_size) As Doublen    n    For inx = 1 To array_sizen    n        eff_duration_(inx) = duration_value(inx + input_base - 1)nn    Next inxn    n '   deltas_ = deltas_valuennEnd SubnPublic Sub set_all_deltas(deltas_value() As Double, Optional input_base As Integer = 1, Optional notional As Double = 1)nn    Dim inx As Integern    Dim array_size As Integern    n    n    array_size = get_array_size_double(deltas_value)n    n    ReDim deltas_(1 To array_size) As Doublen    n    For inx = 1 To array_sizen    n        deltas_(inx) = deltas_value(inx + input_base - 1) * notionalnn    Next inxn    n '   deltas_ = deltas_valuennEnd SubnnnPublic Sub set_all_term_vega(term_vega() As Double)nnn    term_vegas_ = term_vegannEnd SubnnnPublic Sub set_all_partial_vega(partial_vega() As Double)nnn    partial_vegas_ = partial_vegannEnd SubnnnPublic Sub set_all_term_skew(term_skew() As Double)nnn    term_skews_ = term_skewnnEnd SubnnnPublic Sub set_all_partial_skew(partial_skew() As Double)nnn    partial_skews_ = partial_skewnnEnd SubnnnPublic Sub set_all_term_conv(term_conv() As Double)nnn    term_convs_ = term_convnnEnd SubnnnPublic Sub set_all_partial_conv(partial_conv() As Double)nnn    partial_convs_ = partial_convnnEnd SubnnnnPublic Sub set_all_term_date(term_date() As Date)nnn    term_dates_ = term_datennEnd SubnnnPublic Sub set_all_corr_sens(corr_sens_value() As Double)nnn    corr_sens_ = corr_sens_valuennEnd Subn'added 2018.09.07nPublic Sub set_all_sticky_moneyness_deltas(deltas_value() As Double)nnn    sticky_moneyness_deltas_ = deltas_valuennEnd SubnnPublic Sub set_all_sticky_moneyness_gammas(gammas_value() As Double)nnn    sticky_moneyness_gammas_ = gammas_valuennEnd SubnnPublic Sub set_all_sticky_strike_deltas(deltas_value() As Double)nnn    sticky_strike_deltas_ = deltas_valuennEnd SubnnPublic Sub set_all_sticky_strike_gammas(gammas_value() As Double)nnn    sticky_strike_gammas_ = gammas_valuennEnd SubnPublic Sub set_all_implied_tree_deltas(deltas_value() As Double)nnn    implied_tree_deltas_ = deltas_valuennEnd SubnnPublic Sub set_all_implied_tree_gammas(gammas_value() As Double)nnn    implied_tree_gammas_ = gammas_valuennEnd SubnnPublic Sub set_all_gammas(gammas_value() As Double, Optional input_base As Integer = 1, Optional notional As Double = 1)nn    Dim inx As Integern    Dim array_size As Integern    n    array_size = get_array_size_double(gammas_value)n    n    ReDim gammas_(1 To array_size) As Doublen    n    For inx = 1 To array_sizen    n        gammas_(inx) = gammas_value(inx + input_base - 1) * notionalnn    Next inxn       n '   gammas_ = gammas_valuennEnd SubnPublic Sub set_all_rho_ul(rho_ul_value() As Double, Optional input_base As Integer = 1, Optional notional As Double = 1)nn    Dim inx As Integern    Dim array_size As Integern    n    array_size = get_array_size_double(rho_ul_value)n    n    ReDim rho_ul_(1 To array_size) As Doublen    n    For inx = 1 To array_sizen    n        rho_ul_(inx) = rho_ul_value(inx + input_base - 1) * notionalnn    Next inxn       n '   gammas_ = gammas_valuennEnd SubnnnPublic Sub set_all_vegas(vegas_value() As Double)nnn    vegas_ = vegas_valuennEnd SubnPublic Sub set_all_vannas(vanna_value() As Double)nnn    vannas_ = vanna_valuennEnd SubnnPublic Sub set_all_volgas(volga_value() As Double)nnn    volgas_ = volga_valuennEnd SubnnPublic Sub set_all_skews(skew_values() As Double)nnn    skew_s_ = skew_valuesnnEnd SubnnPublic Sub set_all_convs(conv_values() As Double)nnn    conv_s_ = conv_valuesnnEnd SubnnnPublic Function get_term_greek_value(greek_code As String, ul_inx As Integer, term_inx As Integer) As DoublennOn Error GoTo ErrorHandlernn    Select Case UCase(greek_code)n                n        Case "VEGA": get_term_greek_value = term_vegas_(ul_inx, term_inx)n    n        Case "SKEW": get_term_greek_value = term_skews_(ul_inx, term_inx)n        n        Case "CONV": get_term_greek_value = term_convs_(ul_inx, term_inx)n            n        n    End Selectn    n    nn    Exit FunctionnnErrorHandler:n    n    raise_err "clsGreeks.get_term_greek_value", "Invalid Greek Code"nnEnd FunctionnPublic Function get_greek_value(greek_code As String) As DoublennOn Error GoTo ErrorHandlernn    Select Case UCase(greek_code)n        n        Case "VALUE": get_greek_value = valuen        n        Case "DELTA": get_greek_value = deltan        n        Case "GAMMA": get_greek_value = gamman        n        Case "VEGA": get_greek_value = vegan        n        Case "THETA": get_greek_value = thetan        n        Case "VOLGA": get_greek_value = volgan        n        Case "VANNA": get_greek_value = vannan    n        Case "SKEW": get_greek_value = skew_sn        n        Case "CONV": get_greek_value = conv_sn        n        Case "IMPLIED_TREE_DELTA": get_greek_value = implied_tree_deltan        n        Case "STICKY_STRIKE_DELTA": get_greek_value = sticky_strike_deltan        n    End Selectn    n    nn    Exit FunctionnnErrorHandler:n    n    raise_err "clsGreeks.get_greek_value", "Invalid Greek Code"nnEnd FunctionnnPublic Function get_greek_values(greek_code As String, Optional index As Integer = 1) As DoublennOn Error GoTo ErrorHandlernn    Select Case UCase(greek_code)n        n        Case "VALUE": get_greek_values = valuen        n        Case "DELTA": get_greek_values = deltas(index)n        n        Case "GAMMA": get_greek_values = gammas(index)n        n        Case "VEGA": get_greek_values = vegas(index)n        n        Case "THETA": get_greek_values = thetan        n        Case "VOLGA": get_greek_values = volgan        n        Case "VANNA": get_greek_values = vannan    n        Case "SKEW": get_greek_values = skew_s_s(index)n        n        Case "CONV": get_greek_values = conv_sn        n        Case "IMPLIED_TREE_DELTA": get_greek_values = implied_tree_deltas_(index)n        n        Case "STICKY_STRIKE_DELTA": get_greek_values = sticky_strike_deltas_(index)n        n    End Selectn    n    nn    Exit FunctionnnErrorHandler:n    n    raise_err "clsGreeks.get_greek_value", "Invalid Greek Code"nnEnd FunctionnnnPublic Sub set_greek_value(greek_code As String, greek_value As Double)nnOn Error GoTo ErrorHandlernn    Select Case UCase(greek_code)n        n        Case "VALUE": value = greek_valuen        n        Case "DELTA":   delta = greek_valuen        n        Case "GAMMA":   gamma = greek_valuen        n        Case "VEGA":   vega = greek_valuen        n        Case "THETA":   theta = greek_valuen        n        Case "VOLGA":   volga = greek_valuen        n        Case "VANNA":   vanna = greek_valuen    n        Case "SKEW":   skew_s = greek_valuen        n        Case "CONV":   conv_s = greek_valuen        n        Case "UL_PRICE":   ul_price = greek_value '---2015-01-05n        n    End Selectn    n    nn    Exit SubnnErrorHandler:n    n    raise_err "clsGreeks.set_greek_value", "Invalid Greek Code"nnnEnd SubnnPublic Sub greek_value_adjustment(adj_factor As Double, percent_vega As Boolean)nn    value = value * adj_factorn    delta = delta * adj_factorn    gamma = gamma * adj_factorn    theta = theta * adj_factorn    rho = rho * adj_factorn    n    volga = volga * adj_factorn    skew_s = skew_s * adj_factorn    conv_s = conv_s * adj_factorn    implied_tree_delta = implied_tree_delta * adj_factorn    sticky_strike_delta = sticky_strike_delta * adj_factorn    implied_tree_gamma = implied_tree_gamma * adj_factorn    sticky_strike_gamma = sticky_strike_gamma * adj_factorn    n    If percent_vega Thenn        vega = vega / 100 * adj_factorn        vanna = vanna / 100 * adj_factorn    Elsen        vega = vega * adj_factorn        vanna = vanna * adj_factorn    End Ifn    n    nnEnd SubnnPublic Sub set_all_greek_value(value_in As Double, delta_in As Double, gamma_in As Double, vega_in As Double, theta_in As Double _n                            , rho_in As Double, vanna_in As Double, volga_in As Double, skew_in As Double, conv_in As Double)nnnOn Error GoTo ErrorHandlernn    value = value_inn    delta = delta_inn    gamma = gamma_inn    theta = theta_inn    rho = rho_inn    vanna = vanna_inn    volga = volga_inn    skew_s = skew_inn    n    vega = vega_inn    n    conv_s = conv_inn    n    nn    Exit SubnnErrorHandler:n    n    raise_err "clsGreeks.set_all_greek_value"nnnnEnd Subnn