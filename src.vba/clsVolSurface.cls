Option ExplicitnnnPublic grid_ As clsPillarGridnPublic grid_origin_ As clsPillarGridnnPrivate vol_surface_() As DoublenPrivate vol_surface_origin_() As DoublennPublic Function copy_vol_surface() As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integernn    ReDim rtn_array(1 To grid_.no_of_dates, 1 To grid_.no_of_strikes) As Doublenn    For inx = 1 To grid_.no_of_datesn        For jnx = 1 To grid_.no_of_strikesnn            rtn_array(inx, jnx) = vol_surface_(inx, jnx)n    n        Next jnxn    Next inxnn    copy_vol_surface = rtn_arraynnEnd FunctionnnPublic Function copy_obj() As clsVolSurfacen    n    Dim rtn_obj As clsVolSurfacen    n    Set rtn_obj = New clsVolSurfacen    n    rtn_obj.set_vol_surface grid_.copy_obj(), copy_vol_surface()n    rtn_obj.set_vol_surface_origin grid_.copy_obj(), copy_vol_surface()n    n    n    Set copy_obj = rtn_objnnnEnd FunctionnnPublic Function get_vol_surface(Optional base As Integer = 1) As Double()n    n    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integern    nOn Error GoTo ErrorHandlern    n    ReDim rtn_array(base To grid_.no_of_dates * grid_.no_of_strikes + base - 1)n    n    For inx = 1 To grid_.no_of_strikesn        For jnx = 1 To grid_.no_of_datesn        n            rtn_array(base + (inx - 1) * grid_.no_of_dates + jnx - 1) = vol_surface_(jnx, inx)n            n        Next jnxn    Next inxn    n    get_vol_surface = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsVolSurface.get_vol_surface", Err.descriptionn    nEnd FunctionnnnPublic Function vol_surface() As Double()nn    vol_surface = vol_surface_nnEnd FunctionnnnPublic Sub set_grid(grid_in As clsPillarGrid)  ', Optional max_date As Date = 0)nn    Set grid_ = grid_inn        n'    If max_date > grid_.get_last_date Thenn'n'        Dim tmp_dates() As Daten'n'        tmp_dates = grid_.get_all_dates()n'n'        push_back_date tmp_dates, max_daten'n'        grid_.set_dates tmp_datesn'n'    End IfnnEnd Subnn'==================================================n' 2015/10/05n'==================================================nnPrivate Sub add_upto_date_to_grid(ByRef grid_in As clsPillarGrid, ByVal up_to_tenor As Date)n    n    Dim inx As Integern    Dim new_date_array() As Daten    nOn Error GoTo ErrorHandlernn    If grid_in.dates(1) > up_to_tenor Thenn        push_back_date new_date_array, up_to_tenorn    End Ifn    n    For inx = 1 To grid_in.no_of_datesn    n        push_back_date new_date_array, grid_in.dates(inx)n        n        If grid_in.dates(inx) < up_to_tenor Thenn            If inx < grid_in.no_of_dates Thenn                If grid_in.dates(inx + 1) > up_to_tenor Thenn                    push_back_date new_date_array, up_to_tenorn                End Ifn            End Ifn        End Ifn    n    Next inxn    n    grid_in.set_dates new_date_arrayn    n    Exit Subn    nErrorHandler:nn    raise_err "clsvolSurface.add_upto_date_to_grid", Err.descriptionnnEnd SubnnPrivate Function find_origin_index(old_grid As clsPillarGrid, new_grid_date As Date) As Integernn    Dim inx As Integern    Dim rtn_inx As Integern    nOn Error GoTo ErrorHandlernn    n   rtn_inx = 0n    n    For inx = old_grid.no_of_dates To 1 Step -1n    n        If old_grid.dates(inx) <= new_grid_date Thenn            rtn_inx = inxn            Exit Forn        End Ifn            n    Next inxnn   n    find_origin_index = rtn_inxn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsVolSurface.find_origin_index", Err.descriptionnnEnd FunctionnnPrivate Sub change_vol_data_as_grid_change(ByRef vol_surface_to() As Double, ByRef vol_surface_from() As Double, ByRef old_grid As clsPillarGrid, ByRef new_grid As clsPillarGrid)nn    Dim inx As Integern    Dim jnx As Integern    Dim tmp_origin_index As Integern    n    n    nOn Error GoTo ErrorHandlernn    ReDim vol_surface_to(1 To new_grid.no_of_dates, 1 To new_grid.no_of_strikes) As Doublen    n    For inx = 1 To new_grid.no_of_datesn    n    ' find origin date index d_origin_inx <= d_inx, d_origin_inx + 1 > d_inxn    'n        tmp_origin_index = find_origin_index(old_grid, new_grid.dates(inx))n        n        If tmp_origin_index = 0 Thenn            n            For jnx = 1 To new_grid.no_of_strikesn                vol_surface_to(inx, jnx) = vol_surface_from(1, jnx)n            Next jnxn        n        ElseIf tmp_origin_index = old_grid.no_of_dates Thenn            n            For jnx = 1 To new_grid.no_of_strikesn                vol_surface_to(inx, jnx) = vol_surface_from(old_grid.no_of_dates, jnx)n            Next jnxn            n        Elsen            n            For jnx = 1 To new_grid.no_of_strikesn            n                vol_surface_to(inx, jnx) = vol_surface_from(tmp_origin_index, jnx) * (old_grid.dates(tmp_origin_index + 1) - new_grid.dates(inx))n                vol_surface_to(inx, jnx) = vol_surface_to(inx, jnx) + vol_surface_from(tmp_origin_index + 1, jnx) * (new_grid.dates(inx) - old_grid.dates(tmp_origin_index))n                vol_surface_to(inx, jnx) = vol_surface_to(inx, jnx) / (old_grid.dates(tmp_origin_index + 1) - old_grid.dates(tmp_origin_index))n                n            Next jnxn            n        End Ifn        n    Next inxn    nn    Exit Subn    nErrorHandler:n    n    raise_err "clsVolSurface.add_upto_date_to_surface", Err.descriptionn    nEnd SubnnPrivate Sub backup_vol_surface_data()n    n    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern    n    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesnnOn Error GoTo ErrorHandlern    nn    ReDim vol_surface_origin_(1 To no_of_rows, 1 To no_of_cols) As Doublen    n    n    For inx = 1 To no_of_rowsn        For jnx = 1 To no_of_colsn                n            vol_surface_origin_(inx, jnx) = vol_surface_(inx, jnx)n        n        Next jnxn    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.backup_vol_surface_data", Err.descriptionnnEnd SubnnPublic Sub rewind_bump_vol_upto()nn    Set grid_ = grid_origin_.copy_objn    vol_surface_ = vol_surface_origin_n    nEnd SubnnPublic Sub bump_vol_upto(ByVal bump_size As Double, ByVal up_to_tenor As Date)n    n    '---------------------------------------------------------n    ' back up original vol surfacen    '---------------------------------------------------------n    n    backup_vol_surface_data ' to vol_surface_origin_n    n    Set grid_origin_ = grid_.copy_objn    add_upto_date_to_grid grid_, up_to_tenorn        n    change_vol_data_as_grid_change vol_surface_, vol_surface_origin_, grid_origin_, grid_n    n    '----------------------n    ' Bumpn    '----------------------n    n    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n    For inx = 1 To no_of_rowsn    n        If grid_.dates(inx) <= up_to_tenor Thenn            For jnx = 1 To no_of_colsn            n                vol_surface_(inx, jnx) = vol_surface_(inx, jnx) + bump_sizen            n            Next jnxn        End Ifn    Next inxn    n    n        n    n    'grid_origin_.set_datesn    nOn Error GoTo ErrorHandlernnn    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_vol_upto", Err.descriptionnnEnd SubnnnnnPublic Sub bump_skew_upto(ByVal bump_size As Double, ByVal up_to_tenor As Date, ByVal s As Double)n    n    '---------------------------------------------------------n    ' back up original vol surfacen    '---------------------------------------------------------n    n    backup_vol_surface_data ' to vol_surface_origin_n    n    Set grid_origin_ = grid_.copy_objn    add_upto_date_to_grid grid_, up_to_tenorn        n    change_vol_data_as_grid_change vol_surface_, vol_surface_origin_, grid_origin_, grid_n    n    '----------------------n    ' Bumpn    '----------------------n    n    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n    For inx = 1 To no_of_rowsn    n        If grid_.dates(inx) <= up_to_tenor Thenn            For jnx = 1 To no_of_colsn            n                vol_surface_(inx, jnx) = vol_surface_(inx, jnx) + 1 / Sqr(grid_.tau(inx)) * (s - grid_.strikes(jnx)) / s * bump_size 'vol_surface_(inx, jnx) + bump_sizen            n            Next jnxn        End Ifn    Next inxn    nnOn Error GoTo ErrorHandlernnn    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_vol_upto", Err.descriptionnnEnd SubnnnnPublic Sub bump_conv_upto(ByVal bump_size As Double, ByVal up_to_tenor As Date, ByVal s As Double)n    n    '---------------------------------------------------------n    ' back up original vol surfacen    '---------------------------------------------------------n    n    backup_vol_surface_data ' to vol_surface_origin_n    n    Set grid_origin_ = grid_.copy_objn    add_upto_date_to_grid grid_, up_to_tenorn        n    change_vol_data_as_grid_change vol_surface_, vol_surface_origin_, grid_origin_, grid_n    n    '----------------------n    ' Bumpn    '----------------------n    n    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n    For inx = 1 To no_of_rowsn    n        If grid_.dates(inx) <= up_to_tenor Thenn            For jnx = 1 To no_of_colsn            n                vol_surface_(inx, jnx) = vol_surface_(inx, jnx) + 1 / grid_.tau(inx) * Abs((s - grid_.strikes(jnx)) / s) * bump_size 'vol_surface_(inx, jnx) + bump_sizen            n            Next jnxn        End Ifn    Next inxn    nnOn Error GoTo ErrorHandlernnn    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_conv_upto", Err.descriptionnnEnd Subnnn'----------------------------------------------------------------------------------n' Sub: bump_vol_surfacen' DESC: Bump vol values and local vol values.n'       Copy the values to XXX_origin variables. XXX_origin variables are used to rewind the bumping.n'----------------------------------------------------------------------------------nPublic Sub bump_vol(ByVal bump_size As Double) ', tenor_index As Integer, strike_index As Integer)nn    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern    Dim bump_local_vol As Booleann    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n    ReDim vol_surface_origin_(1 To no_of_rows, 1 To no_of_cols) As Doublen    n    For inx = 1 To no_of_rowsn        For jnx = 1 To no_of_colsn                n            vol_surface_origin_(inx, jnx) = vol_surface_(inx, jnx)n            vol_surface_(inx, jnx) = vol_surface_(inx, jnx) + bump_sizen        n        Next jnxn    Next inxn    n    n    n    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_local", Err.descriptionnnEnd Subnnn'----------------------------------------------------------------------------------n' Sub: bump_skewn'----------------------------------------------------------------------------------nPublic Sub bump_skew(ByVal bump_size As Double, ByVal s As Double)nn    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern        n    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n    ReDim vol_surface_origin_(1 To no_of_rows, 1 To no_of_cols) As Doublen    n    n    For inx = 1 To no_of_rowsn        For jnx = 1 To no_of_colsn                n            vol_surface_origin_(inx, jnx) = vol_surface_(inx, jnx)n            vol_surface_(inx, jnx) = vol_surface_(inx, jnx) + 1 / Sqr(grid_.tau(inx)) * (s - grid_.strikes(jnx)) / s * bump_sizen        n        Next jnxn    Next inxn    n    n    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_skew", Err.descriptionnnEnd Subnnn'----------------------------------------------------------------------------------n' Sub: bump_convn'----------------------------------------------------------------------------------nPublic Sub bump_conv(ByVal bump_size As Double, ByVal s As Double)nn    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern        n    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n    ReDim vol_surface_origin_(1 To no_of_rows, 1 To no_of_cols) As Doublen    n    n    For inx = 1 To no_of_rowsn        For jnx = 1 To no_of_colsn                n            vol_surface_origin_(inx, jnx) = vol_surface_(inx, jnx)n            vol_surface_(inx, jnx) = vol_surface_(inx, jnx) + 1 / grid_.tau(inx) * Abs((s - grid_.strikes(jnx))) / s * bump_sizen        n        Next jnxn    Next inxn    n    n    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_conv", Err.descriptionnnEnd Subnnnn'Public Sub rewind_local_vol_bump(tenor_index As Integer, strike_index As Integer)n'n'n'On Error Resume Nextn'n'n'n'    local_vol_surface_(tenor_index, strike_index) = local_vol_surface_origin_(tenor_index, strike_index)n'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "clsSABRSurface.bump_vol_surface", Err.descriptionn'n'End Subnn'----------------------------------------------------------------------------------n' Sub: rewind_vol_bumpn' DESC: Reset vol values and local vol values to be the initial values.n'----------------------------------------------------------------------------------nPublic Sub rewind_vol_bump()nn    Dim inx As Integern    Dim jnx As Integern    Dim no_of_rows As Integern    Dim no_of_cols As Integern    Dim bump_local_vol As Booleann  n    nOn Error GoTo ErrorHandlernn    no_of_rows = grid_.no_of_datesn    no_of_cols = grid_.no_of_strikesn    n        n    For inx = 1 To no_of_rowsn        For jnx = 1 To no_of_colsn                n            vol_surface_(inx, jnx) = vol_surface_origin_(inx, jnx)n        n        Next jnxn    Next inxnn    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.bump_vol_surface", Err.descriptionnnEnd Subnnnnn'---------------------------------------------n' Sub: set_local_vol_surfacen' Input: grid (vol surface layout)n'        vol_data( vol surface data )n'        local_vol_data( vol surface data )n'---------------------------------------------nPublic Sub set_vol_surface(grid As clsPillarGrid, vol_data() As Double) ', local_vol_data() As Double)nnOn Error GoTo ErrorHandlern    n    vol_surface_ = vol_datan    nn    Set grid_ = gridnn    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.set_local_vol_surface", Err.descriptionn    nnEnd SubnnPublic Sub set_vol_surface_origin(grid As clsPillarGrid, vol_data() As Double) ', local_vol_data() As Double)nnOn Error GoTo ErrorHandlern    n    vol_surface_ = vol_datan    nn    Set grid_ = gridnn    Exit Subn    nErrorHandler:nn    raise_err "clsVolSurface.set_vol_surface_origin", Err.descriptionn    nnEnd Sub