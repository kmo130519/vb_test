Option ExplicitnnnPublic atm_s As DoublennPrivate strikes_() As DoublenPrivate dates_() As DatennPrivate tau_() As DoublennPrivate Const min_strike_step As Double = 5nn'Public Function tau(eval_date As Date, date_index As Integer) As Doublen'n'    tau = (dates_(date_index) - eval_date) / 365n'n'End FunctionnnPublic Function tau(date_index As Integer) As Doublenn    tau = tau_(date_index) '(dates_(date_index) - eval_date) / 365nnEnd FunctionnnPublic Function get_all_tau() As Double()nn    get_all_tau = tau_nnEnd FunctionnnPublic Sub set_tau(tau_in() As Double)nn    tau_ = tau_innnEnd SubnnnPublic Function copy_obj(Optional min_date As Date = 0) As clsPillarGridnn    Dim rtn_obj As clsPillarGridn    n    Set rtn_obj = New clsPillarGridn    n    rtn_obj.atm_s = atm_sn    n    Dim tmp_strikes() As Doublen    Dim tmp_dates() As Daten    Dim tmp_tau() As Doublen    n    Dim inx As Integern    n    For inx = LBound(strikes_) To UBound(strikes_)n        push_back_double tmp_strikes, strikes_(inx)n    Next inxn    n    For inx = LBound(dates_) To UBound(dates_)n        If dates_(inx) > min_date Thenn            push_back_date tmp_dates, dates_(inx)n        End Ifn    Next inxn    n    For inx = 1 To get_array_size_double(tau_)n    n        push_back_double tmp_tau, tau_(inx)n        n    Next inxn    n    rtn_obj.set_strikes tmp_strikesn    rtn_obj.set_dates tmp_datesn    rtn_obj.set_tau tmp_taun    n    n    Set copy_obj = rtn_objnnnEnd FunctionnnPublic Sub redim_arrays(no_of_strikes As Integer, no_of_dates As Integer)nn    ReDim strikes_(1 To no_of_strikes) As Doublen    ReDim dates_(1 To no_of_dates) As DatennEnd SubnnPublic Function no_of_strikes() As Integernn    Dim rtn_value As Integern    nOn Error Resume Nextnn    rtn_value = UBound(strikes_)n    n    If Err.number = 9 Thenn    n        rtn_value = 0n        n    End Ifn    n    no_of_strikes = rtn_valuennEnd FunctionnnPublic Function no_of_dates() As Integernn    Dim rtn_value As Integern    nOn Error Resume Nextnn    rtn_value = UBound(dates_)n    n    If Err.number = 9 Thenn    n        rtn_value = 0n        n    End Ifn    n    no_of_dates = rtn_valuennEnd FunctionnnPublic Function make_strikes(spot As Double, no_of_grid As Integer, width As Double) As Double()n    n    Dim Ratio As Doublen    Dim rtn_array() As Doublen    Dim inx As Integern    n    ReDim rtn_array(1 To no_of_grid) As Doublen    n    Ratio = width ^ (1 / no_of_grid)n    n    For inx = 1 To no_of_gridn    n        rtn_array(inx) = spot * Ratio ^ (inx - 1 - Int(no_of_grid / 2))n    n    Next inxn    n    make_strikes = rtn_arraynnnEnd FunctionnPublic Sub initialize(current_s As Double, dates() As Date, eval_date As Date)nnn    Dim no_of_dates As Integern    Dim inx As Integern    nOn Error Resume Nextnn    no_of_dates = UBound(dates)n    nOn Error GoTo ErrorHandlern    If Err.number = 8 Thenn    n        no_of_dates = 0n        raise_err "Invalid volatility surface"n        n    End Ifn'--------------------------------------n' Improven'--------------------------------------nn    For inx = 1 To no_of_datesn    n        'If dates(inx) >= eval_date Thenn        'day_shift 적용으로 이 부분 삭제:2018.12.5n        'If dates(inx) > eval_date Thenn        n            push_back_date dates_, dates(inx)n            push_back_double tau_, (dates(inx) - eval_date) / 365n            n        'End Ifn    n    Next inxn'n'    strikes_ = make_strikes(current_s, config__.no_of_strike_grid, config__.width_of_strike)n'n'    atm_s = Int(current_s / 5 + 0.5) * 5n'n'n'n''    dates_ = datesn'n''    push_back_double strikes_, atm_s - 10 * min_strike_stepn''    push_back_double strikes_, atm_s - 4 * min_strike_stepn''    push_back_double strikes_, atm_s - 2 * min_strike_stepn''    push_back_double strikes_, atm_s - 1 * min_strike_stepn''    push_back_double strikes_, atm_sn''    push_back_double strikes_, atm_s + 1 * min_strike_stepn''    push_back_double strikes_, atm_s + 2 * min_strike_stepn''    push_back_double strikes_, atm_s + 4 * min_strike_stepn''    push_back_double strikes_, atm_s + 10 * min_strike_stepn'n    n    Exit Subn    nErrorHandler:nn    raise_err "clsPillarGrid.initialize"n    nnEnd SubnnnPublic Sub set_strikes(strikes_in() As Double)nn    strikes_ = strikes_innnEnd SubnnPublic Sub set_dates(dates_in() As Date, Optional shift As Integer = 0)n    n    Dim inx As Integern    n    dates_ = dates_inn    n    If shift <> 0 Thenn        For inx = 1 To get_array_size_date(dates_)n        n            dates_(inx) = dates_(inx) + shiftn        n        Next inxn    End IfnnEnd SubnnPublic Function get_all_strikes(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    n    Dim inx As Integern    n    If no_of_strikes() > 0 Thenn    n        ReDim rtn_array(base To base - 1 + no_of_strikes()) As Doublen        n        n        For inx = base To base - 1 + no_of_strikesn        n            rtn_array(inx) = strikes_(inx + 1 - base)n            n        Next inxn    n    End Ifn    n    get_all_strikes = rtn_arraynnnEnd FunctionnnnPublic Function get_all_dates(Optional base As Integer = 1, Optional day_shift As Long = 0, Optional current_date As Date = 0) As Date()nn    Dim dates_as_long() As Daten    Dim inx As Integern    n    If no_of_dates() > 0 Thenn    n        ReDim dates_as_long(base To base - 1 + no_of_dates()) As Daten        n        For inx = base To base - 1 + no_of_dates()n        n            dates_as_long(inx) = CLng(dates_(inx + 1 - base)) + day_shiftn                        n            If current_date >= dates_as_long(inx) Thenn                dates_as_long(inx) = dates_as_long(inx) + current_date - dates_as_long(inx) + 1n            End Ifn            n            If inx > base Thenn                If dates_as_long(inx) <= dates_as_long(inx - 1) Thenn                    dates_as_long(inx) = dates_as_long(inx - 1) + 1n                End Ifn            End Ifn        n        Next inxn        n    End Ifn    n    get_all_dates = dates_as_longnn    'get_all_dates = dates_nnEnd FunctionnPublic Function get_all_dates_as_long(Optional base As Integer = 1, Optional day_shift As Long = 0, Optional current_date As Date = 0) As Long()nn    Dim dates_as_long() As Longn    Dim inx As Integern    n    If no_of_dates() > 0 Thenn    n        ReDim dates_as_long(base To base - 1 + no_of_dates()) As Longn        n        For inx = base To base - 1 + no_of_dates()n        n            dates_as_long(inx) = CLng(dates_(inx + 1 - base)) + day_shiftn            n            If current_date >= dates_as_long(inx) Thenn                dates_as_long(inx) = dates_as_long(inx) + (current_date - dates_as_long(base)) + 1n            End Ifn            n            If inx > base Thenn                If dates_as_long(inx) <= dates_as_long(inx - 1) Thenn                    dates_as_long(inx) = dates_as_long(inx - 1) + 1n                End Ifn            End Ifn                    n        n        Next inxn        n    End Ifn    n    get_all_dates_as_long = dates_as_longnnEnd FunctionnnnPublic Function strikes(ByVal inx As Integer) As Doublenn    strikes = strikes_(inx)nnnEnd FunctionnnPublic Function dates(ByVal inx As Integer) As Datenn    dates = dates_(inx)nnEnd FunctionnnPublic Function get_last_date() As Daten    n    Dim rtn_date As Daten    n    rtn_date = dates_(UBound(dates_))n    n    get_last_date = rtn_datennnEnd Function