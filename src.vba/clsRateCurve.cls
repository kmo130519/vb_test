Option Explicitnn'----------------------------------------------------n' This class uses qunatlib xl addinn'----------------------------------------------------nPrivate rate_dates_() As LongnPrivate dcfs_() As Doublennn'----------------------------------------------------n' This class uses qunatlib xl addinn'----------------------------------------------------n'Public obj_id As String            'quantlib object idnnPublic interpolator As clsLinearInterpolatornnnnPublic Sub initialize(dates As Range, dc As Range)nnOn Error GoTo ErrorHandlernn    Dim double_dates() As Doublen    Dim log_dcfs() As Doublen    Dim inx As Integern    n'    obj_id = Application.run("qlInterpolatedYieldCurve", "_DC_097_", dates, dc, "NullCalendar", "Actual/365", , , "Discount", , False, , True)n    n    rate_dates_ = range_to_array_long(dates)n    dcfs_ = range_to_array(dc)n    n    '-----------------------n    ' Appended on 2013/01/22n    '-----------------------n    ReDim double_dates(LBound(rate_dates_) To UBound(rate_dates_)) As Doublen    ReDim log_dcfs(LBound(dcfs_) To UBound(dcfs_)) As Doublen    n    For inx = LBound(rate_dates_) To UBound(rate_dates_)n    n        double_dates(inx) = CDbl(rate_dates_(inx))n        log_dcfs(inx) = Log(dcfs_(inx))n    n    Next inxn    n    Set interpolator = New clsLinearInterpolatorn    interpolator.initialize double_dates, log_dcfsnn    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsRateCurve.initialize :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn    nEnd SubnnPublic Sub initialize_by_array(dates() As Date, dc() As Double)nnOn Error GoTo ErrorHandlernn    Dim double_dates() As Doublen    Dim log_dcfs() As Doublen    Dim inx As Integern    n'    obj_id = Application.run("qlInterpolatedYieldCurve", "_DC_097_", dates, dc, "NullCalendar", "Actual/365", , , "Discount", , False, , True)n    n    rate_dates_ = date_to_array_long(dates)n    dcfs_ = double_to_array(dc)n    n    '-----------------------n    ' Appended on 2013/01/22n    '-----------------------n    ReDim double_dates(LBound(rate_dates_) To UBound(rate_dates_)) As Doublen    ReDim log_dcfs(LBound(dcfs_) To UBound(dcfs_)) As Doublen    n    For inx = LBound(rate_dates_) To UBound(rate_dates_)n    n        double_dates(inx) = CDbl(rate_dates_(inx))n        log_dcfs(inx) = Log(dcfs_(inx))n    n    Next inxn    n    Set interpolator = New clsLinearInterpolatorn    interpolator.initialize double_dates, log_dcfsnn    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsRateCurve.initialize_by_array :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn    nEnd SubnnnPublic Sub set_rate_dates(rate_dates_in() As Long)nn    rate_dates_ = rate_dates_innnEnd SubnnPublic Sub set_dcfs(dcfs_in() As Double)nn    dcfs_ = dcfs_innnEnd SubnnnnPublic Function copy_obj(Optional day_shift As Long = 0, Optional parallel_shift As Double = 0) As clsRateCurvenn    Dim obj As clsRateCurven    Dim new_dates() As Longn    Dim new_dcfs() As Doublen    Dim inx As Longn    nOn Error GoTo ErrorHandlernn    ReDim new_dates(0 To UBound(rate_dates_)) As Longn    ReDim new_dcfs(0 To UBound(rate_dates_)) As Doublen    nn    For inx = 0 To UBound(rate_dates_)n    n        new_dates(inx) = rate_dates_(inx) + day_shiftn        'new_dcfs(inx) = 1 / Exp(get_fwd_rate(CDate(new_dates(0)), CDate(new_dates(inx))) * (new_dates(inx) - new_dates(0)) / 365)n        n        If parallel_shift <> 0 And inx > 0 Thenn        n            new_dcfs(inx) = Exp(-(-Log(dcfs_(inx)) / (new_dates(inx) - new_dates(0)) * 365 + parallel_shift) * (new_dates(inx) - new_dates(0)) / 365)n        Elsen            new_dcfs(inx) = dcfs_(inx)n        End Ifn        n    n    Next inxn    n    Set obj = New clsRateCurven    n    obj.set_rate_dates new_datesn    obj.set_dcfs new_dcfsn    n '   obj.obj_id = Application.run("qlInterpolatedYieldCurve", "_DC_CP_" & obj_name, new_dates, new_dcfs, "NullCalendar", "Actual/365", , , "Discount", , False, , False)n n    n    n    Dim double_dates() As Doublen    Dim log_dcfs() As Doublen    n    ReDim double_dates(LBound(rate_dates_) To UBound(rate_dates_)) As Doublen    ReDim log_dcfs(LBound(dcfs_) To UBound(dcfs_)) As Doublen    n    For inx = LBound(rate_dates_) To UBound(rate_dates_)n    n        double_dates(inx) = CDbl(rate_dates_(inx))n        log_dcfs(inx) = Log(dcfs_(inx))n    n    Next inxn    n    Set obj.interpolator = New clsLinearInterpolatorn    n    obj.interpolator.initialize double_dates, log_dcfsn    n    Set copy_obj = objn    n    n    Exit Functionn    nErrorHandler:nn    raise_err "clsRateCurve.copy_obj", Err.descriptionn    nnnEnd FunctionnnPublic Function rate_dates_shifted(Optional day_shift As Long = 0) As Long()n       n    Dim new_dates() As Longn    Dim inx As Integern    n    ReDim new_dates(0 To UBound(rate_dates_)) As Longn    n    For inx = 0 To UBound(rate_dates)n    n        new_dates(inx) = rate_dates_(inx) + day_shiftn    n    Next inxn    n    rate_dates_shifted = new_datesnnEnd FunctionnPublic Function rate_dates() As Long()n       n    n    rate_dates = rate_dates_ 'new_datesnnEnd FunctionnnPublic Function spread_dcf(rate_spread As Double) As Double()n    n    Dim rtn_array() As Doublen    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    ReDim rtn_array(LBound(dcfs_) To UBound(dcfs_)) As Doublen    n    For inx = LBound(dcfs_) To UBound(dcfs_)n    n        rtn_array(inx) = dcfs_(inx) * Exp(-rate_spread * (rate_dates_(inx) - rate_dates_(0)) / 365)n    n    Next inxn    n    spread_dcf = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsRateCurve.spread_dcf"n    nnnEnd FunctionnnPublic Function dcfs() As Double()n    n    dcfs = dcfs_nnEnd FunctionnnPublic Function get_fwd_rate(d1 As Date, d2 As Date) As Doublenn    Dim d1_long As Longn    Dim d2_long As LongnnOn Error GoTo ErrorHandlernn    d1_long = d1n    n    If d2 > d1 + 1 Thenn        d2_long = d2n    Elsen        d2_long = d2 + 1n    End Ifn    n    If d1 < rate_dates_(0) Thenn        n        d1_long = rate_dates_(0)n        d2_long = rate_dates_(0) + d2 - d1nn    End Ifnn    If d1_long = d2_long Thenn        get_fwd_rate = 0n    Elsen        get_fwd_rate = -(interpolator.interpolated_value(CDbl(d2_long)) - interpolator.interpolated_value(CDbl(d1_long))) / ((d2_long - d1_long) / 365)n    End Ifn    n '   get_fwd_rate = Application.run("qlYieldTSForwardRate", obj_id, d1_long, d2_long, "Actual/365", , , True)nn    Exit Functionn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsRateCurve.get_fwd_rate :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Functionn    nnEnd FunctionnnPublic Function get_discount_factor(d1 As Date, d2 As Date) As DoublennnOn Error GoTo ErrorHandlernn    Dim d1_long As Longn    Dim d2_long As Longn    n    d1_long = d1n    d2_long = d2nn    If d1 < rate_dates_(0) Thenn        n        d1_long = rate_dates_(0)n        d2_long = rate_dates_(0) + d2 - d1n        nn    End Ifnnn    get_discount_factor = Exp(interpolator.interpolated_value(CDbl(d2_long)) - interpolator.interpolated_value(CDbl(d1_long)))n'    get_discount_factor = Application.run("qlYieldTSDiscount", obj_id, d2_long, True) / Application.run("qlYieldTSDiscount", obj_id, d1_long, True)nn    n    Exit Functionn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsRateCurve.get_discount_factor :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Functionn    nnEnd Functionn'n'Public Sub parallel_shift(spread As Double)n'n'    Dim inx As Integern'n'On Error GoTo ErrorHandlern'n'n'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "parallel_shift"n'n'End Subn'nn'Public Sub move_date(date_offset As Integer)n'n'    Dim inx As Integern'n'    For inx = LBound(rate_dates_) To UBound(rate_dates_)n'n'        rate_dates_(inx) = rate_dates_(inx) + date_offsetn'n'    Next inxn'n'End Subn