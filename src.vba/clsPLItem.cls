nOption ExplicitnnPublic pl_date As DatenPublic book_date As DatenPublic pl_item_title As StringnPublic crncy As StringnPublic qty As DoublenPublic book_value As DoublenPublic origin_book_value As DoublenPublic book_price As DoublenPublic evaluation As DoublenPublic trading_pl As DoublenPublic update_dt As DatennnPublic Function copy_obj() As clsPLItemnn    Dim rtn_obj As clsPLItemn    n    Set rtn_obj = New clsPLItemn    n    rtn_obj.qty = qtyn    rtn_obj.pl_date = pl_daten    rtn_obj.book_date = book_daten    rtn_obj.pl_item_title = pl_item_titlen    rtn_obj.crncy = crncyn    rtn_obj.qty = qtyn    rtn_obj.book_value = book_valuen    rtn_obj.book_price = book_pricen    rtn_obj.evaluation = evaluationn    rtn_obj.trading_pl = trading_pln    rtn_obj.update_dt = update_dtn    nn    Set copy_obj = rtn_objnnEnd FunctionnnPublic Sub update_values(additional_qty As Double, price As Double)n        n    ' In case additional position. i.e. adding long position on long positionn    If qty * additional_qty >= 0 Thenn    n        book_value = book_value + additional_qty * pricen        qty = qty + additional_qtyn    Elsen    ' In case canceling deal.n        Dim qty_to_cancel As Doublen        Dim new_qty As Doublen        n        qty_to_cancel = min(Abs(additional_qty), Abs(qty)) * Sgn(additional_qty)n        new_qty = additional_qty - qty_to_canceln        n        book_value = book_value + qty_to_cancel * book_price + new_qty * pricen        qty = qty + additional_qtyn        n        trading_pl = trading_pl + qty_to_cancel * (book_price - price)n        n    End Ifn    n    If qty <> 0 Thenn        book_price = Abs(book_value) / qtyn    End Ifn        nnEnd SubnnPublic Sub update_evaluation(eval_price As Double)nn    evaluation = qty * eval_pricennEnd SubnnPublic Sub set_eval_date(pl_date_in As Date)nn    pl_date = pl_date_inn    nEnd Subn