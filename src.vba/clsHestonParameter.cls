Option ExplicitnnPublic v_long As Double 'long term volatilitynPublic v_initial As Double 'initial volatilitynPublic lamda As Double ' mean reversionnPublic eta As Double  ' vol of volnPublic rho As Double  ' correlationnnPrivate v_long_origin As Double 'long term volatilitynPrivate v_initial_origin As Double 'initial volatilitynPrivate lamda_origin As Double ' mean reversionnPrivate eta_origin As Double  ' vol of volnPrivate rho_origin As Double  ' correlationnnPrivate bump_parameters(1 To 4) As clsBumpParam ' 1. parallel shift up. 2. shift down. 3. skew up. 4. skew downn'Private bump_parameters_down As clsBumpParam 'parallel shift downn'Private bump_parameters_skew_up As clsBumpParam 'skew upn'Private bump_parameters_skew_down As clsBumpParam 'skew downnnnnPublic Function copy_obj() As clsHestonParameternn    Dim rtn_obj As clsHestonParametern    Dim inx As Integern    n    Set rtn_obj = New clsHestonParametern    n    rtn_obj.initialize v_long, v_initial, lamda, eta, rhon    For inx = 1 To 4n        n        rtn_obj.set_bump_param inx, bump_parameters(inx).v_long, bump_parameters(inx).v_initial, bump_parameters(inx).lamda, bump_parameters(inx).eta, bump_parameters(inx).rhon    n    Next inxn    n    n    Set copy_obj = rtn_objnnEnd Functionnn'--------------------------------n' Sub: set_bum_paramn' Desc: Fill the bump_parameters.n'       Bump parameters will be used to calculate senstivities related to volatility surface.n'--------------------------------nPublic Sub set_bump_param(inx As Integer, v_long_in As Double, v_init_in As Double, lamda_in As Double, eta_in As Double, rho_in As Double)nnnOn Error GoTo ErrorHandlernn    Set bump_parameters(inx) = New clsBumpParamn    n    bump_parameters(inx).v_long = v_long_inn    bump_parameters(inx).v_initial = v_init_inn    bump_parameters(inx).lamda = lamda_inn    bump_parameters(inx).eta = eta_inn    bump_parameters(inx).rho = rho_innnn    Exit Subn    nErrorHandler:nn    raise_err "clsHestonParameter.set_bump_param"nnEnd SubnnPublic Sub initialize(v_long_in As Double, v_init_in As Double, lamda_in As Double, eta_in As Double, rho_in As Double)nnnOn Error GoTo ErrorHandlernn    v_long = v_long_inn    v_initial = v_init_inn    lamda = lamda_inn    eta = eta_inn    rho = rho_inn    n    v_long_origin = v_longn    v_initial_origin = v_initialn    lamda_origin = lamdan    eta_origin = etan    rho_origin = rhon    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsHestonParameter.initialize :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn                n    n    nEnd SubnnnnPublic Sub parallel_shift(vol_difference As Double)nnnOn Error GoTo ErrorHandlernnn    v_long = (Sqr(v_long) + vol_difference) ^ 2n    v_initial = (Sqr(v_initial) + vol_difference) ^ 2n    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsHestonParameter.parallel_shift :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn                n    nnEnd Subnn'--------------------------------n' Sub: rewindn' Desc: Set the parameters to be the original parameters.n'--------------------------------nPublic Sub rewind()nn    v_long = v_long_originn    v_initial = v_initial_originn    lamda = lamda_originn    eta = eta_originn    rho = rho_originnnEnd SubnnnPublic Sub bump_param(inx As Integer)nnOn Error GoTo ErrorHandlernnn    v_long = bump_parameters(inx).v_longn    v_initial = bump_parameters(inx).v_initialn    lamda = bump_parameters(inx).lamdan    eta = bump_parameters(inx).etan    rho = bump_parameters(inx).rhon    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsHestonParameter.bump_param :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn                nnnEnd Sub