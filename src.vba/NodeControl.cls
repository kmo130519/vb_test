Option ExplicitnnPublic Function ToBinary(ByVal n As Long) As StringnnDim temp As StringnnOn Error GoTo ErrorHandlernn    If Int(n) <> n Or n < 0 Thenn    n        MsgBox "INPUT MUST BE NONNEGATIVE INTEGER"n        Exit Functionn        n    End Ifn    n    temp = ""n    n    Don    n        temp = CStr(n Mod 2) & tempnn        n = n \ 2nn    Loop While n > 0n    n    ToBinary = tempn    nExit FunctionnnErrorHandler:n    n    MsgBox "ERROR IN BINARY FUNCTION " & Err.descriptionn    Exit FunctionnnEnd FunctionnnPublic Sub ToSeries( _nByVal Dimension As Long, _nByRef Series() As Long, _nByRef nmin() As Long, _nByRef nmax() As Long)nnDim i As Longnn    ReDim Series(0 To Dimension) As Longn    n    Series(0) = 1n    n    For i = 1 To Dimensionn    n        Series(i) = Series(i - 1) * (nmax(i) - nmin(i) + 1)n    n    Next innEnd SubnnPublic Sub ToSeries2( _nByVal Dimension As Long, _nByRef Series() As Long, _nByRef SeriesNode() As Long, _nByRef nmin() As Long, _nByRef nmax() As Long)nnDim i As LongnDim j As LongnDim Node() As Longnn    ReDim Series(0 To Dimension) As Longn    n    Series(0) = 1n    n    For i = 1 To Dimensionn    n        Series(i) = Series(i - 1) * (nmax(i) - nmin(i) + 1)n    n    Next in    n    ReDim SeriesNode(0 To Series(Dimension) - 1, 1 To Dimension) As Longn    n    For i = 1 To Series(Dimension) - 1n    n        Call SeqToNode(Dimension, i, Node(), Series(), nmin(), nmax())n        n        For j = 1 To Dimensionn        n            SeriesNode(i, j) = Node(j)n        n        Next jn    n    Next innEnd SubnnPublic Sub SeqToNode( _nByVal Dimension As Long, _nByVal seq As Long, _nByRef Node() As Long, _nByRef Series() As Long, _nByRef nmin() As Long, _nByRef nmax() As Long)nnDim i As LongnDim q As Longnn    ReDim Node(1 To Dimension) As Longn    n    q = seqn    n    For i = Dimension To 1 Step -1n    n        Node(i) = q \ Series(i - 1) + nmin(i)n        n        q = q Mod Series(i - 1)n    n    Next innEnd SubnnPublic Function NodeToSeq( _nByVal Dimension As Long, _nByRef Node() As Long, _nByRef Series() As Long, _nByRef nmin() As Long, _nByRef nmax() As Long) As LongnnDim i As LongnDim Lngtmp As Longn    n    For i = 1 To Dimensionn    n        Lngtmp = Lngtmp + Series(i - 1) * (Node(i) - nmin(i))n    n    Next in    n    NodeToSeq = LngtmpnnEnd Functionn'--------------------------------------------------n' Input : Point, px, dx, nmin, nmaxn' Output : Node, Ration' DESC: This function looks up the nearest node to the point which does not exceed the point.n'       The ratio is the ratio between (point - node ) / dx, in case the point does not existn'        on the node, but between nodes.n'--------------------------------------------------nPublic Function ReturnNode( _nByRef Point() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByRef Node() As Long, _nByRef Ratio() As Double) _nAs LongnnDim i As LongnDim j As LongnDim k As Longn    n'On Error GoTo ErrorHandlernn    ReDim Node(LBound(Point(), 1) To UBound(Point(), 1)) As Longn    ReDim Ratio(LBound(Point(), 1) To UBound(Point(), 1)) As Doublen    n    For i = LBound(Point(), 1) To UBound(Point(), 1)n    n        If Point(i) >= px(i, nmax(i)) Thenn                    n            Ratio(i) = 1n            Node(i) = nmax(i) - 1n        n        ElseIf Point(i) <= px(i, nmin(i)) Thenn        n            Ratio(i) = 0n            Node(i) = nmin(i)n        n        Elsen        n        'LBarrier가 Px=0에서 거리가 얼마나 되는지 계산n            k = Int(CDbl((Point(i) - px(i, nmin(i))) / dx(i, nmin(i) + 1))) + nmin(i)n            n            If k >= nmax(i) Thenn                k = nmax(i)n            End Ifn            n            If Point(i) >= px(i, k) Thenn            n                For j = k To nmax(i) - 1n                n                    If Point(i) >= px(i, j) And Point(i) < px(i, j + 1) Thenn                    n                        Ratio(i) = (Point(i) - px(i, j)) / dx(i, j + 1)n                        Node(i) = jn                        n                        Exit Forn                        n                    End Ifn                n                Next jn                n            Elsen            n                For j = k - 1 To nmin(i) Step -1n                n                    If Point(i) >= px(i, j) And Point(i) < px(i, j + 1) Thenn                    n                        Ratio(i) = (Point(i) - px(i, j)) / dx(i, j + 1)n                        Node(i) = jn                        n                        Exit Forn                        n                    End Ifn                n                Next jn            n            End Ifn                        n        End Ifn    n    Next in    n    ReturnNode = 1n    n    Exit Functionn    n'ErrorHandler:n'n'    MsgBox "ERROR IN NODE RETURN FUNCTION " & Err.Descriptionn'    ReturnNode = -1n'n'    Exit FunctionnnEnd Functionnn'Public Function ReturnNode( _n'ByRef Point() As Double, _n'ByRef Px() As Double, _n'ByRef dx() As Double, _n'ByRef Nmin() As Long, _n'ByRef Nmax() As Long, _n'ByRef Node() As Long, _n'ByRef Ratio() As Double) _n'As Longn'n'Dim i As Longn'Dim j As Longn'n'On Error GoTo ErrorHandlern'n'    ReDim Node(LBound(Point(), 1) To UBound(Point(), 1)) As Longn'    ReDim Ratio(LBound(Point(), 1) To UBound(Point(), 1)) As Doublen'n'    For i = LBound(Point(), 1) To UBound(Point(), 1)n'n'        If Point(i) >= Px(i, Nmax(i)) Thenn'n'            Ratio(i) = 1n'            Node(i) = Nmax(i) - 1n'n'        ElseIf Point(i) <= Px(i, Nmin(i)) Thenn'n'            Ratio(i) = 0n'            Node(i) = Nmin(i)n'n'        Elsen'n'            For j = Nmin(i) To Nmax(i) - 1n'n'                If Point(i) >= Px(i, j) And Point(i) < Px(i, j + 1) Thenn'n'                    Ratio(i) = (Point(i) - Px(i, j)) / dx(i, j + 1)n'                    Node(i) = jn'n'                    Exit Forn'n'                End Ifn'n'            Next jn'n'        End Ifn'n'    Next in'n'    ReturnNode = 1n'n'    Exit Functionn'n'ErrorHandler:n'n'    MsgBox "ERROR IN NODE RETURN FUNCTION " & Err.Descriptionn'    ReturnNode = -1n'n'    Exit Functionn'n'End FunctionnnPublic Function ReturnWeight( _nByVal Dimension As Long, _nByRef Ratio() As Double, _nByRef WeightFactor() As Double _n) As LongnnDim i As LongnDim j As LongnnDim BinaryPoint() As LongnnDim Strtemp As StringnnOn Error GoTo ErrorHandlern    n    ReDim BinaryPoint(0 To 2 ^ (Dimension) - 1, 1 To Dimension) As Longn    ReDim WeightFactor(0 To 2 ^ (Dimension) - 1) As Doublen    n    For i = 0 To 2 ^ (Dimension) - 1n    n        Strtemp = ToBinary(i)n        WeightFactor(i) = 1n        n        For j = 1 To Len(Strtemp)n        n            BinaryPoint(i, j) = CLng(Mid(Strtemp, Len(Strtemp) + 1 - j, 1))n            n        Next jn        n        For j = Len(Strtemp) + 1 To Dimensionn        n            BinaryPoint(i, j) = 0n    n        Next jn    n        For j = 1 To Dimensionn            n            WeightFactor(i) = _n            WeightFactor(i) * ((1 - BinaryPoint(i, j)) * (1 - Ratio(j)) + BinaryPoint(i, j) * Ratio(j))n        n        Next jnn    Next in    n    ReturnWeight = 1n    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN BinaryPoint FUNCTION " & Err.descriptionn    n    ReturnWeight = -1nnEnd FunctionnnPublic Sub GetNodeValue( _nByVal Dimension As Long, _nByRef Node() As Long, _nByRef ResultVector() As Double, _nByVal InPutVal As Double _n)nnOn Error GoTo ErrorHandlern    n    Select Case Dimensionn    n        Case 1n        n            ResultVector(Node(1)) = InPutValn        n        Case 2n        n            ResultVector(Node(1), Node(2)) = InPutValn        n        Case 3n        n            ResultVector(Node(1), Node(2), Node(3)) = InPutValn        n        Case Elsen        n            MsgBox "OVER DIMENSION LIMIT"n            n            Exit Subn        n    End Selectn    n    Exit Subn    nErrorHandler:nn    MsgBox "ERROR IN VALUE INSERT AT NODE " & Err.descriptionn    n    Exit SubnnEnd SubnnPublic Function ReturnNodeValue( _nByRef Node() As Long, _nByRef ResultVector() As Double _n) As Doublen        nDim Dimension As LongnnOn Error GoTo ErrorHandlernn    Dimension = UBound(Node(), 1) - LBound(Node(), 1) + 1n    n    Select Case Dimensionn    n        Case 1n        n            ReturnNodeValue = ResultVector(Node(1))n        n        Case 2n        n            ReturnNodeValue = ResultVector(Node(1), Node(2))n        n        Case 3n        n            ReturnNodeValue = ResultVector(Node(1), Node(2), Node(3))n        n        Case Elsen        n            MsgBox "OVER DIMENSION LIMIT"n            n            ReturnNodeValue = -1n            n            Exit Functionn        n    End Selectn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN VALUE RETURN AT NODE " & Err.descriptionn    n    ReturnNodeValue = -1n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnValue( _nByRef Point() As Double, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long _n) As DoublennDim i As LongnDim j As LongnnDim Node() As LongnDim Nodetemp() As LongnDim Ratio() As DoublennDim Dimension As LongnDim baseIndex As LongnnDim BinaryPoint() As LongnDim WeightFactor() As DoublennDim Strtemp As StringnDim Dbltemp As Doublen        n'On Error GoTo ErrorHandlernn    Dimension = UBound(Point(), 1) - LBound(Point(), 1) + 1n    baseIndex = LBound(Point(), 1)n    n    i = ReturnNode(Point(), px(), dx(), nmin(), nmax(), Node(), Ratio())n        n    ReDim Nodetemp(LBound(Node(), 1) To UBound(Node(), 1)) As Longn            n    Dbltemp = 0nn    ReDim BinaryPoint(0 To 2 ^ (Dimension) - 1, 1 To Dimension) As Longn    ReDim WeightFactor(0 To 2 ^ (Dimension) - 1) As Doublenn    For i = 0 To 2 ^ (Dimension) - 1n    n        Strtemp = ToBinary(i)n        WeightFactor(i) = 1nn        For j = 1 To Len(Strtemp)nn            BinaryPoint(i, j) = CLng(Strings.Mid(Strtemp, Len(Strtemp) + 1 - j, 1))nn        Next jnn        For j = Len(Strtemp) + 1 To Dimensionnn            BinaryPoint(i, j) = 0nn        Next jnn        For j = 1 To Dimensionnn            Nodetemp(baseIndex + j - 1) = Node(baseIndex + j - 1) + BinaryPoint(i, j)nn            WeightFactor(i) = _n            WeightFactor(i) * ((1 - BinaryPoint(i, j)) * (1 - Ratio(j)) + BinaryPoint(i, j) * Ratio(j))nn        Next jn        n        Dbltemp = Dbltemp + WeightFactor(i) * ReturnNodeValue(Nodetemp(), ResultVector())n    n    Next in    n    ReturnValue = Dbltempn    n    Exit Functionn    n'ErrorHandler:n'n'    MsgBox "ERROR IN VALUE RETURN FUNCTION " & Err.Descriptionn'n'    ReturnValue = -1n'n'    Exit FunctionnnEnd FunctionnnPublic Function ReturnNodeTangent( _nByRef Node() As Long, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis As Long, _nOptional ByVal Direction As Long = 0, _nOptional ByVal NodeStep As Long = 1 _n) As DoublennDim i As LongnDim j As LongnnDim UNode() As LongnDim DNode() As LongnnDim Dimension As LongnDim baseIndex As LongnnDim ULength As DoublenDim DLength As DoublennDim UValue As DoublenDim DValue As DoublennDim temp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Node(), 1) - LBound(Node(), 1) + 1n    baseIndex = LBound(Node(), 1)n        n    ReDim UNode(LBound(Node(), 1) To UBound(Node(), 1)) As Longn    ReDim DNode(LBound(Node(), 1) To UBound(Node(), 1)) As Longn    n    For i = 1 To Dimensionn    n        UNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n        DNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n    n    Next in    n    If Node(baseIndex + Axis - 1) >= nmax(Axis) - NodeStep + 1 Thenn    n        DNode(baseIndex + Axis - 1) = nmax(Axis) - NodeStepn        n        temp = ReturnNodeTangent(DNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis, Direction, NodeStep)n        n        ReturnNodeTangent = tempn        n    ElseIf Node(baseIndex + Axis - 1) <= nmin(Axis) + NodeStep - 1 Thenn    n        UNode(baseIndex + Axis - 1) = nmin(Axis) + NodeStepn        n        temp = ReturnNodeTangent(UNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis, Direction, NodeStep)n        n        ReturnNodeTangent = tempn        n    Elsenn        ULength = px(Axis, Node(baseIndex + Axis - 1) + NodeStep) - px(Axis, Node(baseIndex + Axis - 1))n        DLength = px(Axis, Node(baseIndex + Axis - 1)) - px(Axis, Node(baseIndex + Axis - 1) - NodeStep)n    n        Select Case Directionn        n            Case -1n            n                DNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) - NodeStepn                n                UValue = ReturnNodeValue(UNode(), ResultVector())n                DValue = ReturnNodeValue(DNode(), ResultVector())n            n                ReturnNodeTangent = (UValue - DValue) / DLengthn            n            Case 0n            n                DNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) - NodeStepn                UNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) + NodeStepn                n                UValue = ReturnNodeValue(UNode(), ResultVector())n                DValue = ReturnNodeValue(DNode(), ResultVector())n            n                ReturnNodeTangent = _n                DLength * UValue / (ULength * (ULength + DLength)) + _n                (ULength - DLength) * ReturnNodeValue(Node(), ResultVector()) / (ULength * DLength) - _n                ULength * DValue / (DLength * (ULength + DLength))n            n            Case 1n            n                UNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) + NodeStepn                n                UValue = ReturnNodeValue(UNode(), ResultVector())n                DValue = ReturnNodeValue(DNode(), ResultVector())n            n                ReturnNodeTangent = (UValue - DValue) / ULengthn            n            Case Elsen            n                MsgBox "CHECK DIFFERENTIAL DIRECTION"n                n                ReturnNodeTangent = -99n        n        End Selectn        n    End Ifn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN RETURN TANGENT AT NODE " & Err.descriptionn    n    ReturnNodeTangent = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnTangent( _nByRef Point() As Double, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis As Long, _nOptional ByVal Direction As Long = 0, _nOptional ByVal NodeStep As Long = 1 _n) As DoublennDim i As LongnDim j As LongnnDim Node() As LongnDim Nodetemp() As LongnDim Ratio() As DoublennDim Dimension As LongnDim baseIndex As LongnnDim BinaryPoint() As LongnDim WeightFactor() As DoublennDim Strtemp As StringnDim Dbltemp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Point(), 1) - LBound(Point(), 1) + 1n    baseIndex = LBound(Point(), 1)n    n    i = ReturnNode(Point(), px(), dx(), nmin(), nmax(), Node(), Ratio())n        n    ReDim Nodetemp(LBound(Node()) To UBound(Node())) As Longn    ReDim BinaryPoint(0 To 2 ^ (Dimension) - 1, 1 To Dimension) As Longn    ReDim WeightFactor(0 To 2 ^ (Dimension) - 1) As Doublen    n    Dbltemp = 0n    n    For i = 0 To 2 ^ (Dimension) - 1n    n        Strtemp = ToBinary(i)n        WeightFactor(i) = 1n        n        For j = 1 To Len(Strtemp)n        n            BinaryPoint(i, j) = CLng(Strings.Mid(Strtemp, Len(Strtemp) + 1 - j, 1))n            n        Next jn        n        For j = Len(Strtemp) + 1 To Dimensionn        n            BinaryPoint(i, j) = 0n    n        Next jn    n        For j = 1 To Dimensionn        n            Nodetemp(baseIndex + j - 1) = Node(baseIndex + j - 1) + BinaryPoint(i, j)n            n            WeightFactor(i) = _n            WeightFactor(i) * ((1 - BinaryPoint(i, j)) * (1 - Ratio(j)) + BinaryPoint(i, j) * Ratio(j))n        n        Next jn        n        Dbltemp = Dbltemp + WeightFactor(i) * _n        ReturnNodeTangent(Nodetemp(), ResultVector(), px(), dx(), nmin(), nmax(), Axis, Direction, NodeStep)n    n    Next in    n    ReturnTangent = Dbltempn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN TANGENT RETURN FUNCTION " & Err.descriptionn    n    ReturnTangent = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnNodeConvexity( _nByRef Node() As Long, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis As Long, _nOptional ByVal NodeStep As Long = 1 _n) As DoublennDim i As LongnDim j As LongnnDim UNode() As LongnDim DNode() As LongnnDim Dimension As LongnDim baseIndex As LongnnDim ULength As DoublenDim DLength As DoublennDim UValue As DoublenDim DValue As DoublennDim temp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Node(), 1) - LBound(Node(), 1) + 1n    baseIndex = LBound(Node(), 1)n        n    ReDim UNode(LBound(Node()) To UBound(Node())) As Longn    ReDim DNode(LBound(Node()) To UBound(Node())) As Longn    n    For i = 1 To Dimensionn    n        UNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n        DNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n    n    Next in    n    If Node(baseIndex + Axis - 1) >= nmax(Axis) - NodeStep + 1 Thenn    n        DNode(baseIndex + Axis - 1) = nmax(Axis) - NodeStepn        n        temp = ReturnNodeConvexity(DNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis, NodeStep)n        n        ReturnNodeConvexity = tempn        n    ElseIf Node(baseIndex + Axis - 1) <= nmin(Axis) + NodeStep - 1 Thenn    n        UNode(baseIndex + Axis - 1) = nmin(Axis) + NodeStepn        n        temp = ReturnNodeConvexity(UNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis, NodeStep)n        n        ReturnNodeConvexity = tempn        n    Elsen    n        ULength = px(Axis, Node(baseIndex + Axis - 1) + NodeStep) - px(Axis, Node(baseIndex + Axis - 1))n        DLength = px(Axis, Node(baseIndex + Axis - 1)) - px(Axis, Node(baseIndex + Axis - 1) - NodeStep)n            n        DNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) - NodeStepn        UNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) + NodeStepn        n        UValue = ReturnNodeValue(UNode(), ResultVector())n        DValue = ReturnNodeValue(DNode(), ResultVector())n        n        ReturnNodeConvexity = _n        2 * UValue / (ULength * (ULength + DLength)) - _n        2 * ReturnNodeValue(Node(), ResultVector()) / (ULength * DLength) + _n        2 * DValue / (DLength * (ULength + DLength))n        n    End Ifn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN RETURN CONVEXITY AT NODE " & Err.descriptionn    n    ReturnNodeConvexity = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnConvexity( _nByRef Point() As Double, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis As Long, _nOptional ByVal NodeStep As Long = 1 _n) As DoublennDim i As LongnDim j As LongnnDim Node() As LongnDim Nodetemp() As LongnDim Ratio() As DoublennDim Dimension As LongnDim baseIndex As LongnnDim BinaryPoint() As LongnDim WeightFactor() As DoublennDim Strtemp As StringnDim Dbltemp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Point(), 1) - LBound(Point(), 1) + 1n    baseIndex = LBound(Point(), 1)n    n    i = ReturnNode(Point(), px(), dx(), nmin(), nmax(), Node(), Ratio())n        n    ReDim Nodetemp(LBound(Node()) To UBound(Node())) As Longn    ReDim BinaryPoint(0 To 2 ^ (Dimension) - 1, 1 To Dimension) As Longn    ReDim WeightFactor(0 To 2 ^ (Dimension) - 1) As Doublen    n    Dbltemp = 0n    n    For i = 0 To 2 ^ (Dimension) - 1n    n        Strtemp = ToBinary(i)n        WeightFactor(i) = 1n        n        For j = 1 To Len(Strtemp)n        n            BinaryPoint(i, j) = CLng(Strings.Mid(Strtemp, Len(Strtemp) + 1 - j, 1))n            n        Next jn        n        For j = Len(Strtemp) + 1 To Dimensionn        n            BinaryPoint(i, j) = 0n    n        Next jn    n        For j = 1 To Dimensionn        n            Nodetemp(baseIndex + j - 1) = Node(baseIndex + j - 1) + BinaryPoint(i, j)n            n            WeightFactor(i) = _n            WeightFactor(i) * ((1 - BinaryPoint(i, j)) * (1 - Ratio(j)) + BinaryPoint(i, j) * Ratio(j))n        n        Next jn        n        Dbltemp = Dbltemp + WeightFactor(i) * _n        ReturnNodeConvexity(Nodetemp(), ResultVector(), px(), dx(), nmin(), nmax(), Axis, NodeStep)n    n    Next in    n    ReturnConvexity = Dbltempn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN CONVEXITY RETURN FUNCTION " & Err.descriptionn    n    ReturnConvexity = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnNodeMixedDeriv( _nByRef Node() As Long, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis1 As Long, _nByVal Axis2 As Long, _nOptional ByVal NodeStep As Long = 1 _n) As DoublennDim i As LongnDim j As LongnnDim UNode() As LongnDim DNode() As LongnnDim Dimension As LongnDim baseIndex As LongnnDim ULength As DoublenDim DLength As DoublennDim UValue As DoublenDim DValue As DoublennDim temp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Node(), 1) - LBound(Node(), 1) + 1n    baseIndex = LBound(Node(), 1)n        n    ReDim UNode(LBound(Node()) To UBound(Node())) As Longn    ReDim DNode(LBound(Node()) To UBound(Node())) As Longn    n    For i = 1 To Dimensionn    n        UNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n        DNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n    n    Next in    n    If Node(baseIndex + Axis1 - 1) >= nmax(Axis1) - NodeStep + 1 Thennn        DNode(baseIndex + Axis1 - 1) = nmax(Axis1) - NodeStepnn        temp = ReturnNodeMixedDeriv(DNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis1, Axis2, NodeStep)nn        ReturnNodeMixedDeriv = tempn        n    ElseIf Node(baseIndex + Axis2 - 1) >= nmax(Axis2) - NodeStep + 1 Thenn    n         DNode(baseIndex + Axis2 - 1) = nmax(Axis2) - NodeStepnn        temp = ReturnNodeMixedDeriv(DNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis1, Axis2, NodeStep)nn        ReturnNodeMixedDeriv = tempnn    ElseIf Node(baseIndex + Axis1 - 1) <= nmin(Axis1) + NodeStep - 1 Thennn        UNode(baseIndex + Axis1 - 1) = nmin(Axis1) + NodeStepnn        temp = ReturnNodeMixedDeriv(UNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis1, Axis2, NodeStep)nn        ReturnNodeMixedDeriv = tempnn    ElseIf Node(baseIndex + Axis2 - 1) <= nmin(Axis2) + NodeStep - 1 Thennn        UNode(baseIndex + Axis2 - 1) = nmin(Axis2) + NodeStepnn        temp = ReturnNodeMixedDeriv(UNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis1, Axis2, NodeStep)nn        ReturnNodeMixedDeriv = tempnn    Elsen    n    n        ULength = px(Axis1, Node(baseIndex + Axis1 - 1) + 1) - px(Axis1, Node(baseIndex + Axis1 - 1))n        DLength = px(Axis1, Node(baseIndex + Axis1 - 1)) - px(Axis1, Node(baseIndex + Axis1 - 1) - 1)n        n        UNode(baseIndex + Axis1 - 1) = Node(baseIndex + Axis1 - 1) + 1n        DNode(baseIndex + Axis1 - 1) = Node(baseIndex + Axis1 - 1) - 1n        n        UValue = ReturnNodeTangent(UNode(), ResultVector(), px(), dx(), nmin(), nmax(), Axis2, 0, 1)n        DValue = ReturnNodeTangent(DNode(), ResultVector(), px(), dx(), nmin(), nmax(), Axis2, 0, 1)n    n        ReturnNodeMixedDeriv = _n        DLength * UValue / (ULength * (ULength + DLength)) + _n        (ULength - DLength) * ReturnNodeTangent(Node(), ResultVector(), px(), dx(), nmin(), nmax(), Axis2, 0, 1) / (ULength * DLength) - _n        ULength * DValue / (DLength * (ULength + DLength))n        n    End Ifn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN RETURN CONVEXITY AT NODE " & Err.descriptionn    n    ReturnNodeMixedDeriv = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnMixedDeriv( _nByRef Point() As Double, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis1 As Long, _nByVal Axis2 As Long _n) As DoublennDim i As LongnDim j As LongnnDim Node() As LongnDim Nodetemp() As LongnDim Ratio() As DoublennDim NodeTangent() As DoublennDim Dimension As LongnDim baseIndex As LongnnDim BinaryPoint() As LongnDim WeightFactor() As DoublennDim Strtemp As StringnDim Dbltemp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Point(), 1) - LBound(Point(), 1) + 1n    baseIndex = LBound(Point(), 1)n    n    i = ReturnNode(Point(), px(), dx(), nmin(), nmax(), Node(), Ratio())n        n    ReDim Nodetemp(LBound(Node()) To UBound(Node())) As Longn    ReDim BinaryPoint(0 To 2 ^ (Dimension) - 1, 1 To Dimension) As Longn    ReDim WeightFactor(0 To 2 ^ (Dimension) - 1) As Doublen    n    Dbltemp = 0n    n    For i = 0 To 2 ^ (Dimension) - 1n    n        Strtemp = ToBinary(i)n        WeightFactor(i) = 1n        n        For j = 1 To Len(Strtemp)n        n            BinaryPoint(i, j) = CLng(Strings.Mid(Strtemp, Len(Strtemp) + 1 - j, 1))n            n        Next jn        n        For j = Len(Strtemp) + 1 To Dimensionn        n            BinaryPoint(i, j) = 0n    n        Next jn    n        For j = 1 To Dimensionn        n            Nodetemp(baseIndex + j - 1) = Node(baseIndex + j - 1) + BinaryPoint(i, j)n            n            WeightFactor(i) = _n            WeightFactor(i) * ((1 - BinaryPoint(i, j)) * (1 - Ratio(j)) + BinaryPoint(i, j) * Ratio(j))n        n        Next jn        n        Dbltemp = Dbltemp + WeightFactor(i) * _n        ReturnNodeMixedDeriv(Nodetemp(), ResultVector(), px(), dx(), nmin(), nmax(), Axis1, Axis2)n    n    Next in    n    ReturnMixedDeriv = Dbltempn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN CONVEXITY RETURN FUNCTION " & Err.descriptionn    n    ReturnMixedDeriv = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnNodeThirdMoment( _nByRef Node() As Long, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis As Long _n) As DoublennDim i As LongnDim j As LongnnDim UNode() As LongnDim DNode() As LongnnDim Dimension As LongnDim baseIndex As LongnnDim ULength As DoublenDim DLength As DoublennDim UValue As DoublenDim DValue As DoublennDim temp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Node(), 1) - LBound(Node(), 1) + 1n    baseIndex = LBound(Node(), 1)n        n    ReDim UNode(LBound(Node()) To UBound(Node())) As Longn    ReDim DNode(LBound(Node()) To UBound(Node())) As Longn    n    For i = 1 To Dimensionn    n        UNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n        DNode(baseIndex + i - 1) = Node(baseIndex + i - 1)n    n    Next in    n    If Node(baseIndex + Axis - 1) >= nmax(Axis) - 1 Thenn    n        DNode(baseIndex + Axis - 1) = nmax(Axis) - 2n        n        temp = ReturnNodeThirdMoment(DNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis)n        n        ReturnNodeThirdMoment = tempn        n    ElseIf Node(baseIndex + Axis - 1) <= nmin(Axis) + 1 Thenn    n        UNode(baseIndex + Axis - 1) = nmin(Axis) + 2n        n        temp = ReturnNodeThirdMoment(UNode(), ResultVector, px(), dx(), nmin(), nmax(), Axis)n        n        ReturnNodeThirdMoment = tempn        n    Elsen    n        ULength = px(Axis, Node(baseIndex + Axis - 1) + 1) - px(Axis, Node(baseIndex + Axis - 1))n        DLength = px(Axis, Node(baseIndex + Axis - 1)) - px(Axis, Node(baseIndex + Axis - 1) - 1)n            n        DNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) - 1n        UNode(baseIndex + Axis - 1) = Node(baseIndex + Axis - 1) + 1n        n        UValue = ReturnNodeConvexity(UNode(), ResultVector(), px(), dx(), nmin(), nmax(), Axis, 1)n        DValue = ReturnNodeConvexity(DNode(), ResultVector(), px(), dx(), nmin(), nmax(), Axis, 1)n        n        ReturnNodeThirdMoment = (UValue - DValue) / (ULength + DLength)n        n    End Ifn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN RETURN THIRD MOMENT AT NODE " & Err.descriptionn    n    ReturnNodeThirdMoment = -99n    n    Exit FunctionnnEnd FunctionnnPublic Function ReturnThirdMoment( _nByRef Point() As Double, _nByRef ResultVector() As Double, _nByRef px() As Double, _nByRef dx() As Double, _nByRef nmin() As Long, _nByRef nmax() As Long, _nByVal Axis As Long _n) As DoublennDim i As LongnDim j As LongnnDim Node() As LongnDim Nodetemp() As LongnDim Ratio() As DoublennDim Dimension As LongnDim baseIndex As LongnnDim BinaryPoint() As LongnDim WeightFactor() As DoublennDim Strtemp As StringnDim Dbltemp As Doublen        nOn Error GoTo ErrorHandlernn    Dimension = UBound(Point(), 1) - LBound(Point(), 1) + 1n    baseIndex = LBound(Point(), 1)n    n    i = ReturnNode(Point(), px(), dx(), nmin(), nmax(), Node(), Ratio())n        n    ReDim Nodetemp(LBound(Node()) To UBound(Node())) As Longn    ReDim BinaryPoint(0 To 2 ^ (Dimension) - 1, 1 To Dimension) As Longn    ReDim WeightFactor(0 To 2 ^ (Dimension) - 1) As Doublen    n    Dbltemp = 0n    n    For i = 0 To 2 ^ (Dimension) - 1n    n        Strtemp = ToBinary(i)n        WeightFactor(i) = 1n        n        For j = 1 To Len(Strtemp)n        n            BinaryPoint(i, j) = CLng(Mid(Strtemp, Len(Strtemp) + 1 - j, 1))n            n        Next jn        n        For j = Len(Strtemp) + 1 To Dimensionn        n            BinaryPoint(i, j) = 0n    n        Next jn    n        For j = 1 To Dimensionn        n            Nodetemp(baseIndex + j - 1) = Node(baseIndex + j - 1) + BinaryPoint(i, j)n            n            WeightFactor(i) = _n            WeightFactor(i) * ((1 - BinaryPoint(i, j)) * (1 - Ratio(j)) + BinaryPoint(i, j) * Ratio(j))n        n        Next jn        n        Dbltemp = Dbltemp + WeightFactor(i) * _n        ReturnNodeThirdMoment(Nodetemp(), ResultVector(), px(), dx(), nmin(), nmax(), Axis)n    n    Next in    n    ReturnThirdMoment = Dbltempn    n    Exit Functionn    nErrorHandler:nn    MsgBox "ERROR IN CONVEXITY RETURN FUNCTION " & Err.descriptionn    n    ReturnThirdMoment = -99n    n    Exit FunctionnnEnd Function