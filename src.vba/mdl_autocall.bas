Option Explicitnn'Const NUM_UA As Integer = 16nn'Private Declare Function GetTickCount Lib "kernel32.dll" () As LongnPrivate pricer_deal_index__ As IntegernnPublic Sub cmd_calc_ac_price(ByVal deal_ticket As clsACDealTicket, ByVal market_set As clsMarketSet, Optional ByRef greeks As clsGreeks = Null)nn    'Dim greeks As New clsGreeksn    'Dim tStart As Longn    n    'Dim deal_ticket As clsACDealTicketn    n    'Dim market As clsMarketn    'Dim market_set As clsMarketSetn    n    'Dim bump_greek As Booleann    'Dim bump_greek_set As clsGreekSetnnOn Error GoTo ErrorHandlern    n    'Set deal_ticket = read_ac_deal_ticket()n    n    'bump_greek = (shtACPricer.Range("bump_greek").value = "Y")n    n   n    '-------------------------n    ' 1 Index : Pricing w/ Stoc.Voln    '-------------------------n'    If deal_ticket.no_of_ul = 1 And deal_ticket.vol_scheme_type = 0 Thenn'n'        read_market s, rate_curve, div_schedule, heston_param, prev_sn'n'        Set market = New clsMarketn'        market.set_market rate_curve, s, div_schedule, heston_paramn'n'        bump_greek = (shtACPricer.Range("bump_greek").value = "Y")n'        'mid_day_greek = (shtACPricer.range("mid_day_greek").value = "Y")n'n'        run_ac_pricing greeks, deal_ticket, market, last_node, bump_greek ', , , mid_day_greekn'    'theta_adjustment greeks, deal_ticket.current_date, deal_ticket.current_date + 1n'        display_greeks greeksn'n'    Elsen    '-------------------------n    ' 2 Indices : Pricing w/ local Voln    '-------------------------n        n        'Set market_set = read_market_set(deal_ticket.ccy)n        Dim pricing_mode As Stringn        n'        If deal_ticket.isLeveraged Or deal_ticket.no_of_ul >= 3 Thenn'            '기초자산이 레버리지 지수를 포함하거나 기초자산이 3개 이상인 경우n'            pricing_mode = "MC"n'        Elsen'            '스트레스테스트 일 경우는 MCn'            If shtMarket.Range("SCENARIO_ENABLE") = False Thenn'                pricing_mode = "FDM"n'            Elsen'                pricing_mode = "MC"n'            End Ifn'        End Ifn        'local correaltion 적용하면서 무조건 MC 적용 2019.3.27n        pricing_mode = "MC"n            n        Select Case pricing_moden        Case "FDM":n            run_ac_pricing_fdm greeks, deal_ticket, market_set _n                                , shtACPricer.Range("chkDeltaGamma").value _n                                , shtACPricer.Range("chkStickyMoneynessDeltaGamma").value _n                                , shtACPricer.Range("chkStickyStrikeDelta").value _n                                , shtACPricer.Range("chkCrossGamma").value _n                                , shtACPricer.Range("chkVega").value _n                                , shtACPricer.Range("chkTermVega").value _n                                , shtACPricer.Range("chkSkew").value _n                                , shtACPricer.Range("chkCorr").value _n                                , shtACPricer.Range("chkRho").value _n                                , shtACPricer.Range("chkTheta").valuen                                n        Case "MC"n            run_ac_pricing_mc greeks, deal_ticket, market_set _n                                , shtACPricer.Range("chkDeltaGamma").value _n                                , shtACPricer.Range("chkStickyMoneynessDeltaGamma").value _n                                , shtACPricer.Range("chkStickyStrikeDelta").value _n                                , shtACPricer.Range("chkCrossGamma").value _n                                , shtACPricer.Range("chkVega").value _n                                , shtACPricer.Range("chkTermVega").value _n                                , shtACPricer.Range("chkSkew").value _n                                , shtACPricer.Range("chkCorr").value _n                                , shtACPricer.Range("chkRho").value _n                                , shtACPricer.Range("chkTheta").value _n                                , shtACPricer.Range("chkLocalCorrelation").valuen        End Selectn        n'        Select Case deal_ticket.no_of_uln'        Case 1:n'            run_ac_pricing_1d greeks, deal_ticket, market_set, bump_greek_set _n'                            , shtACPricer.Range("chkVega").value _n'                            , shtACPricer.Range("chkSkew").value _n'                            , shtACPricer.Range("chkCorr").value _n'                            , shtACPricer.Range("chkRho").value _n'                            , _n'                            , _n'                            , shtACPricer.Range("chkBump").valuen'        Case 2:n'            run_ac_pricing_2d greeks, deal_ticket, market_set, bump_greek_set _n'                            , shtACPricer.Range("chkVega").value _n'                            , shtACPricer.Range("chkSkew").value _n'                            , shtACPricer.Range("chkCorr").value _n'                            , shtACPricer.Range("chkRho").value _n'                            , _n'                            , _n'                            , shtACPricer.Range("chkSnapshot").value _n'                            , shtACPricer.Range("chkBump").value _n'                            , shtACPricer.Range("chkDelta").value _n'                            , shtACPricer.Range("chkTermVega").valuen'n'        Case 3:n'            run_ac_pricing_3d greeks, deal_ticket, market_set, bump_greek_set _n'                            , shtACPricer.Range("chkVega").value _n'                            , shtACPricer.Range("chkSkew").value _n'                            , shtACPricer.Range("chkCorr").value _n'                            , shtACPricer.Range("chkRho").value _n'                            , shtACPricer.Range("chkTheta").value _n'                            , _n'                            , _n'                            , shtACPricer.Range("chkSnapshot").value _n'                            , shtACPricer.Range("chkBump").value _n'                            , shtACPricer.Range("chkDelta").value _n'                            , shtACPricer.Range("chkTermVega").valuen'        End Selectn        n        clear_ac_greeksn        n        display_greeks_nd greeks, deal_ticket.no_of_uln            n'    End Ifnn    'Set greeks = Nothingnn    Exit Subn    nErrorHandler:nn    raise_err "cmd_calc_ac_price", Err.descriptionnnEnd Subnn'Public Function read_market_set(base_ccy As String, Optional isPrevDate As Boolean = False) As clsMarketSetnPublic Function read_market_set(Optional riskfree_dcf_enable As Boolean = False, Optional isPrevDate As Boolean = False) As clsMarketSet '.... 2024.03.29 riskfree_dcf_enable 추가nn    Dim market_set As clsMarketSetn    nOn Error GoTo ErrorHandlernn    Set market_set = New clsMarketSetn    n    '기초자산별 시장정보n    Dim i As Integern    For i = 1 To NUM_UAn        If is_active_ua(get_ua_code(i)) = True Thenn            market_set.set_market get_ua_code(i), read_index_market(get_ua_code(i), True, isPrevDate)n        End Ifn    Next inn    '할인금리커브n    Dim rate_curve As clsRateCurven    Dim no_of_rate_dates As Integern    n    If riskfree_dcf_enable = True Then '.... 2024.03.29 riskfree_dcf_enable 추가n        Call market_set.set_pl_currency_rate_curve(DCF.KRW, read_rate_curve(shtMarket.Range("KOSPI200"), isPrevDate))n        Call market_set.set_pl_currency_rate_curve(DCF.USD, read_rate_curve(shtMarket.Range("SPX"), isPrevDate))n    Elsen        For i = 1 To NUM_DCFn            Call market_set.set_pl_currency_rate_curve(i, read_rate_curve(shtMarket.Range("DCF_" & get_dcf_ccy(i)), isPrevDate))n        Next in    End Ifn    n    Set market_set.correlation_pair_ = read_corr_set(isPrevDate)n    n    '<----- local correlation 추가 2019.3.27n    Set market_set.min_correlation_pair_ = read_min_corr_set(isPrevDate)n    '----->/n    n    Set read_market_set = market_setn    n    Set market_set = Nothingnn    Exit Functionn    nErrorHandler:nn    raise_err "read_market_set", Err.descriptionnnnEnd FunctionnnPublic Function update_market_set(ByVal market_set_yesterday As clsMarketSet, ByVal ul_code As String) As clsMarketSetn    n    '특정 지수의 변동성만 평가일로 update한다.n   nOn Error GoTo ErrorHandlern    n    Dim market_set_tmp As clsMarketSetn    Set market_set_tmp = market_set_yesterday.copy_objn    n    Dim index_name As Stringn    index_name = market_set_tmp.market_by_ul(ul_code).index_namen    n    Dim spot As Doublenn    Dim eval_date As Daten    eval_date = shtMarket.Range("market_date").valuenn    Dim sabr_surface As clsSABRSurfacen    Set sabr_surface = New clsSABRSurfacen    n    read_local_vol sabr_surface, index_name, spot, eval_daten    n    Set market_set_tmp.market(market_set_tmp.find_index(ul_code)).sabr_surface_ = sabr_surfacen    n    Set update_market_set = market_set_tmpn    n    Exit Functionn    nErrorHandler:nn    raise_err "update_market_set", Err.descriptionnnnEnd FunctionnnPublic Sub cmd_load_ac_deal()nn    Dim deal_ticket As clsACDealTicketnnOn Error GoTo ErrorHandlern    n   ' clear_dealnn    Set deal_ticket = New clsACDealTicketn    deal_ticket.asset_code = shtACPricer.Range("asset_code").Cells(1, 1).valuen    n    '--------------------------------------n    ' Load deal informationn    '--------------------------------------n    If retrieve_ac_deal(deal_ticket) Thenn    n        n        '---------------------------------------n        ' Display deal informationn        '---------------------------------------n        display_ac_deal deal_ticketn        n    Elsen    n        MsgBox "Invalid asset code"n        n    End Ifn    n    Exit Subn    nErrorHandler:nn'    show_errorn    raise_err "cmd_load_ac_deal"n    n    nEnd SubnnPublic Sub cmd_new_ac_deal()nn    Dim deal_ticket As clsACDealTicketn    nOn Error GoTo ErrorHandlern    n    'Read deal information from the deal sheetn    Set deal_ticket = read_ac_deal_ticket()n    n    'insert into the databasen    insert_ac_deal deal_ticketn    n    MsgBox "Insertion Successful!"n    n  '  cmd_load_ac_dealn    n    Exit Subn    nErrorHandler:n        n'    cmd_load_dealn    raise_err "cmd_new_ac_deal"n    nEnd SubnnnnPublic Sub display_greeks_nd(greeks As clsGreeks, no_of_ul As Integer)nn    Dim inx As Integern    Dim jnx As Integern    nOn Error Resume Nextn    n    shtACPricer.Range("price").Cells(2, 1).value = greeks.valuen    n    Dim adoCon As New adoDB.Connectionn    Call connectDB(adoCon, TNS_SERVICE_NAME, USER_ID, PASSWORD)n    n    For inx = 1 To no_of_uln        shtACPricer.Range("delta").Cells(2 * inx, 1).value = greeks.deltas(inx)n        n        shtACPricer.Range("gamma").Cells(2 * inx, inx).value = greeks.gammas(inx)n        n        shtACPricer.Range("vega").Cells(2 * inx, 1).value = greeks.vegas(inx)n        If Err.number = 9 Thenn            shtACPricer.Range("vega").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n        shtACPricer.Range("sticky_moneyness_delta").Cells(2 * inx, 1).value = greeks.sticky_moneyness_deltas(inx)n        If Err.number = 9 Thenn            shtACPricer.Range("sticky_moneyness_delta").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n        shtACPricer.Range("skew_sensitivity").Cells(2 * inx, 1).value = greeks.skew_s_s(inx)n        If Err.number = 9 Thenn            shtACPricer.Range("skew_sensitivity").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n        shtACPricer.Range("vanna").Cells(2 * inx, 1).value = greeks.vannas(inx)n        If Err.number = 9 Thenn            shtACPricer.Range("vanna").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n        shtACPricer.Range("rho_ul").Cells(2 * inx, 1).value = greeks.rho_ul(inx)n        If Err.number = 9 Thenn            shtACPricer.Range("rho_ul").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n        If (Abs(greeks.rho_ul(inx)) < 1) Or (Abs(greeks.deltas(inx)) < 1) Thenn            shtACPricer.Range("Duration").Cells(2 * inx, 1).value = 0n        Elsen            shtACPricer.Range("Duration").Cells(2 * inx, 1).value = greeks.rho_ul(inx) / (greeks.deltas(inx) * greeks.ul_prices(inx)) * 10000n        End Ifn        If Err.number = 9 Thenn            shtACPricer.Range("Duration").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n        'Skewn        Dim today As Daten        today = shtACPricer.Range("current_date")n        n        Dim tDayStr As Stringn        tDayStr = Left(CStr(today), 4) & Mid(CStr(today), 6, 2) & Right(CStr(today), 2)n        n        Dim indexid As Stringn        indexid = shtACPricer.Range("ul_code").Cells(1, inx).valuen        n        Dim td_spot As Doublen        td_spot = shtACPricer.Range("ul_spot").Cells(2 * inx, 1).valuen        n        Dim tau As Doublen        tau = shtACPricer.Range("Duration").Cells(2 * inx, 1).valuen        n        Dim iv_110 As Doublen        Dim iv_90 As Doublen        iv_110 = get_vol_on_surface(tDayStr, indexid, td_spot, tau, 1.1, "Implied", "FRONT", adoCon)n        iv_90 = get_vol_on_surface(tDayStr, indexid, td_spot, tau, 0.9, "Implied", "FRONT", adoCon)n        n        Dim skew_tau As Doublen        skew_tau = (iv_110 - iv_90) / 0.2n        n        shtACPricer.Range("skew").Cells(2 * inx, 1).value = skew_taun        If Err.number = 9 Thenn            shtACPricer.Range("skew").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifnn        shtACPricer.Range("delta_adj").Cells(2 * inx, 1).value = -0.5 * greeks.vegas(inx) * skew_tau / td_spot * 100n        If Err.number = 9 Thenn            shtACPricer.Range("delta_adj").Cells(2 * inx, 1).value = 0n        ElseIf Err.number <> 0 Thenn            raise_err "display_greeks_nd", Err.descriptionn        End Ifn        n    Next inxn    n    If no_of_ul = 2 Thenn        shtACPricer.Range("gamma").Cells(4, 1) = greeks.cross_gamma12n    ElseIf no_of_ul = 3 Thenn        shtACPricer.Range("gamma").Cells(4, 1) = greeks.cross_gamma12n        shtACPricer.Range("gamma").Cells(6, 1) = greeks.cross_gamma13n        shtACPricer.Range("gamma").Cells(6, 2) = greeks.cross_gamma23n    End Ifn    n    For inx = 1 To no_of_uln        For jnx = inx + 1 To no_of_uln            shtACPricer.Range("Corr_Sens.").Cells(jnx * 2, inx) = greeks.corr_sens(inx, jnx)n        Next jnxn        n    Next inxn    n    '-------------------------------n    '2015-10-05n'    For inx = 1 To no_of_uln'        For jnx = 1 To greeks.no_of_tenorsn'            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 1).value = greeks.term_vega(inx, jnx)n'            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 4).value = greeks.term_skew(inx, jnx)n'            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 7).value = greeks.term_conv(inx, jnx)n'        Next jnxn'    Next inxn        n    '-----------------------------------n    ' 2016-03-15n'    For inx = 1 To no_of_uln'        For jnx = 1 To greeks.no_of_tenorsn'            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 1).value = greeks.partial_vega(inx, jnx) / 100n'            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 4).value = greeks.partial_skew(inx, jnx)  '/ 100n'            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 7).value = greeks.partial_conv(inx, jnx) '/ 100n'        Next jnxn'    Next inxn    n    shtACPricer.Range("theta").Cells(2, 1).value = greeks.theta / 365n    shtACPricer.Range("rho").Cells(2, 1).value = greeks.rhonn    Call disconnectDB(adoCon)n    nEnd SubnnnPublic Sub clear_ac_greeks()n    Dim inx As Integern    Dim jnx As Integern    Const max_ul As Integer = 3n    n    shtACPricer.Range("price").Cells(2, 1).ClearContentsn    shtACPricer.Range("theta").Cells(2, 1).ClearContentsn    shtACPricer.Range("Rho").Cells(2, 1).ClearContentsn    n    For inx = 1 To max_uln        shtACPricer.Range("delta").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("sticky_moneyness_delta").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("vega").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("skew_sensitivity").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("vanna").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("rho_ul").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("duration").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("skew").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("delta_adj").Cells(2 * inx, 1).ClearContentsn        shtACPricer.Range("PriceByVolChg").Cells(2 * inx, 1).ClearContentsn    Next inxn    n    For inx = 1 To max_uln        For jnx = 1 To max_uln            shtACPricer.Range("gamma").Cells(2 * inx, jnx).ClearContentsn            shtACPricer.Range("Corr_Sens.").Cells(2 * inx, jnx).ClearContentsn        Next jnxn    Next inxn    n    n    For inx = 1 To max_uln        For jnx = 1 To shtACPricer.Range("no_of_term").valuen            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 1).ClearContentsn            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 4).ClearContentsn            shtACPricer.Range("Term_Vega_Start").Cells(jnx, inx + 7).ClearContentsn        Next jnxn    Next inxnnEnd SubnnPublic Sub clear_ac_deal()nn    shtACPricer.Range("fund_code_m").ClearContentsn    shtACPricer.Range("fund_code_c").ClearContentsn    shtACPricer.Range("ul_code").ClearContentsn    shtACPricer.Range("current_date").ClearContentsn    shtACPricer.Range("value_date").ClearContentsnn    shtACPricer.Range("settlement_date").ClearContentsn    shtACPricer.Range("notional").ClearContentsn    shtACPricer.Range("issue_cost").ClearContentsn'    shtACPricer.Range("current_notional").ClearContentsnn    shtACPricer.Range("call_put").ClearContentsn    shtACPricer.Range("dummy").ClearContentsn    shtACPricer.Range("ki_flag").ClearContentsn    shtACPricer.Range("ki_touch_flag").ClearContentsn    shtACPricer.Range("ki_barrier").ClearContentsn    shtACPricer.Range("ki_barrier").Cells(1, 3).ClearContentsn    shtACPricer.Range("ki_barrier").Cells(1, 4).ClearContentsnn    shtACPricer.Range("put_strike").ClearContentsn    shtACPricer.Range("put_participation").ClearContentsn    shtACPricer.Range("KI_Monitoring_Freq").ClearContentsn    n    shtACPricer.Range("reference").ClearContentsn    n    shtACPricer.Range("buy_sell").ClearContentsn    n    n    shtACPricer.Range("alive_yn").ClearContentsn    n    shtACPricer.Range("confirmed_yn").ClearContentsn    n    shtACPricer.Range("Rate_Spread").ClearContentsn    shtACPricer.Range("strike_shift").ClearContentsn    shtACPricer.Range("KI_Barrier_Shift").ClearContentsn    shtACPricer.Range("Hedge_Cost").ClearContentsn    shtACPricer.Range("instrument_type").ClearContentsn    shtACPricer.Range("performance_type").ClearContentsn    n    If shtACPricer.Range("no_of_schedules").value > 0 Thenn        shtACPricer.Range("schedule_start").Range("A1:g" & shtACPricer.Range("no_of_schedules").value).ClearContentsn    End Ifn    n    If shtACPricer.Range("no_of_coupon_schedule").value > 0 Thenn        shtACPricer.Range("cpn_schedule_start").Range("A1:D" & shtACPricer.Range("no_of_coupon_schedule").value).ClearContentsn    End Ifn    n     If shtACPricer.Range("no_of_floating_leg").value > 0 Thenn        shtACPricer.Range("floating_leg_start").Range("A1:D" & shtACPricer.Range("no_of_floating_leg").value).ClearContentsn    End Ifnn    nnEnd SubnnPublic Sub display_ac_deal(deal_ticket As clsACDealTicket)nn    Dim inx As Integern    Dim jnx As Integern    Const max_no_of_ul As Integer = 3n    nOn Error GoTo ErrorHandlernn    n    shtACPricer.Range("fund_code_m").value = deal_ticket.fund_code_mn    shtACPricer.Range("fund_code_c").value = deal_ticket.fund_code_cn    shtACPricer.Range("asset_code").value = deal_ticket.asset_coden    shtACPricer.Range("No_of_Underlying").value = deal_ticket.no_of_uln    n    shtACPricer.Range("current_date").value = deal_ticket.current_daten    shtACPricer.Range("value_date").value = deal_ticket.value_daten    n    shtACPricer.Range("settlement_date").value = deal_ticket.settlement_daten    n    shtACPricer.Range("call_put").value = get_ac_code_name("call_put_code", deal_ticket.call_put)n    shtACPricer.Range("dummy").value = deal_ticket.dummy_couponn    n    shtACPricer.Range("ki_flag").value = get_ac_code_name("bool_code", deal_ticket.ki_barrier_flag)n    shtACPricer.Range("ki_touch_flag").value = get_ac_code_name("bool_code", deal_ticket.ki_touched_flag)n    n    For inx = 1 To deal_ticket.no_of_uln        shtACPricer.Range("ki_barrier").Cells(1, inx).value = deal_ticket.ki_barrier(inx)n        shtACPricer.Range("ul_code").Cells(1, inx).value = deal_ticket.ul_code(inx)n    Next inxn    For inx = 1 To max_no_of_uln        shtACPricer.Range("ki_barrier").Cells(2, inx).value = "= " & shtACPricer.Range("ki_barrier").Cells(1, inx).Address & "*" & shtACPricer.Range("reference").Cells(1, inx).Addressn    Next inxn    n    shtACPricer.Range("KI_Monitoring_Freq").value = deal_ticket.ki_monitoring_freqn    n    shtACPricer.Range("floor_value").value = deal_ticket.floor_valuen    shtACPricer.Range("ki_adj_pct").value = deal_ticket.ki_adj_pctn    nn'-----n' KO Featuren'-----nn    shtACPricer.Range("put_strike").value = deal_ticket.put_striken    shtACPricer.Range("put_participation").value = deal_ticket.put_participationn    shtACPricer.Range("Put_Add_CPN").value = deal_ticket.put_additional_couponn    n    For inx = 1 To deal_ticket.no_of_uln        shtACPricer.Range("reference").Cells(1, inx).value = deal_ticket.reference_price(inx)n    Next inxn    shtACPricer.Range("notional").value = Abs(deal_ticket.notional)n    shtACPricer.Range("issue_cost").value = deal_ticket.issue_costn    n    shtACPricer.Range("Rate_Spread").value = deal_ticket.rate_spreadn    shtACPricer.Range("strike_shift").value = deal_ticket.strike_shiftn    shtACPricer.Range("KI_Barrier_Shift").value = deal_ticket.ki_barrier_shiftn    shtACPricer.Range("Hedge_Cost").value = deal_ticket.hedge_costn    n'    If deal_ticket.notional > 0 Thenn'        shtACPricer.Range("buy_sell").value = "BUY"n'    Elsen'        shtACPricer.Range("buy_sell").value = "SELL"n'    End Ifn    n'    shtacpricer.Range("comment").value = deal_ticket.commentn    n    shtACPricer.Range("txtComment").value = deal_ticket.commentn    n    For inx = 1 To deal_ticket.no_of_schedulen        n        shtACPricer.Range("schedule_start").Cells(inx, 1).value = deal_ticket.autocall_schedules(inx).call_daten        n        For jnx = 1 To deal_ticket.autocall_schedules(inx).no_of_jumpsn        n            shtACPricer.Range("schedule_start").Cells(inx, 4 + jnx).value = deal_ticket.autocall_schedules(inx).percent_strike(jnx)n            shtACPricer.Range("schedule_start").Cells(inx, 1 + jnx).value = deal_ticket.autocall_schedules(inx).coupon_on_call(jnx)n        n        Next jnxn'        For jnx = 1 To deal_ticket.no_of_uln'            shtACPricer.Range("schedule_start").Cells(inx, jnx + 3).value = "=" & shtACPricer.Range("schedule_start").Cells(inx, 3).Address & " * " & shtACPricer.Range("reference").Cells(1, jnx).Addressn'        Next jnxn    n    Next inxn    n    If deal_ticket.alive_yn = "" Thenn        shtACPricer.Range("alive_yn").value = "N"n    Elsen        shtACPricer.Range("alive_yn").value = deal_ticket.alive_ynn    End Ifn    n    If deal_ticket.confirmed_yn = "" Thenn        shtACPricer.Range("confirmed_yn").value = "N"n    Elsen        shtACPricer.Range("confirmed_yn").value = deal_ticket.confirmed_ynn    End Ifn    n    shtACPricer.Range("Monthly_Coupon_Flag").value = get_ac_code_name("bool_code", deal_ticket.monthly_coupon_flag)n    n    shtACPricer.Range("instrument_type").value = get_ac_code_name("Instrument_type_code", deal_ticket.instrument_type)n    shtACPricer.Range("performance_type").value = get_ac_code_name("performance_type_code", deal_ticket.performance_type)n    n    n    If deal_ticket.monthly_coupon_flag = 1 Thenn    n        For inx = 1 To deal_ticket.no_of_coupon_schedulen            n            shtACPricer.Range("cpn_schedule_start").Cells(inx, 1).value = deal_ticket.monthly_coupon_schedules(inx).call_daten            shtACPricer.Range("cpn_schedule_start").Cells(inx, 2).value = deal_ticket.monthly_coupon_schedules(inx).percent_striken            shtACPricer.Range("cpn_schedule_start").Cells(inx, 3).value = deal_ticket.monthly_coupon_schedules(inx).coupon_on_calln            n            For jnx = 1 To deal_ticket.no_of_uln                shtACPricer.Range("cpn_schedule_start").Cells(inx, 3 + jnx).value = "=" & Chr(65 + shtACPricer.Range("cpn_schedule_start").Column) & (shtACPricer.Range("cpn_schedule_start").Row + inx - 1) & " * " & shtACPricer.Range("reference").Cells(1, jnx).Addressn            Next jnxn        n        Next inxn        n        shtACPricer.Range("Monthly_Cpn").value = deal_ticket.monthly_coupon_amountn        n    End Ifn    n    If deal_ticket.no_of_floating_coupon_schedule > 0 Thenn    n        For inx = 1 To deal_ticket.no_of_floating_coupon_schedulen        n            shtACPricer.Range("floating_leg_start").Cells(inx, 1).value = deal_ticket.floating_coupon_dates()(inx)n            shtACPricer.Range("floating_leg_start").Cells(inx, 2).value = deal_ticket.floating_fixing_values()(inx)n        n        Next inxn    n    End Ifn    n    n    shtACPricer.Range("Range_Accrual_Flag").value = get_ac_code_name("bool_code", deal_ticket.ra_flag)n    n     shtACPricer.Range("ra_cpn").value = deal_ticket.ra_cpnn     shtACPricer.Range("ra_tenor").value = get_ac_code_name("tenor_code", deal_ticket.ra_tenor)n     shtACPricer.Range("ra_min").value = deal_ticket.ra_min_percentn     shtACPricer.Range("ra_max").value = deal_ticket.ra_max_percentn     nn    Exit Subn    nErrorHandler:nn    raise_err "display_ac_deal"n        nn'    Err.Raise vbObjectError + 1000, "display_a_deal:" & Chr(13) & Chr(13) & Err.source, Err.descriptionnnEnd Subnn'--------------------------------n' Modified onn' 2013-10-16n' 2013-10-21n' 2013-10-23n'--------------------------------nnn'Private Function get_range_cnt(from_date As Date, to_date As Date, ticker As String, range_min As Double, range_max As Double) As Integern'n'    Dim no_of_dates As Integern'    Dim base_dates() As Daten'    Dim prices() As Doublen'    Dim inx As Integern'    Dim rtn_value As Integern'n'On Error GoTo ErrorHandlern'n'    DBConnectorn'n'    rtn_value = 0n'n'    no_of_dates = retrieve_bl_history(base_dates, prices, ticker, from_date, to_date)n'n'    For inx = 1 To no_of_datesn'n'        If prices(inx) >= range_min And prices(inx) <= range_max Thenn'n'            rtn_value = rtn_value + 1n'n'        End Ifn'n'    Next inxn'n'    DBDisConnectorn'n'    get_range_cnt = rtn_valuen'n'    Exit Functionn'n'ErrorHandler:n'n'    DBDisConnectorn'n'    raise_err Err.description, "get_range_cnt"n'n'n'End Functionn'n'Private Function get_accrued_cpn(deal_ticket As clsACDealTicket, current_date As Date, rate_curve As clsRateCurve) As Doublen'n'    Dim total_days As Integern'    Dim next_schedule As clsAutocallSchedulen'    Dim prev_schedule As clsAutocallSchedulen'n'    Dim from_date As Daten'    Dim to_date As Daten'n'    Dim rtn_value As Doublen'n'    Dim ticker As Stringn'n'On Error GoTo ErrorHandlern'n'    If deal_ticket.get_next_schedule(next_schedule, current_date + 1) Thenn'        to_date = next_schedule.call_daten'    Elsen'        raise_err "get_accrued_cpn", "No Schedule"n'    End Ifn'n'    If deal_ticket.get_prev_schedule(prev_schedule, current_date + 1) Thenn'        from_date = prev_schedule.call_daten'    Elsen'        from_date = deal_ticket.value_daten'    End Ifn'n'    If deal_ticket.ul_code() = "KOSPI200" Thenn'        ticker = "KOSPI2"n'    Elsen'        ticker = deal_ticket.ul_code()n'    End Ifn'n'    rtn_value = get_range_cnt(from_date + 1, current_date, ticker, deal_ticket.ra_min_percent * deal_ticket.reference_price(), deal_ticket.ra_max_percent * deal_ticket.reference_price()) _n'              / business_days_between(from_date + 1, to_date) _n'              * deal_ticket.ra_cpn _n'              * rate_curve.get_discount_factor(current_date, to_date)n'n'    get_accrued_cpn = rtn_valuen'n'    Exit Functionn'n'ErrorHandler:n'n'    raise_err "get_accrued_cpn", Err.descriptionn'n'End FunctionnnnnnnnPublic Sub ac_deal_to_midday(ac_deals() As clsACDealTicket, ByVal no_of_deals As Integer)nn    Dim inx As Integern    n    For inx = 1 To no_of_dealsn    n        ac_deals(inx).mid_day_greek = Truen        ac_deals(inx).current_date = ac_deals(inx).current_date - 1n        ac_deals(inx).current_date_origin_ = ac_deals(inx).current_date_origin_ - 1n    n    Next inxnnnEnd SubnPublic Sub run_ac_pricing_1d(ByRef the_greeks As clsGreeks _n                        , deal_ticket As clsACDealTicket _n                        , market As clsMarketSet _n                        , ByRef bump_greek_set As clsGreekSet _n                        , Optional calc_vega As Boolean = False _n                        , Optional calc_skew_s As Boolean = False _n                        , Optional calc_corr As Boolean = False _n                        , Optional calc_rho As Boolean = False _n                        , Optional snapshot_time As Double = 0.001 _n                        , Optional ignore_smoothing As Boolean = False _n                        , Optional bump_delta As Boolean = False)nn    Dim holiday_list__(0 To 0) As Longn    holiday_list__(0) = 42000n    n    Dim theNote As Objectn    Dim theEngine As Objectn    Dim rTS As Objectn    Dim qTs As Objectn    Dim fTs As Objectn    Dim volTs As Objectn    Dim quantoHelper As Objectn    Dim process As Objectn    Dim rate_spread As Doublen    n    Dim day_shift As Longn    Dim ul_prices(1) As Doublen    n    Dim vegas(1 To 1) As Doublen    Dim vannas(1 To 1) As Doublen    Dim skew_s(1 To 1) As Doublen    Dim deltas(1 To 1) As Doublen    n    Dim rho_ul(1 To 1) As Doublen    n    Dim partial_vegas() As Doublen    n    Dim rho As Doublen    n    Dim origin_pl_currency_curve As clsRateCurven    nOn Error GoTo ErrorHandlernn    Set theNote = ac_deal_ticket_to_clr(deal_ticket)n    n    If deal_ticket.instrument_type = 0 Thenn        rate_spread = deal_ticket.rate_spreadn    End Ifn    n    day_shift = deal_ticket.current_date - market.pl_currency_rate_curve_.rate_dates()(0)n    n'    Dim tmp As Doublen'    tmp = theNote.testAutocallStriken'n    'Set rTs = New ql_handle_YieldTermStructuren    'Set fTs = New ql_handle_YieldTermStructuren    'Set qTs = New ql_handle_YieldTermStructuren    'Set volTs = New ql_handle_BlackVarianceSurfacen    n    Set rTS = get_rTs(market, rate_spread, day_shift)n'    If rTs.initializeTs(market.pl_currency_rate_curve_.rate_dates(), market.pl_currency_rate_curve_.dcfs(), rate_spread) = 0 Thenn'        raise_err "run_ac_pricing_1d", "Failed to generate rate term Structure"n'    End Ifn    n    Set qTs = get_qTs(market, deal_ticket.ul_code(), rate_spread, day_shift)n    n'    If qTs.initializeFlat(market.market_by_ul(deal_ticket.ul_code()).div_yield_ + rate_spread) = 0 Thenn'        raise_err "run_ac_pricing_1d", "Failed to generate div term Structure"n'    End Ifn    n    Set fTs = get_fTs(market, deal_ticket.ul_code(), rate_spread, day_shift)n    n'    If fTs.initializeTs(market.market_by_ul(deal_ticket.ul_code()).rate_curve_.rate_dates(), market.market_by_ul(deal_ticket.ul_code()).rate_curve_.dcfs(), rate_spread) = 0 Thenn'        raise_err "run_ac_pricing_1d", "Failed to generate rate term Structure"n'    End Ifn    n    Set quantoHelper = New ql_shared_ptr_FdmQuantoHelpern    quantoHelper.initializeQH rTS _n                            , fTs _n                            , market.market_by_ul(deal_ticket.ul_code()).ul_currency_vol _n                            , market.correlation_pair_.get_corr(deal_ticket.ul_code(), market.market_by_ul(deal_ticket.ul_code()).ul_currency & "KRW")n                            n    Set volTs = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(), day_shift)n    n'    If volTs.initializeVS(deal_ticket.current_date _n'                      , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(0, day_shift) _n'                      , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_strikes(0) _n'                      , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.get_vol_surface(0) _n'                      ) = 0 Thenn'        raise_err "run_ac_pricing_1d", "Failed to generate vol term Structure"n'    End Ifnn    Set process = New ql_shared_ptr_blackScholesMertonProcessn    process.initializeProcess market.market_by_ul(deal_ticket.ul_code()).s_, qTs, rTS, volTsn    n    Set theEngine = New sy_shared_ptr_FdAutocallableEngine1Dn    n'    theEngine.initializeEngine process _n'                             , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n'                             , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'    theEngine.initializeEngine process _n'                             , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n'                             , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen    Dim ratioDividendIn(1) As Doublen    ratioDividendIn(0) = 0n    theEngine.initializeEngine process _n                             , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                             , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendInn                             n    theNote.setPricingEngine theEnginen    n    the_greeks.value = theNote.NPV() * deal_ticket.notionaln    the_greeks.delta = theNote.delta()(0) * deal_ticket.notionaln    the_greeks.gamma = theNote.gamma()(0) * deal_ticket.notionaln    the_greeks.theta = theNote.theta() * deal_ticket.notionaln    the_greeks.ul_price = market.market_by_ul(deal_ticket.ul_code(1)).s_n    Dim tmp_delta() As Doublen    Dim tmp_gamma() As Doublen    tmp_delta = theNote.delta()n    tmp_gamma = theNote.gamma()n    the_greeks.set_all_deltas tmp_delta, 0, deal_ticket.notionaln    the_greeks.set_all_gammas tmp_gamma, 0, deal_ticket.notionaln    n    '------------------------n    ' 2015-01-05n    '------------------------n    ul_prices(1) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    the_greeks.set_all_ul_prices ul_pricesn    n    If snapshot_time >= 0 Thenn        Dim tmp_xAxis() As Doublen        Dim tmp_snapshotValues() As Doublen    n        tmp_xAxis = theNote.xAxis()n        tmp_snapshotValues = theNote.snapShotValues()n        n        the_greeks.set_xAxis tmp_xAxis, True, deal_ticket.reference_price(1)n        the_greeks.set_snapshot_value tmp_snapshotValues, Abs(deal_ticket.notional)n    End Ifn    n    '======================================================n    ' VEGAn    '======================================================nn    If calc_vega Thenn    n        market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.bump_vol_surface 0.01n        n        Set volTs = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(), day_shift)n'        If volTs.initializeVS(deal_ticket.current_date _n'                          , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(0) _n'                          , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_strikes(0) _n'                          , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.get_vol_surface(0) _n'                          ) = 0 Thenn'            raise_err "run_ac_pricing_1d", "Failed to generate vol term Structure"n'        End Ifnn        process.initializeProcess market.market_by_ul(deal_ticket.ul_code()).s_, qTs, rTS, volTsn        n'        theEngine.initializeEngine process _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date) _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.scheme_type, deal_ticket.strike_shift, True, quantoHelper, snapshot_timen'   <----delete deal_ticket.strike_shift---->n'        theEngine.initializeEngine process _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date) _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.scheme_type, True, quantoHelper, snapshot_timen        ratioDividendIn(0) = 0n        theEngine.initializeEngine process _n                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                                 , deal_ticket.t_grid, deal_ticket.x_grid _n                                 , deal_ticket.scheme_type _n                                 , True _n                                 , quantoHelper _n                                 , snapshot_time _n                                 , ratioDividendInn                             n        theNote.setPricingEngine theEnginen        n        the_greeks.vega = theNote.NPV() * deal_ticket.notional - the_greeks.valuen        the_greeks.vanna = theNote.delta()(0) * deal_ticket.notional - the_greeks.deltan        n        the_greeks.vega = the_greeks.vegan        the_greeks.vanna = the_greeks.vannan        n        market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.rewind_vol_bumpn        n        vegas(1) = the_greeks.vegan        vannas(1) = the_greeks.vannan        n        the_greeks.set_all_vegas vegasn        the_greeks.set_all_vannas vannasn        n    End Ifn    n'    If calc_term_vega Thenn'    End Ifn    n    If calc_skew_s Thenn    n        market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.bump_skew -0.01n        n        Set volTs = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(), day_shift)n'        If volTs.initializeVS(deal_ticket.current_date _n'                          , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(0) _n'                          , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_strikes(0) _n'                          , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.get_vol_surface(0) _n'                          ) = 0 Thenn'            raise_err "run_ac_pricing_1d", "Failed to generate vol term Structure"n'        End Ifn    n        process.initializeProcess market.market_by_ul(deal_ticket.ul_code()).s_, qTs, rTS, volTsn        n'        theEngine.initializeEngine process _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date) _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.scheme_type, deal_ticket.strike_shift, True, quantoHelper, snapshot_timen'   <----delete deal_ticket.strike_shift---->n'        theEngine.initializeEngine process _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date) _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.scheme_type, True, quantoHelper, snapshot_timen        ratioDividendIn(0) = 0n        theEngine.initializeEngine process _n                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                                 , deal_ticket.t_grid, deal_ticket.x_grid _n                                 , deal_ticket.scheme_type _n                                 , True _n                                 , quantoHelper _n                                 , snapshot_time _n                                 , ratioDividendInn        n        theNote.setPricingEngine theEnginen        n        the_greeks.skew_s = (theNote.NPV() * deal_ticket.notional - the_greeks.value) * -1n        n        market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.rewind_vol_bumpn        n        the_greeks.set_all_skews skew_sn        n    End Ifnn    If calc_rho Thenn    n        Dim inx As Integern        Dim tmp_greek As clsGreeksn        Dim tmp_rate_curves() As clsRateCurven        ReDim tmp_rate_curves(1 To deal_ticket.no_of_ul) As clsRateCurven     '   Dim bump_greek_set As clsGreekSetnn        Set tmp_greek = New clsGreeksn        Set origin_pl_currency_curve = market.pl_currency_rate_curve_.copy_obj()n        'Bumping DCF: +10bpn        Set market.pl_currency_rate_curve_ = market.pl_currency_rate_curve_.copy_obj(0, 0.001)n        n        '---n        run_ac_pricing_1d tmp_greek, deal_ticket, market, bump_greek_set, False, False, False, False, snapshot_time, False, Falsen        'Rho(DCF)n        rho = (tmp_greek.value - the_greeks.value) * 0.1n        n        Set market.pl_currency_rate_curve_ = origin_pl_currency_curven        n        'Rho(UL)n        'Bumping riskfree rate curve by adjusting dividend yield: +10bpn        For inx = 1 To deal_ticket.no_of_uln            n            Set tmp_greek = New clsGreeksn            Dim tmp_div_yield As Doublen            tmp_div_yield = market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_n            n            market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = tmp_div_yield - 0.001n            n            '---n            run_ac_pricing_1d tmp_greek, deal_ticket, market, bump_greek_set, False, False, False, False, snapshot_time, False, Falsen            n            rho_ul(inx) = (tmp_greek.value - the_greeks.value) * 0.1n            n            market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = tmp_div_yieldn            n        Next inxn        n        the_greeks.rho = rhon        the_greeks.set_all_rho_ul rho_uln        n    End Ifn    n'    If bump_delta Thenn'n'        market.bump_ul_price 0.001, deal_ticket.ul_code(1)n'        market.market_by_ul(deal_ticket.ul_code(1)).sabr_surface_.shift_surface market.market_by_ul(deal_ticket.ul_code(1)).s_n'n'        Set volTs = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(), day_shift)n''        If volTs.initializeVS(deal_ticket.current_date _n''                             , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(0) _n''                             , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.grid_.get_all_strikes(0) _n''                             , market.market_by_ul(deal_ticket.ul_code()).sabr_surface_.local_vol_surface.get_vol_surface(0) _n''                             ) = 0 Thenn''               raise_err "run_ac_pricing_1d", "Failed to generate vol term Structure"n''        End Ifn'n'         process.initializeProcess market.market_by_ul(deal_ticket.ul_code()).s_, qTs, rTs, volTsn'n'         theEngine.initializeEngine process _n'                                  , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date) _n'                                  , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date) _n'                                  , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.scheme_type, deal_ticket.strike_shift, True, quantoHelper, snapshot_timen'n'         theNote.setPricingEngine theEnginen'n'         the_greeks.sticky_strike_delta = (theNote.NPV() * deal_ticket.notional - the_greeks.value) / (0.001 * market.market_by_ul(deal_ticket.ul_code(1)).s_)n'n'    End Ifnn'    If deal_ticket.ra_flag Thenn'        the_greeks.value = the_greeks.value + get_accrued_cpn(deal_ticket, deal_ticket.current_date, market.market().rate_curve_) * deal_ticket.notionaln'    End Ifn'n'    If snapshot_time > 0 Then 'snapshot_time > 0 Thenn'        write_closing_file_1d "C:\log\", deal_ticket.asset_code & "." & config__.snapshot_file_extension, the_greeks.get_xAxis, the_greeks.get_snapshot_valuen'    End Ifn'n'    theNote.dispose_comn    n    Exit Subn    nErrorHandler:nn    raise_err "run_ac_pricing_1d", Err.descriptionnnEnd Subnnn'Public Function get_rTs(market As clsMarketSet, spread As Double, Optional day_shift As Long = 0) As Objectn'n'    Dim rTs As Objectn'n'On Error GoTo ErrorHandlern'n'    Set rTs = New ql_handle_YieldTermStructuren'n'    If rTs.initializeTs(market.pl_currency_rate_curve_.rate_dates_shifted(day_shift), market.pl_currency_rate_curve_.dcfs(), spread) = 0 Thenn'            raise_err "get_rTs", "Failed to generate rate term Structure"n'    End Ifn'n'    Set get_rTs = rTsn'n'    Exit Functionn'n'ErrorHandler:n'n'    raise_err "get_rTs", Err.descriptionn'n'End FunctionnnPublic Function get_rTs(pl_currency_rate_curve As clsRateCurve, spread As Double, Optional day_shift As Long = 0) As Objectnn    Dim rTS As Objectn    nOn Error GoTo ErrorHandlern    n    Set rTS = New ql_handle_YieldTermStructuren    n    If rTS.initializeTs(pl_currency_rate_curve.rate_dates_shifted(day_shift), pl_currency_rate_curve.dcfs(), spread) = 0 Thenn            raise_err "get_rTs", "Failed to generate rate term Structure"n    End Ifn    n    Set get_rTs = rTSn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_rTs", Err.descriptionnnEnd FunctionnnPublic Function get_fTs(market As clsMarketSet, ul_code As String, ByVal spread As Double, Optional day_shift As Long = 0) As Objectnn    Dim fTs As Objectn    Dim theMarket As clsMarketn    nOn Error GoTo ErrorHandlern    n    Set theMarket = market.market_by_ul(ul_code)n    Set fTs = New ql_handle_YieldTermStructuren    n    '<<<<<<<=======================================n    If spread < 0 Thenn        spread = 0n    End Ifn    n    If fTs.initializeTs(theMarket.rate_curve_.rate_dates_shifted(day_shift), theMarket.rate_curve_.dcfs(), spread) = 0 Thenn            raise_err "get_fTs", "Failed to generate rate term Structure"n    End Ifn    n    Set get_fTs = fTsn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_fTs", Err.descriptionnnEnd FunctionnnPublic Function get_aTs(market As clsMarketSet, ul_code As String, ByVal spread As Double, Optional day_shift As Long = 0) As Objectnn    Dim aTs As Objectn    Dim theMarket As clsMarketn    nOn Error GoTo ErrorHandlern    n    Set theMarket = market.market_by_ul(ul_code)n    Set aTs = New ql_handle_YieldTermStructuren    n    '<<<<<<<=======================================n    If spread < 0 Thenn        spread = 0n    End Ifn    n    If aTs.initializeTs(theMarket.drift_adjust_.rate_dates_shifted(day_shift), theMarket.drift_adjust_.dcfs(), spread) = 0 Thenn        raise_err "get_aTs", "Failed to generate rate term Structure"n    End Ifn    n    Set get_aTs = aTsn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_aTs", Err.descriptionnnEnd FunctionnnPublic Function get_qTs(market As clsMarketSet, ul_code As String, spread As Double, Optional day_shift As Long = 0) As Objectnn    Dim qTs As Objectn    Dim theMarket As clsMarketn    nOn Error GoTo ErrorHandlern    n    Set theMarket = market.market_by_ul(ul_code)n    Set qTs = New ql_handle_YieldTermStructuren    n    If qTs.initializeFlat(theMarket.div_yield_ + spread) = 0 Thenn            raise_err "get_qTs", "Failed to generate rate term Structure"n    End Ifn    n    Set get_qTs = qTsn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_qTs", Err.descriptionnnEnd Functionnn'Public Function get_quantoHelper(rTs As Object, market As clsMarketSet, ul_code As String, spread As Double) As ObjectnPublic Function get_quantoHelper(rTS As Object, market As clsMarketSet, ul_code As String, deal_ccy As String, spread As Double, day_shift As Long) As Object '2018.7.10n    Dim quantoHelper As Objectn    Dim theMarket As clsMarketn    Dim fTs As Objectn    nOn Error GoTo ErrorHandlern    n    Set theMarket = market.market_by_ul(ul_code)n    Set quantoHelper = New ql_shared_ptr_FdmQuantoHelpern    'Set fTs = get_fTs(market, ul_code, spread)n    Set fTs = get_fTs(market, ul_code, spread, day_shift) '2018.7.10n    n    'If quantoHelper.initializeQH(rTs, fTs, theMarket.ul_currency_vol, market.correlation_pair_.get_corr(ul_code, theMarket.ul_currency & "KRW")) = 0 Thenn    If quantoHelper.initializeQH(rTS, fTs, theMarket.ul_currency_vol, market.correlation_pair_.get_corr(ul_code, theMarket.ul_currency & deal_ccy)) = 0 Thenn                            n        raise_err "get_quantoHelper", "Failed to generate rate term Structure"n                            n    End Ifn        n    Set get_quantoHelper = quantoHelpern    n    Exit Functionn    nErrorHandler:nn    raise_err "get_quantoHelper", Err.descriptionnnEnd FunctionnnPublic Function get_vol_surface_(current_date As Date, market As clsMarketSet, ul_code As String, Optional ByVal day_shift As Long = 0) As Objectn    n    Dim volTs As Objectn    Dim theMarket As clsMarketn    nOn Error GoTo ErrorHandlernn    Set theMarket = market.market_by_ul(ul_code)n    Set volTs = New ql_handle_BlackVarianceSurfacen          n    'day_shift = day_shift + market.pl_currency_rate_curve_.rate_dates()(0) - theMarket.sabr_surface_.eval_daten      n    If volTs.initializeVS(current_date _n                      , theMarket.sabr_surface_.local_vol_surface.grid_.get_all_dates_as_long(0, day_shift, current_date) _n                      , theMarket.sabr_surface_.local_vol_surface.grid_.get_all_strikes(0) _n                      , theMarket.sabr_surface_.local_vol_surface.get_vol_surface(0) _n                      ) = 0 Thenn        raise_err "get_vol_surface_", "Failed to generate vol term Structure"n        n    End Ifn    n    Set get_vol_surface_ = volTsn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_vol_surface_", Err.descriptionnnEnd FunctionnnnPublic Function get_process(rTS As Object, qTs As Object, volTs As Object, market As clsMarketSet, ul_code As String) As Objectn    n    Dim process As Objectn    Dim theMarket As clsMarketn    nOn Error GoTo ErrorHandlernn    Set theMarket = market.market_by_ul(ul_code)n    Set process = New ql_shared_ptr_blackScholesMertonProcessn      n    If process.initializeProcess(theMarket.s_, qTs, rTS, volTs) = 0 Thenn        raise_err "get_process", "Failed to generate vol term Structure"n        n    End Ifn    n    Set get_process = processn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_process", Err.descriptionnnEnd Functionnn'Public Function get_div_process(rTs As Object, qTs As Object, fTs As Object, volTs As Object, market As clsMarketSet, ul_code As String, ccy As String, ratioLeverage As Double) As Objectn'day_shift 추가: 2018.12.05n'Public Function get_div_process(rTs As Object, qTs As Object, fTs As Object, volTs As Object, market As clsMarketSet, ul_code As String, ccy As String, ratioLeverage As Double, Optional day_shift As Long = 0) As Objectn'double ratio_leverage (1.0: 일반 상품, 2.0: 2배 레버리지, default=1.0) -> int code_leverage (0: 일반 상품, 1: 2배 레버리지, 2: 1.5배 레버리지, default=0) 로 변경 : 2020.6.19n'Public Function get_div_process(rTs As Object, qTs As Object, fTs As Object, volTs As Object, market As clsMarketSet, ul_code As String, CCY As String, Optional codeLeverage As Integer = 0, Optional day_shift As Long = 0) As Objectn'drift adjustment aTs 추가: 2023.11.21nPublic Function get_div_process(rTS As Object, qTs As Object, fTs As Object, aTs As Object, volTs As Object, market As clsMarketSet, ul_code As String, ccy As String, Optional codeLeverage As Integer = 0, Optional day_shift As Long = 0) As Objectnn    Dim process As Objectn    Dim theMarket As clsMarketn    Dim div_dates() As Longn    Dim divs() As Doublen    Dim div_size() As Longn    Dim ul_code_arr(1 To 1) As Stringn    n    ul_code_arr(1) = ul_coden    nOn Error GoTo ErrorHandlernn    Set theMarket = market.market_by_ul(ul_code)n    Set process = New sy_shared_ptr_dividendBSMProcessn    n    'get_dividend_array div_dates, divs, div_size, ul_code_arr, marketn    'day_shift 추가: 2018.12.05n    get_dividend_array div_dates, divs, div_size, ul_code_arr, market, day_shiftn    n        'tmp_fx_vol(inx) = market.market(index_seq(inx)).ul_currency_voln        'tmp_fx_corr(inx) = market.correlation_pair_.get_corr(deal_ticket.ul_code(inx), market.market(index_seq(inx)).ul_currency & "KRW")n      n'    If process.initializeProcess(theMarket.s_ _n'                               , qTs _n'                               , rTs _n'                               , volTs _n'                               , div_dates _n'                               , divs _n'                               , theMarket.ul_currency_vol _n'                               , market.correlation_pair_.get_corr(ul_code, theMarket.ul_currency & "KRW") _n'                               , fTs _n'                               ) = 0n'    Dim ratioDividend As Doublen'    ratioDividend = 0n'    Dim refPriceForDividend As Doublen'    refPriceForDividend = market.market_by_ul(ul_code).s_n'    Dim ratioLeverage As Doublen'    ratioLeverage = 1n    If process.initializeProcess(theMarket.s_ _n                               , qTs _n                               , rTS _n                               , fTs _n                               , aTs _n                               , volTs _n                               , div_dates _n                               , divs _n                               , theMarket.ul_currency_vol(get_dcf_idx(ccy)) _n                               , market.correlation_pair_.get_corr(ul_code, theMarket.ul_currency & ccy) _n                               , theMarket.div_schedule_.ratioDividend _n                               , theMarket.refPriceForDividend _n                               , codeLeverage _n                               ) = 0 _n    Thenn                               n        raise_err "get_process", "Failed to generate div process"n        n    End Ifn    n    Set get_div_process = processn    n    Exit Functionn    nErrorHandler:nn    raise_err "get_process", Err.descriptionnnEnd Functionn'n'n''---For MCn'Public Function get_div_process_array(rTs As Object, qTs As Object, volTs As Object, market As clsMarketSet, ul_code As String) As Objectn'n'    Dim process As Objectn'    Dim theMarket As clsMarketn'    Dim div_dates() As Longn'    Dim divs() As Doublen'    Dim div_size() As Longn'    Dim ul_code_arr(1 To 1) As Stringn'n'    ul_code_arr(1) = ul_coden'n'On Error GoTo ErrorHandlern'n'    Set theMarket = market.market_by_ul(ul_code)n'    Set process = New sy_shared_ptr_dividendBSMProcessn'n'    get_dividend_array div_dates, divs, div_size, ul_code_arr, marketn'n'        'tmp_fx_vol(inx) = market.market(index_seq(inx)).ul_currency_voln'        'tmp_fx_corr(inx) = market.correlation_pair_.get_corr(deal_ticket.ul_code(inx), market.market(index_seq(inx)).ul_currency & "KRW")n'n'    If process.initializeProcess(theMarket.s_, qTs, rTs, volTs, div_dates, divs, theMarket.ul_currency_vol, market.correlation_pair_.get_corr(ul_code, theMarket.ul_currency & "KRW")) = 0 Thenn'        raise_err "get_process", "Failed to generate vol term Structure"n'n'    End Ifn'n'    Set get_div_process = processn'n'    Exit Functionn'n'ErrorHandler:n'n'    raise_err "get_process", Err.descriptionn'n'End Functionnnn'Public Sub get_dividend_array(div_dates() As Long, divs() As Double, div_size() As Long, ul_code() As String, market As clsMarketSet)n'day_shift 추가: 2018.12.05nPublic Sub get_dividend_array(div_dates() As Long, divs() As Double, div_size() As Long, ul_code() As String, market As clsMarketSet, Optional day_shift As Long = 0)nn    Dim no_of_ul As Integern    Dim inx As Integern    Dim jnx As Integern    Dim tmp_divs() As Doublen    Dim tmp_div_dates() As Longn    Dim div_size_counter As Longn    nOn Error GoTo ErrorHandlernn    n    no_of_ul = get_array_size_string(ul_code)n    n    For inx = 1 To no_of_uln        n'        If Not market.market_by_ul(ul_code(inx)).div_schedule_ Is Nothing Thenn        n            tmp_divs = market.market_by_ul(ul_code(inx)).div_schedule_.get_divs(, , ul_code(inx))n            'tmp_div_dates = market.market_by_ul(ul_code(inx)).div_schedule_.get_div_dates(, , ul_code(inx))n            'day_shift 추가: 2018.12.05n            tmp_div_dates = market.market_by_ul(ul_code(inx)).div_schedule_.get_div_dates(, , ul_code(inx), day_shift)n            'push_back_long div_size, get_array_size_double(tmp_divs), 0n            div_size_counter = 0n             n            For jnx = 0 To get_array_size_double(tmp_divs) - 1n               n                If tmp_div_dates(jnx) > market.market_by_ul(ul_code(inx)).rate_curve_.rate_dates()(0) Thenn                    div_size_counter = div_size_counter + 1n                    push_back_long div_dates, tmp_div_dates(jnx), 0n                    push_back_double divs, tmp_divs(jnx), 0n                    n                End Ifn            n            Next jnxn            n            push_back_long div_size, div_size_counter, 0n        n            Erase tmp_divsn            Erase tmp_div_datesn            n'        Elsen'n'            push_back_long div_dates, 73415, 0n'            push_back_double divs, 0, 0n'            push_back_long div_size, 1, 0n'n'        End Ifn        n    Next inxn    nn    Exit Subn    nErrorHandler:nn    raise_err "get_dividend_array", Err.descriptionn    nEnd SubnnPublic Sub run_ac_pricing_2d(ByRef the_greeks As clsGreeks _n                        , deal_ticket As clsACDealTicket _n                        , ByVal market As clsMarketSet _n                        , ByRef bump_greek_set As clsGreekSet _n                        , Optional calc_vega As Boolean = False _n                        , Optional calc_skew_s As Boolean = False _n                        , Optional calc_corr As Boolean = False _n                        , Optional calc_rho As Boolean = False _n                        , Optional snapshot_time As Double = 0.001 _n                        , Optional ignore_smoothing As Boolean = False _n                        , Optional log_file As Boolean = False _n                        , Optional bump_delta As Boolean = False _n                        , Optional calc_delta As Boolean = False _n                        , Optional calc_term_vega As Boolean = False)nn    Dim holiday_list__(0 To 0) As Longn    holiday_list__(0) = 42000n    n    Dim theNote As Objectn    Dim theEngine As Objectn    Dim rTS As Objectn    Dim qTs(0 To 1) As Objectn    Dim fTs(0 To 1) As Objectn    Dim volTs(0 To 1) As Objectn    Dim quantoHelper(0 To 1) As Variantn    Dim process(0 To 1) As Variantn    Dim rate_spread As Doublen    n    Dim day_shift As Longn    Dim ul_prices(1 To 2) As Double '---- 2015-01-05n    n    Dim vegas(1 To 2) As Doublen    Dim vannas(1 To 2) As Doublen    Dim skew_s(1 To 2) As Doublen    Dim deltas(1 To 2) As Doublen    Dim corr_sens(1 To 2, 1 To 2) As Doublen    n    Dim rho_ul(1 To 2) As Doublen    n    Dim partial_vegas() As Double ' ---- 2015-10-05n    n    Dim inx As Integern    Dim jnx As Integern    n    Dim divs() As Doublen    Dim div_dates() As Longn    Dim div_array_size() As Longn    n    Dim rho As Doublen    n    Dim backup_market As clsMarketSetn    n    Const no_of_ul As Integer = 2n   n    Dim origin_pl_currency_curve As clsRateCurven    nOn Error GoTo ErrorHandlern    n    Set theNote = ac_deal_ticket_to_clr_2d(deal_ticket)n    n    If deal_ticket.instrument_type = 0 Thenn        rate_spread = deal_ticket.rate_spreadn    End Ifn    n    day_shift = deal_ticket.current_date - market.pl_currency_rate_curve_.rate_dates()(0)n    n    Set rTS = get_rTs(market, rate_spread, day_shift) ' DC Curven        n    For inx = 0 To no_of_ul - 1n        Set qTs(inx) = get_qTs(market, deal_ticket.ul_code(inx + 1), rate_spread)n        Set quantoHelper(inx) = get_quantoHelper(rTS, market, deal_ticket.ul_code(inx + 1), rate_spread)n        Set volTs(inx) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx + 1), day_shift)n        n        Set process(inx) = get_process(rTS, qTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1))n    Next inxn            n    get_dividend_array div_dates, divs, div_array_size, deal_ticket.get_ul_codes(), marketn    n    Set theEngine = New sy_shared_ptr_FdAutocallableEngine2Dn    n'    theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'    theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen' dll: 2017.11.28n    Dim ratioDividendIn(1) As Doublen    ratioDividendIn(0) = 0n    ratioDividendIn(1) = 0n'    theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_time _n'                             , ratioDividendInn' dll: 2018.5.3n    Dim div_refPriceForDividend(1) As Doublen    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n    theNote.setPricingEngine theEnginen    n    the_greeks.value = theNote.NPV() * deal_ticket.notionaln    Dim tmp_delta() As Doublen    Dim tmp_gamma() As Doublen    tmp_delta = theNote.delta()n    tmp_gamma = theNote.gamma()n    the_greeks.set_all_deltas tmp_delta, 0, deal_ticket.notionaln    the_greeks.set_all_gammas tmp_gamma, 0, deal_ticket.notionaln    the_greeks.theta = theNote.theta() * deal_ticket.notionaln    n    '------------------------n    ' CrossGamma: +0.1%/0.1%n    '------------------------n    If calc_delta Thenn        Set backup_market = market.copy_obj()n    n        market.bump_ul_price 0.001, deal_ticket.ul_code(1)n    n        Set volTs(0) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(1), day_shift)n        Set process(0) = get_process(rTS, qTs(0), volTs(0), market, deal_ticket.ul_code(1))n    n'        theEngine.initializeEngine process _n'                     , div_dates _n'                     , divs _n'                     , div_array_size _n'                     , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                     , deal_ticket.t_grid, deal_ticket.x_grid _n'                     , deal_ticket.scheme_type _n'                     , deal_ticket.strike_shift _n'                     , True _n'                     , quantoHelper _n'                     , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'        theEngine.initializeEngine process _n'                     , div_dates _n'                     , divs _n'                     , div_array_size _n'                     , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                     , deal_ticket.t_grid, deal_ticket.x_grid _n'                     , deal_ticket.scheme_type _n'                     , True _n'                     , quantoHelper _n'                     , snapshot_timenn' dll: 2017.11.28n        ratioDividendIn(0) = 0n        ratioDividendIn(1) = 0n'        theEngine.initializeEngine process _n'                                 , div_dates _n'                                 , divs _n'                                 , div_array_size _n'                                 , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid _n'                                 , deal_ticket.scheme_type _n'                                 , True _n'                                 , quantoHelper _n'                                 , snapshot_time _n'                                 , ratioDividendInn' dll: 2018.5.3n    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n        theNote.setPricingEngine theEnginen    n        theNote.NPVn    n        Dim tmp_delta_up_ua1() As Doublen        tmp_delta_up_ua1 = theNote.deltan    n        the_greeks.cross_gamma12 = (tmp_delta_up_ua1(1) - tmp_delta(1)) / (0.001 * market.market_by_ul(deal_ticket.ul_code(1)).s_) * deal_ticket.notionaln    n        Set market = backup_market.copy_objn        Set volTs(0) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(1), day_shift)n        Set process(0) = get_process(rTS, qTs(0), volTs(0), market, deal_ticket.ul_code(1))n    End Ifn    n    '------------------------n    ' 2015-01-05n    '------------------------n    For inx = 1 To no_of_uln        ul_prices(inx) = market.market_by_ul(deal_ticket.ul_code(inx)).s_n    Next inxn    the_greeks.set_all_ul_prices ul_pricesn   n    If snapshot_time >= 0 Thenn        Dim tmp_xAxis() As Doublen        Dim tmp_yAxis() As Doublen        Dim tmp_snapshotValues() As Doublen    n        tmp_xAxis = theNote.xAxis()n        tmp_yAxis = theNote.yAxis()n        tmp_snapshotValues = theNote.snapShotValues()n        n        the_greeks.set_xAxis tmp_xAxis, True, deal_ticket.reference_price(1)n        the_greeks.set_yAxis tmp_yAxis, True, deal_ticket.reference_price(2)n        the_greeks.set_snapshot_value tmp_snapshotValues, Abs(deal_ticket.notional)n    End Ifn    n    '======================================================n    ' VEGAn    '======================================================nn    If calc_vega Then '+1%pn    n        Set backup_market = market.copy_obj()n    n        For inx = 1 To no_of_uln            n            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_vol_surface 0.01n            Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n            Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))n            n'            theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'            theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen' dll: 2017.11.28n            ratioDividendIn(0) = 0n            ratioDividendIn(1) = 0n'            theEngine.initializeEngine process _n'                                     , div_dates _n'                                     , divs _n'                                     , div_array_size _n'                                     , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                     , deal_ticket.t_grid, deal_ticket.x_grid _n'                                     , deal_ticket.scheme_type _n'                                     , True _n'                                     , quantoHelper _n'                                     , snapshot_time _n'                                     , ratioDividendInn' dll: 2018.5.3n    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n            theNote.setPricingEngine theEnginen    n            vegas(inx) = theNote.NPV() * deal_ticket.notional - the_greeks.valuen            vannas(inx) = theNote.delta()(inx - 1) * deal_ticket.notional - the_greeks.deltas(inx)n            n            vegas(inx) = vegas(inx)n            vannas(inx) = vannas(inx)n            n            Set market = backup_market.copy_objn            'market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.rewind_vol_bumpn            Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n            Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))n            n        Next inxn                n        the_greeks.set_all_vegas vegasn        the_greeks.set_all_vannas vannasn    n    End Ifn    n    If calc_term_vega Then '+1%pn    n        Set backup_market = market.copy_obj()n        ReDim partial_vegas(1 To no_of_ul, 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())) As Doublen        n        For inx = 1 To no_of_uln            n            For jnx = 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())n                n                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_local_vol_upto 0.01, deal_ticket.term_vega_tenor(jnx)n            n                Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n                Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))n                n'                theEngine.initializeEngine process _n'                                 , div_dates _n'                                 , divs _n'                                 , div_array_size _n'                                 , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid _n'                                 , deal_ticket.scheme_type _n'                                 , deal_ticket.strike_shift _n'                                 , True _n'                                 , quantoHelper _n'                                 , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'                theEngine.initializeEngine process _n'                                 , div_dates _n'                                 , divs _n'                                 , div_array_size _n'                                 , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid _n'                                 , deal_ticket.scheme_type _n'                                 , True _n'                                 , quantoHelper _n'                                 , snapshot_timen' dll: 2017.11.28n                ratioDividendIn(0) = 0n                ratioDividendIn(1) = 0n'                theEngine.initializeEngine process _n'                                         , div_dates _n'                                         , divs _n'                                         , div_array_size _n'                                         , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                         , deal_ticket.t_grid, deal_ticket.x_grid _n'                                         , deal_ticket.scheme_type _n'                                         , True _n'                                         , quantoHelper _n'                                         , snapshot_time _n'                                         , ratioDividendInn' dll: 2017.11.28n    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n                theNote.setPricingEngine theEnginen                n                partial_vegas(inx, jnx) = (theNote.NPV() * deal_ticket.notional - the_greeks.value)n                n                Set market = backup_market.copy_objn                'market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.rewind_bump_vol_upton                Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n                Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))n            n            Next jnxn                        n        Next inxn        n        the_greeks.no_of_tenors = get_array_size_date(deal_ticket.term_vega_tenor_array())n        the_greeks.redim_arrays 2, the_greeks.no_of_tenorsn        the_greeks.set_term_dates_per_ul 1, deal_ticket.term_vega_tenor_arrayn        the_greeks.set_term_dates_per_ul 2, deal_ticket.term_vega_tenor_arrayn        n        the_greeks.set_all_partial_vega partial_vegasn        n        the_greeks.to_term_vega deal_ticket.current_daten    n    End Ifn    n    If calc_skew_s Then '-1%pn    n        Set backup_market = market.copy_obj()n        For inx = 1 To no_of_uln    n            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.s_ = market.market_by_ul(deal_ticket.ul_code(inx)).s_n            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_skew -0.01n            Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n            Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))n            n'            theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'            theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen            ratioDividendIn(0) = 0n            ratioDividendIn(1) = 0n'            theEngine.initializeEngine process _n'                                     , div_dates _n'                                     , divs _n'                                     , div_array_size _n'                                     , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                     , deal_ticket.t_grid, deal_ticket.x_grid _n'                                     , deal_ticket.scheme_type _n'                                     , True _n'                                     , quantoHelper _n'                                     , snapshot_time _n'                                     , ratioDividendInn' dll: 2017.11.28n    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n            theNote.setPricingEngine theEnginen    n            skew_s(inx) = (theNote.NPV() * deal_ticket.notional - the_greeks.value) * -1n            n            Set market = backup_market.copy_objn            'market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.rewind_vol_bumpn            Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n            Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))n            n        Next inxn        n        the_greeks.set_all_skews skew_sn    n    End Ifn n    If calc_corr Then '+0.05/5n        n        Set backup_market = market.copy_obj()n    n'        theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) + 0.05 _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'        theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) + 0.05 _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen        ratioDividendIn(0) = 0n        ratioDividendIn(1) = 0n'        theEngine.initializeEngine process _n'                                 , div_dates _n'                                 , divs _n'                                 , div_array_size _n'                                 , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2) + 0.05) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid _n'                                 , deal_ticket.scheme_type _n'                                 , True _n'                                 , quantoHelper _n'                                 , snapshot_time _n'                                 , ratioDividendInn' dll: 2017.11.28n    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n        theNote.setPricingEngine theEnginenn        corr_sens(1, 2) = (theNote.NPV() * deal_ticket.notional - the_greeks.value) / 5n        n        Set market = backup_market.copy_objn        'market.correlation_pair_.rewind deal_ticket.ul_code(1), deal_ticket.ul_code(2)nn        the_greeks.set_all_corr_sens corr_sensn    n    End Ifnn    If calc_rho Then '+10bp/10n    n        Set backup_market = market.copy_obj()n    n        Dim tmp_greek As clsGreeksn        Dim tmp_rate_curves() As clsRateCurven        ReDim tmp_rate_curves(1 To deal_ticket.no_of_ul) As clsRateCurven     '   Dim bump_greek_set As clsGreekSetnn        Set tmp_greek = New clsGreeksn        Set origin_pl_currency_curve = market.pl_currency_rate_curve_.copy_obj()n        'Bumping DCF: +10bpn        Set market.pl_currency_rate_curve_ = market.pl_currency_rate_curve_.copy_obj(0, 0.001)n        n        run_ac_pricing_2d tmp_greek, deal_ticket, market, bump_greek_set, False, False, False, False, snapshot_time, False, Falsen        'Rho(DCF)n        rho = (tmp_greek.value - the_greeks.value) * 0.1n        n        Set market.pl_currency_rate_curve_ = origin_pl_currency_curven        n        'Rho(UL)n        'Bumping riskfree rate curve by adjusting dividend yield: +10bpn        For inx = 1 To deal_ticket.no_of_uln            n            Set tmp_greek = New clsGreeksn            Dim tmp_div_yield As Doublen            tmp_div_yield = market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_n            n            market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = tmp_div_yield - 0.001n            n            run_ac_pricing_2d tmp_greek, deal_ticket, market, bump_greek_set, False, False, False, False, snapshot_time, False, Falsen            n            rho_ul(inx) = (tmp_greek.value - the_greeks.value) * 0.1n            n            Set market = backup_market.copy_objn            'market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = tmp_div_yieldn            n        Next inxn        n        the_greeks.rho = rhon        the_greeks.set_all_rho_ul rho_uln        n    End Ifnn    If bump_delta Then '+0.1%/+0.1%n    n        Set backup_market = market.copy_obj()nn        For inx = 1 To no_of_ulnn            market.bump_ul_price 0.001, deal_ticket.ul_code(inx)n            'market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.shift_surface market.market_by_ul(deal_ticket.ul_code(inx)).s_, 0.5nn            Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n            Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))nn'            theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'            theEngine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen            ratioDividendIn(0) = 0n            ratioDividendIn(1) = 0n'            theEngine.initializeEngine process _n'                                     , div_dates _n'                                     , divs _n'                                     , div_array_size _n'                                     , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                                     , deal_ticket.t_grid, deal_ticket.x_grid _n'                                     , deal_ticket.scheme_type _n'                                     , True _n'                                     , quantoHelper _n'                                     , snapshot_time _n'                                     , ratioDividendInn' dll: 2017.11.28n    div_refPriceForDividend(0) = market.market_by_ul(deal_ticket.ul_code(1)).s_n    div_refPriceForDividend(1) = market.market_by_ul(deal_ticket.ul_code(2)).s_n    theEngine.initializeEngine process _n                             , div_dates _n                             , divs _n                             , div_array_size _n                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                             , deal_ticket.t_grid, deal_ticket.x_grid _n                             , deal_ticket.scheme_type _n                             , True _n                             , quantoHelper _n                             , snapshot_time _n                             , ratioDividendIn _n                             , div_refPriceForDividendn                             n            theNote.setPricingEngine theEnginenn            deltas(inx) = (theNote.NPV() * deal_ticket.notional - the_greeks.value) / (0.001 * market.market_by_ul(deal_ticket.ul_code(inx)).s_)nn            Set market = backup_market.copy_objn            Set volTs(inx - 1) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx), day_shift)n            Set process(inx - 1) = get_process(rTS, qTs(inx - 1), volTs(inx - 1), market, deal_ticket.ul_code(inx))nn        Next inxnn        the_greeks.set_all_sticky_strike_deltas deltasnn    End Ifnnn'    If log_file Then 'snapshot_time > 0 Thenn'        write_closing_file_2d "C:\log\", deal_ticket.asset_code & "." & config__.snapshot_file_extension, the_greeks.get_xAxis, the_greeks.get_yAxis, the_greeks.get_snapshot_valuen'    End Ifnn    theNote.dispose_comn   n    Exit Subn    nErrorHandler:nn    raise_err "run_ac_pricing_2d", Err.descriptionnnEnd SubnnPublic Sub run_ac_pricing_fdm(ByRef the_greeks As clsGreeks _n                        , ByVal deal_ticket As clsACDealTicket _n                        , ByVal market As clsMarketSet _n                        , Optional calc_delta_gamma As Boolean = False _n                        , Optional calc_stickymoneyness_delta As Boolean = False _n                        , Optional calc_stickystrike_delta As Boolean = False _n                        , Optional calc_cross_gamma As Boolean = False _n                        , Optional calc_vega As Boolean = False _n                        , Optional calc_term_vega As Boolean = False _n                        , Optional calc_skew_s As Boolean = False _n                        , Optional calc_corr As Boolean = False _n                        , Optional calc_rho As Boolean = False _n                        , Optional calc_theta As Boolean = False _n                        , Optional snapshot_time As Double = 0.001)nn    Dim no_of_ul As Integern    no_of_ul = deal_ticket.no_of_uln    n    Dim the_note As Objectn    Dim the_engine As Objectn    Dim rTS As Objectn    n    'base=0n    'for no_of_ul=1, not arrayn    Dim qTs() As Objectn    Dim fTs() As Objectn    Dim volTs() As Objectn    Dim quantoHelper() As Variantn    Dim process() As Variantn    ReDim qTs(0 To no_of_ul - 1) As Objectn    ReDim fTs(0 To no_of_ul - 1) As Objectn    ReDim volTs(0 To no_of_ul - 1) As Objectn    ReDim quantoHelper(0 To no_of_ul - 1) As Variantn    ReDim process(0 To no_of_ul - 1) As Variantn    n    Dim ratioDividendIn() As Double 'dll: 2017.11.28n    Dim div_refPriceForDividend() As Double 'dll: 2018.5.3n    ReDim ratioDividendIn(0 To no_of_ul - 1) As Doublen    ReDim div_refPriceForDividend(0 To no_of_ul - 1) As Doublen    n    'base=1n    Dim ul_prices() As Double '---- 2015-01-05n    Dim vegas() As Doublen    Dim vannas() As Doublen    Dim skew_s() As Doublen    Dim deltas() As Doublen    Dim gammas() As Doublen    Dim rho_ul() As Doublen    ReDim ul_prices(1 To no_of_ul) As Double '---- 2015-01-05n    ReDim vegas(1 To no_of_ul) As Doublen    ReDim vannas(1 To no_of_ul) As Doublen    ReDim skew_s(1 To no_of_ul) As Doublen    ReDim deltas(1 To no_of_ul) As Doublen    ReDim gammas(1 To no_of_ul) As Doublen    ReDim rho_ul(1 To no_of_ul) As Doublen    n    If no_of_ul > 1 Thenn        Dim corr_sens() As Doublen        ReDim corr_sens(1 To no_of_ul, 1 To no_of_ul) As Doublen    End Ifn    n    Dim partial_vegas() As Double ' ---- 2015-10-05n   n    Dim rate_spread As Doublen    Dim day_shift As Longn    Dim rho As Doublen    n    Dim backup_market As clsMarketSetn    n    Dim inx As Integern    Dim jnx As Integern    nOn Error GoTo ErrorHandlern    n    If deal_ticket.instrument_type = 0 Thenn        rate_spread = deal_ticket.rate_spreadn    End Ifn    n    day_shift = deal_ticket.current_date - market.pl_currency_rate_curve_.rate_dates()(0)n    n    Set rTS = get_rTs(market, rate_spread, day_shift) 'discount curven    n    For inx = 0 To no_of_ul - 1n        ' dll: 2017.11.28n        ratioDividendIn(inx) = 0n        ' dll: 2018.5.3n        div_refPriceForDividend(inx) = market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_n        n        Set qTs(inx) = get_qTs(market, deal_ticket.ul_code(inx + 1), rate_spread)n        'Set quantoHelper(inx) = get_quantoHelper(rTs, market, deal_ticket.ul_code(inx + 1), rate_spread)n        Set quantoHelper(inx) = get_quantoHelper(rTS, market, deal_ticket.ul_code(inx + 1), deal_ticket.ccy, rate_spread, day_shift) '2018.7.10n        Set volTs(inx) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx + 1), day_shift)n        Set process(inx) = get_process(rTS, qTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1))n    Next inxn            n    ' dll: 2018.5.3n    If no_of_ul = 1 Thenn    n        Set the_note = ac_deal_ticket_to_clr(deal_ticket)n        Set the_engine = New sy_shared_ptr_FdAutocallableEngine1Dn        n'        the_engine.initializeEngine process(0) _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n'                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n'                                 , deal_ticket.t_grid, deal_ticket.x_grid _n'                                 , deal_ticket.scheme_type _n'                                 , True _n'                                 , quantoHelper(0) _n'                                 , snapshot_time _n'                                 , ratioDividendInn        'day_shift 추가: 2018.12.05n        the_engine.initializeEngine process(0) _n                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_div_dates(0, deal_ticket.maturity_date, deal_ticket.ul_code(), day_shift) _n                                 , market.market_by_ul(deal_ticket.ul_code()).div_schedule_.get_divs(0, deal_ticket.maturity_date, deal_ticket.ul_code()) _n                                 , deal_ticket.t_grid, deal_ticket.x_grid _n                                 , deal_ticket.scheme_type _n                                 , True _n                                 , quantoHelper(0) _n                                 , snapshot_time _n                                 , ratioDividendInn    ElseIf no_of_ul = 2 Thenn    n        Set the_note = ac_deal_ticket_to_clr_2d(deal_ticket)n        Set the_engine = New sy_shared_ptr_FdAutocallableEngine2Dn        n        Dim divs() As Doublen        Dim div_dates() As Longn        Dim div_array_size() As Longn    n        'get_dividend_array div_dates, divs, div_array_size, deal_ticket.get_ul_codes(), marketn        'day_shift 추가: 2018.12.05n        get_dividend_array div_dates, divs, div_array_size, deal_ticket.get_ul_codes(), market, day_shiftn        n        the_engine.initializeEngine process _n                                 , div_dates _n                                 , divs _n                                 , div_array_size _n                                 , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n                                 , deal_ticket.t_grid, deal_ticket.x_grid _n                                 , deal_ticket.scheme_type _n                                 , True _n                                 , quantoHelper _n                                 , snapshot_time _n                                 , ratioDividendIn _n                                 , div_refPriceForDividendn                                 n    End Ifn    n'    the_engine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , deal_ticket.strike_shift _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timen'   <----delete deal_ticket.strike_shift---->n'    the_engine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_timenn'    the_engine.initializeEngine process _n'                             , div_dates _n'                             , divs _n'                             , div_array_size _n'                             , market.correlation_pair_.get_corr(deal_ticket.ul_code(1), deal_ticket.ul_code(2)) _n'                             , deal_ticket.t_grid, deal_ticket.x_grid _n'                             , deal_ticket.scheme_type _n'                             , True _n'                             , quantoHelper _n'                             , snapshot_time _n'                             , ratioDividendInn                             n    the_note.setPricingEngine the_enginen    n    the_greeks.value = the_note.NPV() * deal_ticket.notionaln    n    For inx = 1 To no_of_uln        ul_prices(inx) = market.market_by_ul(deal_ticket.ul_code(inx)).s_n    Next inxnn    the_greeks.set_all_ul_prices ul_pricesn    n    Set backup_market = market.copy_obj()n    n    Dim tmp_delta() As Doublen    Dim tmp_gamma() As Doublen    tmp_delta = the_note.delta()n    tmp_gamma = the_note.gamma()n    n    If calc_delta_gamma Thenn        the_greeks.set_all_deltas tmp_delta, 0, deal_ticket.notionaln        the_greeks.set_all_gammas tmp_gamma, 0, deal_ticket.notionaln    End Ifn    n    'cross gamma: +0.1%/0.1%n    If calc_cross_gamma And no_of_ul = 2 Thenn    n        Dim xgamma_greeks As New clsGreeksn        n        market.bump_ul_price 0.001, deal_ticket.ul_code(1)nn        run_ac_pricing_fdm xgamma_greeks, deal_ticket, market, Truen    n        the_greeks.cross_gamma12 = (xgamma_greeks.deltas(2) - the_greeks.deltas(2)) / (0.001 * market.market_by_ul(deal_ticket.ul_code(1)).s_)n    n        Set market = backup_market.copy_objn        n    End Ifnn    If calc_stickymoneyness_delta Thenn    n        Set market = backup_market.copy_objn        n        Dim stickymoneyness_delta_greek_up As clsGreeksn        Dim stickymoneyness_delta_greek_down As clsGreeksnn        For inx = 1 To no_of_ulnn            Set stickymoneyness_delta_greek_up = New clsGreeksn            Set stickymoneyness_delta_greek_down = New clsGreeksnn            market.bump_ul_price 0.01, deal_ticket.ul_code(inx)n            n            '<----- for the sticky moneyness model 2018.09.07n            Dim shifted_strikes() As Doublen            shifted_strikes = market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.get_all_strikesn            Dim i_strike As Integern            For i_strike = 1 To market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.no_of_strikesn                shifted_strikes(i_strike) = shifted_strikes(i_strike) * 1.01n            Next i_striken            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn            '------>n            n            run_ac_pricing_fdm stickymoneyness_delta_greek_up, deal_ticket, marketnn            Set market = backup_market.copy_objnn            market.bump_ul_price -0.01, deal_ticket.ul_code(inx)n            n            '<----- for the sticky moneyness model 2018.09.07n            shifted_strikes = market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.get_all_strikesn            For i_strike = 1 To market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.no_of_strikesn                shifted_strikes(i_strike) = shifted_strikes(i_strike) * 0.99n            Next i_striken            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn            '------>n            n            run_ac_pricing_fdm stickymoneyness_delta_greek_down, deal_ticket, marketnn            deltas(inx) = (stickymoneyness_delta_greek_up.value - stickymoneyness_delta_greek_down.value) / (the_greeks.ul_prices(inx) * 0.02)n            gammas(inx) = (stickymoneyness_delta_greek_up.value + stickymoneyness_delta_greek_down.value - 2 * the_greeks.value) / (the_greeks.ul_prices(inx) * 0.01) ^ 2nn            Set market = backup_market.copy_objn            n        Next inxn        n        the_greeks.set_all_sticky_moneyness_deltas deltasn        the_greeks.set_all_sticky_moneyness_gammas gammasn    n    End Ifn    n    'sticky_strike_delta: +0.1%/+0.1%n    If calc_stickystrike_delta Thennn        For inx = 1 To no_of_ulnn            market.bump_ul_price 0.001, deal_ticket.ul_code(inx)n            'shift vol surface: under workingn            'market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.shift_surface market.market_by_ul(deal_ticket.ul_code(inx)).s_, 0.5n            n            Dim bump_ul_greeks As New clsGreeksnn            deltas(inx) = (bump_ul_greeks.value - the_greeks.value) / (0.001 * market.market_by_ul(deal_ticket.ul_code(inx)).s_)nn            Set market = backup_market.copy_objnn        Next inxnn        the_greeks.set_all_sticky_strike_deltas deltasnn    End Ifn    n    If calc_vega Then '+1%pn    n        For inx = 1 To no_of_uln        n            Dim vol_bump_greeks As New clsGreeksn            n            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_vol_surface 0.01n            n            run_ac_pricing_fdm vol_bump_greeks, deal_ticket, marketn    n            vegas(inx) = vol_bump_greeks.value - the_greeks.valuen            vannas(inx) = vol_bump_greeks.deltas(inx) - the_greeks.deltas(inx)n            n            Set market = backup_market.copy_objn            n        Next inxn                n        the_greeks.set_all_vegas vegasn        the_greeks.set_all_vannas vannasn    n    End Ifn    n    If calc_term_vega Then '+1%pn    n        ReDim partial_vegas(1 To no_of_ul, 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())) As Doublen        n        For inx = 1 To no_of_uln            n            For jnx = 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())n                n                Dim t_volup_greeks As New clsGreeksn                n                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_local_vol_upto 0.01, deal_ticket.term_vega_tenor(jnx)n                n                run_ac_pricing_fdm t_volup_greeks, deal_ticket, marketn            n                partial_vegas(inx, jnx) = t_volup_greeks.value - the_greeks.valuen                n                Set market = backup_market.copy_objn            n            Next jnxn            n        Next inxn        n        the_greeks.no_of_tenors = get_array_size_date(deal_ticket.term_vega_tenor_array())n        the_greeks.redim_arrays 2, the_greeks.no_of_tenorsn        the_greeks.set_term_dates_per_ul 1, deal_ticket.term_vega_tenor_arrayn        the_greeks.set_term_dates_per_ul 2, deal_ticket.term_vega_tenor_arrayn        n        the_greeks.set_all_partial_vega partial_vegasn        the_greeks.to_term_vega deal_ticket.current_daten    n    End Ifn    n    If calc_skew_s Then '-1%pn    n        For inx = 1 To no_of_uln    n            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.s_ = market.market_by_ul(deal_ticket.ul_code(inx)).s_n            market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_skew -0.01n            n            Dim skew_greeks As New clsGreeksn            n            run_ac_pricing_fdm skew_greeks, deal_ticket, marketn    n            skew_s(inx) = (skew_greeks.value - the_greeks.value) * -1n            n            Set market = backup_market.copy_objn            n        Next inxn        n        the_greeks.set_all_skews skew_sn    n    End Ifn n    If calc_corr Then '+0.05/5n        n        market.correlation_pair_.bump_corr deal_ticket.ul_code(1), deal_ticket.ul_code(2), 0.05n        n        Dim corr_greeks As New clsGreeksn        n        run_ac_pricing_fdm corr_greeks, deal_ticket, marketnn        corr_sens(1, 2) = (corr_greeks.value - the_greeks.value) / 5n        n        Set market = backup_market.copy_objnn        the_greeks.set_all_corr_sens corr_sensn    n    End Ifnn    If calc_rho Then '+10bp/10n    n        Dim rho_ccy_greek As New clsGreeksn        n        'Bumping DCF: +10bpn        Set market.pl_currency_rate_curve_ = market.pl_currency_rate_curve_.copy_obj(0, 0.001)n        n        run_ac_pricing_fdm rho_ccy_greek, deal_ticket, marketn        n        Set market = backup_market.copy_objn        n        'Rho(DCF)n        rho = (rho_ccy_greek.value - the_greeks.value) * 0.1n        the_greeks.rho = rhon        n        'Rho(UL)n        'Bumping riskfree rate curve by adjusting dividend yield: +10bpn        For inx = 1 To deal_ticket.no_of_uln            n            Dim rho_ul_greek As New clsGreeksn            n            market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ - 0.001n            n            run_ac_pricing_fdm rho_ul_greek, deal_ticket, marketn            n            rho_ul(inx) = (rho_ul_greek.value - the_greeks.value) * 0.1n            n            Set market = backup_market.copy_objn            n        Next inxnn        the_greeks.set_all_rho_ul rho_uln        n    End Ifn    n    If calc_theta Thenn        the_greeks.theta = the_note.theta() * deal_ticket.notionaln    End Ifnn'    If log_file Then 'snapshot_time > 0 Thenn'        write_closing_file_2d "C:\log\", deal_ticket.asset_code & "." & config__.snapshot_file_extension, the_greeks.get_xAxis, the_greeks.get_yAxis, the_greeks.get_snapshot_valuen'    End Ifnn    'base=0n    'for no_of_ul=1, not arrayn    n    rTS.dispose_comn    n    For inx = 0 To no_of_ul - 1n        qTs(inx).dispose_comn        fTs(inx).dispose_comn        volTs(inx).dispose_comn        process(inx).dispose_comn        quantoHelper(inx).dispose_comn        Set qTs(inx) = Nothingn        Set fTs(inx) = Nothingn        Set volTs(inx) = Nothingn        Set process(inx) = Nothingn        Set quantoHelper(inx) = Nothingn    Next inxn    n    the_note.dispose_comn    the_engine.dispose_comn    n    Set the_note = Nothingn    Set the_engine = Nothingn   n    Set backup_market = Nothingn    Set rTS = Nothingn    n    Exit Subn    nErrorHandler:nn    raise_err "run_ac_pricing_fdm", Err.descriptionnnEnd SubnnPrivate Sub draw_test_surface(market As clsMarket, row_position As Integer, column_position As Integer)n    n    Dim inx As Integern    Dim jnx As Integern    n    For jnx = 1 To get_array_size_double(market.sabr_surface_.local_vol_surface.grid_.get_all_strikes())n        Sheets("tester").Cells(row_position + 1, column_position + jnx + 7) = market.sabr_surface_.local_vol_surface.grid_.get_all_strikes()(jnx)n    Next jnxn    n    For inx = 1 To get_array_size_date(market.sabr_surface_.local_vol_surface.grid_.get_all_dates())n    n        Sheets("tester").Cells(row_position + inx + 1, column_position + 1) = market.sabr_surface_.sabr_parameters_loc_.sabr_param(inx).forwardn        Sheets("tester").Cells(row_position + inx + 1, column_position + 2) = market.sabr_surface_.sabr_parameters_loc_.sabr_param(inx).alphan        Sheets("tester").Cells(row_position + inx + 1, column_position + 3) = market.sabr_surface_.sabr_parameters_loc_.sabr_param(inx).betan        Sheets("tester").Cells(row_position + inx + 1, column_position + 4) = market.sabr_surface_.sabr_parameters_loc_.sabr_param(inx).nun        Sheets("tester").Cells(row_position + inx + 1, column_position + 5) = market.sabr_surface_.sabr_parameters_loc_.sabr_param(inx).rhon        Sheets("tester").Cells(row_position + inx + 1, column_position + 6) = market.sabr_surface_.sabr_parameters_loc_.sabr_param(inx).vol_atmn    n    n        For jnx = 1 To get_array_size_double(market.sabr_surface_.local_vol_surface.grid_.get_all_strikes())n    n            Sheets("tester").Cells(row_position + inx + 1, column_position + jnx + 7) = market.sabr_surface_.local_vol_surface.vol_surface()(inx, jnx)n    n        Next jnxn        n    Next inxnnnEnd SubnnnPublic Sub run_ac_closing_3d(value() As Double, deal_ticket As clsACDealTicket, market As clsMarketSet _n                                , sparse_grid() As Double _n                                , Optional min_percentage As Double = 0.8, Optional max_percentage As Double = 1.2)nn    Dim the_greeks As clsGreeksn    Dim reference_prices As Doublen    Dim adj_market As clsMarketSetn    n    Const Dimension As Integer = 3n    n    Dim inx As Integern    Dim jnx As Integern    nOn Error GoTo ErrorHandlern    n    Set the_greeks = New clsGreeksn    n    If deal_ticket.current_date <> market.pl_currency_rate_curve_.rate_dates()(0) Thenn        Set adj_market = market.copy_obj(deal_ticket.current_date - market.pl_currency_rate_curve_.rate_dates()(0))n    Elsen        Set adj_market = market.copy_obj()n    End Ifn    n    For inx = 1 To get_array_size_double(sparse_grid)n        n        For jnx = 1 To Dimensionn            n            n            adj_market.market_by_ul(deal_ticket.ul_code(jnx)).s_ = ((max_percentage - min_percentage) * sparse_grid(inx, jnx) + min_percentage) _n                                                                 * market.market_by_ul(deal_ticket.ul_code(jnx)).s_n            n        Next jnxn                n        Dim dummy_set As clsGreekSetn        run_ac_pricing_3d the_greeks, deal_ticket, adj_market, dummy_set, False, False, False, False, False, , , , , Falsen        n        push_back_double value, the_greeks.value ' Sgn(deal_ticket.notional)nn    Next inxn    n    n    Exit Subn    nErrorHandler:n    n    raise_err "run_ac_closing_3d", Err.descriptionnnEnd SubnnPublic Function get_corr_array(no_of_ul As Integer, market As clsMarketSet, deal_ticket As clsACDealTicket) As Double()n    Dim inx As Integern    Dim jnx As Integern    Dim rtn_array() As Doublen    n    For inx = 1 To no_of_uln        For jnx = 1 To no_of_uln            push_back_double rtn_array, market.correlation_pair_.get_corr(deal_ticket.ul_code(inx), deal_ticket.ul_code(jnx)), 0n        Next jnxn    Next inxn    n    get_corr_array = rtn_arrayn    nEnd Functionnn'local correlation 추가 2019. 3. 27nPublic Function get_min_corr_array(no_of_ul As Integer, market As clsMarketSet, deal_ticket As clsACDealTicket) As Double()n    Dim inx As Integern    Dim jnx As Integern    Dim rtn_array() As Doublen    n    For inx = 1 To no_of_uln        For jnx = 1 To no_of_uln            push_back_double rtn_array, market.min_correlation_pair_.get_corr(deal_ticket.ul_code(inx), deal_ticket.ul_code(jnx)), 0n        Next jnxn    Next inxn    n    get_min_corr_array = rtn_arrayn    nEnd FunctionnnnPublic Sub run_ac_pricing_3d(ByRef the_greeks As clsGreeks _n                        , deal_ticket As clsACDealTicket _n                        , market As clsMarketSet _n                        , ByRef bump_greek_set As clsGreekSet _n                        , Optional calc_vega As Boolean = False _n                        , Optional calc_skew_s As Boolean = False _n                        , Optional calc_corr As Boolean = False _n                        , Optional calc_rho As Boolean = False _n                        , Optional calc_theta As Boolean = False _n                        , Optional snapshot_time As Double = 0.001 _n                        , Optional ignore_smoothing As Boolean = False _n                        , Optional calc_snapshot As Boolean = False _n                        , Optional bump_delta As Boolean = False _n                        , Optional calc_delta As Boolean = False _n                        , Optional calc_term_vega As Boolean = False _n                        , Optional max_recursive As Integer = 1)n                        n    Dim the_note As Objectn    Dim process(0 To 2) As Variantn    Dim the_process_array As Objectn    Dim the_engine As Objectn    n    Dim rTS As Objectn    Dim qTs(0 To 2) As Objectn    Dim fTs(0 To 2) As Objectn    Dim volTs(0 To 2) As Objectn        n    Dim rate_spread As Doublen    n    Dim theta As Doublen    n    Dim deltas(1 To 3) As Doublen    Dim sticky_strike_deltas(1 To 3) As Doublen    Dim gammas(1 To 3) As Doublen    Dim vegas(1 To 3) As Doublen    Dim skew_s(1 To 3) As Doublen    Dim vannas(1 To 3) As Doublen    Dim ul_prices(1 To 3) As Doublen    Dim corr_sens(1 To 3, 1 To 3) As Doublen    Dim rho_ul(1 To 3) As Doublen    n    Dim partial_vegas() As Doublen    n    Dim tmp_corr() As Doublen    n    Dim origin_pl_currency_curve As clsRateCurvenn    Dim origin_curves(1 To 3) As clsRateCurven    n    Dim inx As Integern    Dim jnx As Integern    n    Dim rho As Doublen    n    Dim day_shift As Longn    n    Const no_of_ul As Integer = 3n    n    day_shift = deal_ticket.current_date - market.pl_currency_rate_curve_.rate_dates()(0)n    n    Set the_note = ac_deal_ticket_to_clr_nd(deal_ticket)n    n    If deal_ticket.instrument_type = 0 Thenn        rate_spread = deal_ticket.rate_spreadn    End Ifn    n    n    Set rTS = get_rTs(market, rate_spread, day_shift) ' DC Curven        n    For inx = 0 To no_of_ul - 1n        Set qTs(inx) = get_qTs(market, deal_ticket.ul_code(inx + 1), rate_spread, day_shift)n        Set fTs(inx) = get_fTs(market, deal_ticket.ul_code(inx + 1), rate_spread, day_shift)n       ' Set quantoHelper(inx) = get_quantoHelper(rTs, market, deal_ticket.ul_code(inx + 1), rate_spread)n        Set volTs(inx) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx + 1), day_shift)n        n        Set process(inx) = get_div_process(rTS, qTs(inx), fTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1))n    Next inxn        n    Set the_process_array = New sy_shared_ptr_StochasticProcessArrayn    n    n    tmp_corr = get_corr_array(no_of_ul, market, deal_ticket)n    n    'the_process_array.initializeProcess process, tmp_corrn    Dim inLocCorr_UseLocalCorr As Booleann    Dim inLocCorr_MinCorr(0) As Doublen    Dim lambdaSlope_down(0) As Doublen    Dim lambdaSlope_up(0) As Doublen    Dim lambdaNeutral(0) As Doublen    Dim lambdaPriceChangeInterval(0) As Doublen    inLocCorr_UseLocalCorr = Falsen    inLocCorr_MinCorr(0) = 0n    lambdaSlope_down(0) = 0n    lambdaSlope_up(0) = 0n    lambdaNeutral(0) = 0n    lambdaPriceChangeInterval(0) = 0n    the_process_array.initializeProcess process, tmp_corr, inLocCorr_UseLocalCorr, inLocCorr_MinCorr, lambdaSlope_down, lambdaSlope_up, lambdaNeutral, lambdaPriceChangeIntervaln    n    Set the_engine = New sy_shared_ptr_McAutocallableEngineNdn    n    'the_engine.initializeEngine the_process_array, deal_ticket.t_grid, deal_ticket.t_grid, deal_ticket.no_of_trials, 0#, deal_ticket.no_of_trials, calc_thetan    the_engine.initializeEngine the_process_array, deal_ticket.t_grid, deal_ticket.t_grid, deal_ticket.no_of_trials, 0#, deal_ticket.no_of_trials, calc_theta, inLocCorr_UseLocalCorrn    n    the_note.setPricingEngine the_enginen    n    the_greeks.value = the_note.NPV() * deal_ticket.notional '<----------------- Valuen    n    '------------------------n    ' 2015-01-05n    '------------------------n    For inx = 1 To no_of_uln        ul_prices(inx) = market.market_by_ul(deal_ticket.ul_code(inx)).s_n    Next inxn    n    the_greeks.set_all_ul_prices ul_pricesn    n    If calc_theta Thenn        the_greeks.theta = the_note.theta() * deal_ticket.notionaln    End Ifn    n    '--------------------------Delta Gamman    If calc_delta Thenn    n        If max_recursive = 0 Thenn            calc_delta = Falsen        Elsen            max_recursive = max_recursive - 1n        End Ifn        n        Dim delta_greek_up1_deltas2 As Doublen        Dim delta_greek_down1_deltas2 As Doublen        Dim delta_greek_up1_deltas3 As Doublen        Dim delta_greek_down1_deltas3 As Doublen        Dim delta_greek_up2_deltas3 As Doublen        Dim delta_greek_down2_deltas3 As Doublen        n        For inx = 0 To no_of_ul - 1n       n            If inx = no_of_ul - 1 Thenn                calc_delta = Falsen            End Ifnn            Dim s_origin As Doublen            n            Dim delta_greek_up As clsGreeksn            Dim delta_greek_down As clsGreeksn            n            Set delta_greek_up = New clsGreeksn            Set delta_greek_down = New clsGreeksn            n            n'            Dim value_up As Doublen'            Dim value_down As Doublennn            s_origin = market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_nn            '------------------------- Calc value upn            market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_ = s_origin * 1.01n            run_ac_pricing_3d delta_greek_up, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, calc_delta, False, max_recursivenn            market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_ = s_origin * 0.99n            run_ac_pricing_3d delta_greek_down, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, calc_delta, False, max_recursivenn            deltas(inx + 1) = (delta_greek_up.value - delta_greek_down.value) / (s_origin * 0.02)n            gammas(inx + 1) = (delta_greek_up.value + delta_greek_down.value - 2 * the_greeks.value) / (s_origin * 0.01) ^ 2nn            'REWINDn            market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_ = s_originn            n            If inx = 0 And calc_delta Thenn                delta_greek_up1_deltas2 = delta_greek_up.deltas(2)n                delta_greek_up1_deltas3 = delta_greek_up.deltas(3)n                delta_greek_down1_deltas2 = delta_greek_down.deltas(2)n                delta_greek_down1_deltas3 = delta_greek_down.deltas(3)n            End Ifnn            If inx = 1 And calc_delta Thenn                delta_greek_up2_deltas3 = delta_greek_up.deltas(3)n                delta_greek_down2_deltas3 = delta_greek_down.deltas(3)n            End Ifnn        Next inxnn        the_greeks.set_all_deltas deltasn        the_greeks.set_all_gammas gammasn        n        the_greeks.cross_gamma12 = (delta_greek_up1_deltas2 - delta_greek_down1_deltas2) / (market.market_by_ul(deal_ticket.ul_code(1)).s_ * 0.02)n        the_greeks.cross_gamma13 = (delta_greek_up1_deltas3 - delta_greek_down1_deltas3) / (market.market_by_ul(deal_ticket.ul_code(1)).s_ * 0.02)n        the_greeks.cross_gamma23 = (delta_greek_up2_deltas3 - delta_greek_down2_deltas3) / (market.market_by_ul(deal_ticket.ul_code(2)).s_ * 0.02)nn    End Ifn    '<--------------------------Delta Gammann    '--------------------------Vega : +1%pn    If calc_vega Thenn        For inx = 0 To no_of_ul - 1n        n            Dim vol_bump_greek As clsGreeksn            Dim vanna_greek_up As clsGreeksn            Dim vanna_greek_down As clsGreeksn            n            Set vol_bump_greek = New clsGreeksn            Set vanna_greek_up = New clsGreeksn            Set vanna_greek_down = New clsGreeksn            'Set origin_pl_currency_curve = market.pl_currency_rate_curve_n            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.bump_vol_surface 0.01n            'Set market.pl_currency_rate_curve_ = market.pl_currency_rate_curve_.copy_obj(0, 0.001)n    n            run_ac_pricing_3d vol_bump_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen            vegas(inx + 1) = vol_bump_greek.value - the_greeks.valuen            vegas(inx + 1) = vegas(inx + 1)n            n            s_origin = market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_n            '------------------------- Calc value upn            market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_ = s_origin * 1.01n            run_ac_pricing_3d vanna_greek_up, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen            n            market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_ = s_origin * 0.99n            run_ac_pricing_3d vanna_greek_down, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen            n            market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_ = s_originn            n            vannas(inx + 1) = (vanna_greek_up.value - vanna_greek_down.value) / (s_origin * 0.02) - the_greeks.deltas(inx + 1)n            vannas(inx + 1) = vannas(inx + 1)n    n            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.rewind_vol_bumpnn        Next inxn    n    End Ifn    n    the_greeks.set_all_vegas vegasn    the_greeks.set_all_vannas vannasnn    '<--------------------------Vegan    n    n    n    If calc_term_vega Then '+1%pn    n        ReDim partial_vegas(1 To no_of_ul, 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())) As Doublen        n        For inx = 1 To no_of_uln            n            For jnx = 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())n                n                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_local_vol_upto 0.01, deal_ticket.term_vega_tenor(jnx)n            n                Set vol_bump_greek = New clsGreeksn                run_ac_pricing_3d vol_bump_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen                n                partial_vegas(inx, jnx) = (vol_bump_greek.value - the_greeks.value)n                               n                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.rewind_bump_vol_upton            n            Next jnxn    n                        n        Next inxn        n        the_greeks.no_of_tenors = get_array_size_date(deal_ticket.term_vega_tenor_array())n        the_greeks.set_all_partial_vega partial_vegasn        n        the_greeks.to_term_vega deal_ticket.current_daten    n    End Ifn    n    nnn    '--------------------------Skew S.nn    If calc_skew_s Thenn        For inx = 0 To no_of_ul - 1n        n        n            Dim skew_bump_greek As clsGreeksn            Set skew_bump_greek = New clsGreeksn            n            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.s_ = market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_n            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.bump_skew -0.01n            n            run_ac_pricing_3d skew_bump_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen            skew_s(inx + 1) = (skew_bump_greek.value - the_greeks.value) * -1nn            '--- Rewindn            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.rewind_vol_bumpn            nn        Next inxn    End Ifn    the_greeks.set_all_skews skew_snn    '<--------------------------Skew S.nnn    '-------------------------- Corr S.n    If calc_corr Thennn        For inx = 0 To no_of_ul - 1n            For jnx = inx + 1 To no_of_ul - 1n            n                Dim corr_bump_greek As clsGreeksn                Set corr_bump_greek = New clsGreeksnn                market.correlation_pair_.bump_corr deal_ticket.ul_code(inx + 1), deal_ticket.ul_code(jnx + 1), 0.05n                n                run_ac_pricing_3d corr_bump_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsenn'                tmp_corr = get_corr_array(no_of_ul, market, deal_ticket)n'n'                the_process_array.initializeProcess process, tmp_corrn'                the_engine.initializeEngine the_process_array, deal_ticket.t_grid, deal_ticket.t_grid, deal_ticket.no_of_trials, 0#, deal_ticket.no_of_trials, Falsen'                the_note.setPricingEngine the_enginen'                value_up = the_note.NPV() * deal_ticket.notionalnn                corr_sens(inx + 1, jnx + 1) = (corr_bump_greek.value - the_greeks.value) / 5n                n                market.correlation_pair_.rewind deal_ticket.ul_code(inx + 1), deal_ticket.ul_code(jnx + 1)nn            Next jnxn        Next inxnn    End Ifnn    the_greeks.set_all_corr_sens corr_sensn    n    n'<-------------------------- Corr S.nn   n    If calc_rho Then '+10bp/10n        Dim tmp_greek As clsGreeksn        Dim tmp_rate_curves() As clsRateCurven        ReDim tmp_rate_curves(1 To deal_ticket.no_of_ul) As clsRateCurven     '   Dim bump_greek_set As clsGreekSetnn        Set tmp_greek = New clsGreeksn        Set origin_pl_currency_curve = market.pl_currency_rate_curve_.copy_obj()n        Set market.pl_currency_rate_curve_ = market.pl_currency_rate_curve_.copy_obj(0, 0.001)n                n        n        run_ac_pricing_3d tmp_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, False, False, False, Falsen       n        rho = (tmp_greek.value - the_greeks.value) * 0.1n        n        Set market.pl_currency_rate_curve_ = origin_pl_currency_curven        n        For inx = 1 To deal_ticket.no_of_uln            n            Set tmp_greek = New clsGreeksnn            Dim tmp_div_yield As Doublen            tmp_div_yield = market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_n            n            market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = tmp_div_yield - 0.001n                        n            run_ac_pricing_3d tmp_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, False, False, False, Falsen            n            rho_ul(inx) = (tmp_greek.value - the_greeks.value) * 0.1n            n            market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = tmp_div_yieldn            n        Next inxnn    End Ifnn    the_greeks.rho = rhon    the_greeks.set_all_rho_ul rho_ulnn    '###n    ' Lee, 2017-11-03n    rTS.dispose_comn    n    For inx = 0 To no_of_ul - 1n        qTs(inx).dispose_comn        fTs(inx).dispose_comn        volTs(inx).dispose_comn        process(inx).dispose_comn    Next inxn    n    the_process_array.dispose_comn    the_engine.dispose_comn    the_note.dispose_comnn    Exit Subn    nErrorHandler:n    '###n    ' Lee, 2017-11-03n    rTS.dispose_comn    n    For inx = 0 To no_of_ul - 1n        qTs(inx).dispose_comn        fTs(inx).dispose_comn        volTs(inx).dispose_comn        process(inx).dispose_comn    Next inxn    n    the_process_array.dispose_comn    the_engine.dispose_comnn    the_note.dispose_comn    n    raise_err "run_ac_pricing_3d", Err.descriptionnnEnd SubnnnPublic Sub run_ac_pricing_mc(ByRef the_greeks As clsGreeks _n                        , deal_ticket As clsACDealTicket _n                        , market As clsMarketSet _n                        , Optional calc_delta_gamma As Boolean = False _n                        , Optional calc_stickymoneyness_delta As Boolean = False _n                        , Optional calc_stickystrike_delta As Boolean = False _n                        , Optional calc_cross_gamma As Boolean = False _n                        , Optional calc_vega As Boolean = False _n                        , Optional calc_term_vega As Boolean = False _n                        , Optional calc_skew_s As Boolean = False _n                        , Optional calc_corr As Boolean = False _n                        , Optional calc_rho As Boolean = False _n                        , Optional calc_theta As Boolean = False _n                        , Optional inLocCorr_UseLocalCorr As Boolean = True _n                        , Optional snapshot_time As Double = 0.001)n                        ', Optional max_recursive As Integer = 1)n                        n    Dim no_of_ul As Integern    no_of_ul = deal_ticket.no_of_uln    n    Dim the_note As Objectn    Dim the_engine As Objectn    Dim rTS As Objectn    Dim qTs() As Objectn    Dim fTs() As Objectn    Dim aTs() As Object 'drift adjustment 추가: 2023.11.21n    Dim volTs() As Objectn    Dim process() As Variantn    ReDim qTs(0 To no_of_ul - 1) As Objectn    ReDim fTs(0 To no_of_ul - 1) As Objectn    ReDim aTs(0 To no_of_ul - 1) As Object 'drift adjustment 추가: 2023.11.21n    ReDim volTs(0 To no_of_ul - 1) As Objectn    ReDim process(0 To no_of_ul - 1) As Variantn    Dim the_process_array As Objectn    n    Dim ul_prices() As Doublen    Dim vegas() As Doublen    Dim vannas() As Doublen    Dim skew_s() As Doublen    Dim deltas() As Doublen    Dim sticky_strike_deltas() As Doublen    Dim gammas() As Doublen    Dim theta As Doublen    Dim rho_ul() As Doublen    ReDim ul_prices(1 To no_of_ul) As Doublen    ReDim vegas(1 To no_of_ul) As Doublen    ReDim vannas(1 To no_of_ul) As Doublen    ReDim skew_s(1 To no_of_ul) As Doublen    ReDim deltas(1 To no_of_ul) As Doublen    ReDim sticky_strike_deltas(1 To no_of_ul) As Doublen    ReDim gammas(1 To no_of_ul) As Doublen    ReDim rho_ul(1 To no_of_ul) As Doublen    n    If no_of_ul > 1 Thenn        Dim corr_sens() As Doublen        ReDim corr_sens(1 To no_of_ul, 1 To no_of_ul) As Doublen    End Ifn    n    Dim partial_vegas() As Doublenn    Dim rate_spread As Doublen    Dim day_shift As Longn    Dim rho As Doublen    n    Dim backup_market As clsMarketSetn    Dim origin_pl_currency_curve As clsRateCurven    n    Dim inx As Integern    Dim jnx As Integern    n    '<------ local correlation 추가 2019.3.27n    'Dim inLocCorr_UseLocalCorr As Booleann    'inLocCorr_UseLocalCorr = Truen    n    Dim lambdaNeutral() As Doublen    Dim lambdaSlope_down() As Doublen    Dim lambdaSlope_up() As Doublen    Dim lambdaPriceChangeInterval() As Doublen    ReDim lambdaNeutral(0 To no_of_ul - 1) As Doublen    ReDim lambdaSlope_down(0 To no_of_ul - 1) As Doublen    ReDim lambdaSlope_up(0 To no_of_ul - 1) As Doublen    ReDim lambdaPriceChangeInterval(0 To no_of_ul - 1) As Doublen    '------>/n    nOn Error GoTo ErrorHandlern    n    '[추가 필요] 상환여부 체크 -> 상환확정시 상환가 리턴 + 그릭 계산 Xn    n    If deal_ticket.instrument_type = 0 Thenn        rate_spread = deal_ticket.rate_spreadn    End Ifn    n    day_shift = deal_ticket.current_date - market.dcf_by_ccy(deal_ticket.ccy).rate_dates()(0)n    n    'Set rTs = get_rTs(market, rate_spread, day_shift) ' discount curven    Set rTS = get_rTs(market.dcf_by_ccy(deal_ticket.ccy), rate_spread, day_shift) ' discount curven    n    For inx = 0 To no_of_ul - 1n        Set qTs(inx) = get_qTs(market, deal_ticket.ul_code(inx + 1), rate_spread, day_shift)n        Set fTs(inx) = get_fTs(market, deal_ticket.ul_code(inx + 1), rate_spread, day_shift)n        Set aTs(inx) = get_aTs(market, deal_ticket.ul_code(inx + 1), rate_spread, day_shift) 'drift adjustment 추가: 2023.11.21n        n        'Set quantoHelper(inx) = get_quantoHelper(rTs, market, deal_ticket.ul_code(inx + 1), rate_spread)n        Set volTs(inx) = get_vol_surface_(deal_ticket.current_date, market, deal_ticket.ul_code(inx + 1), day_shift)n        'Set process(inx) = get_div_process(rTs, qTs(inx), fTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1), deal_ticket.ccy, deal_ticket.ratioLeverage(inx + 1))n        'div_dates에 day_shift 추가: 2018.12.05n        'Set process(inx) = get_div_process(rTs, qTs(inx), fTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1), deal_ticket.ccy, deal_ticket.ratioLeverage(inx + 1), day_shift)n        'ratioLeverage -> codeLeverage : 2020.6.19n        'Set process(inx) = get_div_process(rTS, qTs(inx), fTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1), deal_ticket.ccy, deal_ticket.codeLeverage(inx + 1), day_shift)n        'drift adjustment 추가: 2023.11.21n        Set process(inx) = get_div_process(rTS, qTs(inx), fTs(inx), aTs(inx), volTs(inx), market, deal_ticket.ul_code(inx + 1), deal_ticket.ccy, deal_ticket.codeLeverage(inx + 1), day_shift)n        n        '<------ local correlation 추가 2019.3.27n        lambdaNeutral(inx) = market.market_by_ul(deal_ticket.ul_code(inx + 1)).lambda_neutraln        lambdaSlope_down(inx) = -0.5n        lambdaSlope_up(inx) = -0.5n        lambdaPriceChangeInterval(inx) = 0.5 '6개월n        '------>/n    Next inxn    n    Set the_process_array = New sy_shared_ptr_StochasticProcessArraynn    the_process_array.initializeProcess process _n                                        , get_corr_array(no_of_ul, market, deal_ticket) _n                                        , inLocCorr_UseLocalCorr _n                                        , get_min_corr_array(no_of_ul, market, deal_ticket) _n                                        , lambdaSlope_down _n                                        , lambdaSlope_up _n                                        , lambdaNeutral _n                                        , lambdaPriceChangeIntervaln    n    '<------ local correlation 추가 2019.3.27n    Dim buffer_days As Integern    buffer_days = 5n    n    For inx = 0 To no_of_ul - 1n    n        '과거 주가 입수n        ' 과거 날짜: datesAsLong()n        ' 과거 주가: historical_prices()n        Dim start_date As Stringn        Dim end_date As Stringn        start_date = date2str(deal_ticket.current_date - Round(lambdaPriceChangeInterval(inx) * 365 + buffer_days, 0))n        end_date = date2str(deal_ticket.current_date - 1)n        n        Dim historical_date() As Longn        Dim historical_price() As Doublen        n        Call get_closing_s_series(deal_ticket.ul_code(inx + 1), start_date, end_date, historical_date(), historical_price())n        n        the_process_array.import_past_path inx, historical_date, historical_pricen        n        Erase historical_daten        Erase historical_pricen        n    Next inxn    '------>/n    n    Set the_note = ac_deal_ticket_to_clr_nd(deal_ticket)n    Set the_engine = New sy_shared_ptr_McAutocallableEngineNdn    n'    the_engine.initializeEngine the_process_array _n'                                , deal_ticket.t_grid, deal_ticket.t_grid _n'                                , deal_ticket.no_of_trials _n'                                , 0# _n'                                , deal_ticket.no_of_trials _n'                                , calc_theta _n'                                , inLocCorr_UseLocalCorr '<--추가nn    'time step 조정 반영 (2023.06.15)n    the_engine.initializeEngine the_process_array _n                                , rTS _n                                , deal_ticket.no_of_trials _n                                , deal_ticket.days_per_step _n                                , inLocCorr_UseLocalCorrn    n    the_note.setPricingEngine the_enginen    n    the_greeks.value = the_note.NPV() * deal_ticket.notionaln    n    For inx = 1 To no_of_uln        ul_prices(inx) = market.market_by_ul(deal_ticket.ul_code(inx)).s_n    Next inxn    n    If GREEKS_ENABLE = True Thenn    n        the_greeks.set_all_ul_prices ul_pricesn                n        Set backup_market = market.copy_obj()n            n        If calc_delta_gamma Thenn        n            Set market = backup_market.copy_objn            n            Dim delta_greek_up As clsGreeksn            Dim delta_greek_down As clsGreeksn    n            For inx = 1 To no_of_uln    n                Set delta_greek_up = New clsGreeksn                Set delta_greek_down = New clsGreeksn    n                market.bump_ul_price 0.01, deal_ticket.ul_code(inx)n                n                run_ac_pricing_mc delta_greek_up, deal_ticket, marketn    n                Set market = backup_market.copy_objn    n                market.bump_ul_price -0.01, deal_ticket.ul_code(inx)n                n                run_ac_pricing_mc delta_greek_down, deal_ticket, marketn    n                deltas(inx) = (delta_greek_up.value - delta_greek_down.value) / (the_greeks.ul_prices(inx) * 0.02)n                gammas(inx) = (delta_greek_up.value + delta_greek_down.value - 2 * the_greeks.value) / (the_greeks.ul_prices(inx) * 0.01) ^ 2n    n                Set market = backup_market.copy_objn                n            Next inxn            n            Set delta_greek_up = Nothingn            Set delta_greek_down = Nothingn                n            the_greeks.set_all_deltas deltasn            the_greeks.set_all_gammas gammasn    n        End Ifn        n        If calc_stickymoneyness_delta Thenn        n            Set market = backup_market.copy_objn            n            Dim stickymoneyness_delta_greek_up As clsGreeksn            Dim stickymoneyness_delta_greek_down As clsGreeksn    n            For inx = 1 To no_of_uln    n                Set stickymoneyness_delta_greek_up = New clsGreeksn                Set stickymoneyness_delta_greek_down = New clsGreeksn    n                market.bump_ul_price 0.01, deal_ticket.ul_code(inx)n                n                '<----- for the sticky moneyness model 2018.09.07n                Dim shifted_strikes() As Doublen                shifted_strikes = market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.get_all_strikesn                Dim i_strike As Integern                For i_strike = 1 To market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.no_of_strikesn                    shifted_strikes(i_strike) = shifted_strikes(i_strike) * 1.01n                Next i_striken                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn                '------>n                n                run_ac_pricing_mc stickymoneyness_delta_greek_up, deal_ticket, marketn    n                Set market = backup_market.copy_objn    n                market.bump_ul_price -0.01, deal_ticket.ul_code(inx)n                n                '<----- for the sticky moneyness model 2018.09.07n                shifted_strikes = market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.get_all_strikesn                For i_strike = 1 To market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.no_of_strikesn                    shifted_strikes(i_strike) = shifted_strikes(i_strike) * 0.99n                Next i_striken                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.grid_.set_strikes shifted_strikesn                '------>n                n                run_ac_pricing_mc stickymoneyness_delta_greek_down, deal_ticket, marketn    n                deltas(inx) = (stickymoneyness_delta_greek_up.value - stickymoneyness_delta_greek_down.value) / (the_greeks.ul_prices(inx) * 0.02)n                gammas(inx) = (stickymoneyness_delta_greek_up.value + stickymoneyness_delta_greek_down.value - 2 * the_greeks.value) / (the_greeks.ul_prices(inx) * 0.01) ^ 2n    n                Set market = backup_market.copy_objn                n            Next inxn            n            Set stickymoneyness_delta_greek_up = Nothingn            Set stickymoneyness_delta_greek_down = Nothingn                n            the_greeks.set_all_sticky_moneyness_deltas deltasn            the_greeks.set_all_sticky_moneyness_gammas gammasn        n        End Ifn        n        If calc_cross_gamma Thenn        n            Set market = backup_market.copy_objn                n            Dim delta_greek_up1_deltas2 As Doublen            Dim delta_greek_down1_deltas2 As Doublen            Dim delta_greek_up1_deltas3 As Doublen            Dim delta_greek_down1_deltas3 As Doublen            Dim delta_greek_up2_deltas3 As Doublen            Dim delta_greek_down2_deltas3 As Doublen    n            For inx = 1 To no_of_ul - 1n    n                Set delta_greek_up = New clsGreeksn                Set delta_greek_down = New clsGreeksn                n                market.bump_ul_price 0.01, deal_ticket.ul_code(inx)n                n                run_ac_pricing_mc delta_greek_up, deal_ticket, market, Truen                n                Set market = backup_market.copy_objn                n                market.bump_ul_price -0.01, deal_ticket.ul_code(inx)n                n                run_ac_pricing_mc delta_greek_down, deal_ticket, market, Truen    n                If inx = 1 Thenn                    delta_greek_up1_deltas2 = delta_greek_up.deltas(2)n                    delta_greek_up1_deltas3 = delta_greek_up.deltas(3)n                    delta_greek_down1_deltas2 = delta_greek_down.deltas(2)n                    delta_greek_down1_deltas3 = delta_greek_down.deltas(3)n                End Ifn    n                If inx = 2 Thenn                    delta_greek_up2_deltas3 = delta_greek_up.deltas(3)n                    delta_greek_down2_deltas3 = delta_greek_down.deltas(3)n                End Ifn    n                Set market = backup_market.copy_objn    n            Next inxn            n            Set delta_greek_up = Nothingn            Set delta_greek_down = Nothingn    n            the_greeks.cross_gamma12 = (delta_greek_up1_deltas2 - delta_greek_down1_deltas2) / (ul_prices(1) * 0.02)n            the_greeks.cross_gamma13 = (delta_greek_up1_deltas3 - delta_greek_down1_deltas3) / (ul_prices(1) * 0.02)n            the_greeks.cross_gamma23 = (delta_greek_up2_deltas3 - delta_greek_down2_deltas3) / (ul_prices(2) * 0.02)n    n        End Ifn    n        'vega : +1%pn        If calc_vega Thenn        n            Set market = backup_market.copy_objn    n            Dim vol_bump_greek As clsGreeksn            n            For inx = 1 To no_of_uln    n                Set vol_bump_greek = New clsGreeksn    n                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_vol_surface 0.01n    n                run_ac_pricing_mc vol_bump_greek, deal_ticket, marketn    n                vegas(inx) = vol_bump_greek.value - the_greeks.valuen                'vannas(inx) = vol_bump_greek.deltas(inx) - the_greeks.deltas(inx)n    n                Set market = backup_market.copy_objn                n            Next inxn            n            Set vol_bump_greek = Nothingn                n            the_greeks.set_all_vegas vegasn            'the_greeks.set_all_vannas vannasn    n        End Ifn    n    '    If calc_term_vega Then '+1%pn    'n    '        ReDim partial_vegas(1 To no_of_ul, 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())) As Doublen    'n    '        For inx = 1 To no_of_uln    'n    '            For jnx = 1 To get_array_size_date(deal_ticket.term_vega_tenor_array())n    'n    '                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.bump_local_vol_upto 0.01, deal_ticket.term_vega_tenor(jnx)n    'n    '                Set vol_bump_greek = New clsGreeksn    '                run_ac_pricing_3d vol_bump_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen    'n    '                partial_vegas(inx, jnx) = (vol_bump_greek.value - the_greeks.value)n    'n    '                market.market_by_ul(deal_ticket.ul_code(inx)).sabr_surface_.local_vol_surface.rewind_bump_vol_upton    'n    '            Next jnxn    'n    'n    '        Next inxn    'n    '        the_greeks.no_of_tenors = get_array_size_date(deal_ticket.term_vega_tenor_array())n    '        the_greeks.set_all_partial_vega partial_vegasn    'n    '        the_greeks.to_term_vega deal_ticket.current_daten    'n    '    End Ifn    'n    '    If calc_skew_s Thenn    '        For inx = 0 To no_of_ul - 1n    'n    'n    '            Dim skew_bump_greek As clsGreeksn    '            Set skew_bump_greek = New clsGreeksn    'n    '            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.s_ = market.market_by_ul(deal_ticket.ul_code(inx + 1)).s_n    '            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.bump_skew -0.01n    'n    '            run_ac_pricing_3d skew_bump_greek, deal_ticket, market, bump_greek_set, False, False, False, False, False, snapshot_time, ignore_smoothing, False, False, Falsen    '            skew_s(inx + 1) = (skew_bump_greek.value - the_greeks.value) * -1n    'n    '            '--- Rewindn    '            market.market_by_ul(deal_ticket.ul_code(inx + 1)).sabr_surface_.rewind_vol_bumpn    'n    'n    '        Next inxn    'n    '        the_greeks.set_all_skews skew_sn    'n    '    End Ifn    n    n    '    If calc_corr Thenn    'n    '        Set market = backup_market.copy_objn    'n    '        For inx = 0 To no_of_ul - 1n    'n    '            Dim lambda_bump_greek As clsGreeksn    '            Set lambda_bump_greek = New clsGreeksn    'n    '            market.market_by_ul(deal_ticket.ul_code(inx + 1)).lambda_neutral = market.market_by_ul(deal_ticket.ul_code(inx + 1)).lambda_neutral + 0.01n    'n    '            run_ac_pricing_mc lambda_bump_greek, deal_ticket, marketn    'n    '            deltas(inx) = (lambda_bump_greek.value - the_greeks.ul_prices(inx)) / 0.01n    'n    '            Set market = backup_market.copy_objn    'n    '        Next inxn    'n    '        the_greeks.set_all_corr_sens corr_sensn    'n    '    End Ifn    n    n        If calc_rho Then '+10bp/10n        n            Set market = backup_market.copy_objn    n            Dim tmp_greek As New clsGreeksn            n            'notionaln            market.set_pl_currency_rate_curve get_ccy_idx(deal_ticket.ccy), market.dcf_by_ccy(deal_ticket.ccy).copy_obj(0, 0.001)n            n            run_ac_pricing_mc tmp_greek, deal_ticket, marketn    n            rho = (tmp_greek.value - the_greeks.value) * 0.1n    n            the_greeks.rho = rhon    n            Set market = backup_market.copy_objn    n            'underlying assetn            For inx = 1 To deal_ticket.no_of_uln                n                Set tmp_greek = New clsGreeksn    n                market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ = market.market_by_ul(deal_ticket.ul_code(inx)).div_yield_ - 0.001n    n                run_ac_pricing_mc tmp_greek, deal_ticket, marketn    n                rho_ul(inx) = (tmp_greek.value - the_greeks.value) * 0.1n                n                Set market = backup_market.copy_objn                n            Next inxn            n            Set tmp_greek = Nothingn                n            the_greeks.set_all_rho_ul rho_uln            n        End Ifn        n        If calc_theta Thenn            n            'dll(2023.05.30)n            Dim theta_greek_1d As New clsGreeksn            n            deal_ticket.current_date = deal_ticket.current_date + 1n            n            run_ac_pricing_mc theta_greek_1d, deal_ticket, marketn            n            'the_greeks.theta = the_note.theta() * deal_ticket.notionaln            the_greeks.theta = (theta_greek_1d.value - the_greeks.value) * 365n            n            deal_ticket.current_date = deal_ticket.current_date - 1n    n            Set theta_greek_1d = Nothingn    n        End Ifn    n    End Ifnnn    '###n    ' Lee, 2017-11-03n    rTS.dispose_comn    Set rTS = Nothingn    n    For inx = 0 To no_of_ul - 1n        qTs(inx).dispose_comn        fTs(inx).dispose_comn        volTs(inx).dispose_comn        process(inx).dispose_comn        Set qTs(inx) = Nothingn        Set fTs(inx) = Nothingn        Set volTs(inx) = Nothingn        Set process(inx) = Nothingn    Next inxn    n    the_process_array.dispose_comn    Set the_process_array = Nothingn    n    the_engine.dispose_comn    Set the_engine = Nothingn    n    the_note.dispose_comn    Set the_note = Nothingn       n    Set backup_market = Nothingn    Set origin_pl_currency_curve = Nothingn    n    Exit Subn    nErrorHandler:n    '###n    ' Lee, 2017-11-03n    rTS.dispose_comn    Set rTS = Nothingn    n    For inx = 0 To no_of_ul - 1n        qTs(inx).dispose_comn        fTs(inx).dispose_comn        volTs(inx).dispose_comn        process(inx).dispose_comn        Set qTs(inx) = Nothingn        Set fTs(inx) = Nothingn        Set volTs(inx) = Nothingn        Set process(inx) = Nothingn    Next inxn    n    the_process_array.dispose_comn    Set the_process_array = Nothingn    n    the_engine.dispose_comn    Set the_engine = Nothingn    n    the_note.dispose_comn    Set the_note = Nothingn       n    Set backup_market = Nothingn    Set origin_pl_currency_curve = Nothingn    n    raise_err "run_ac_pricing_mc", Err.descriptionnnEnd SubnnnPublic Function get_ac_duration_2d(deal_ticket As clsACDealTicket, market As clsMarketSet) As Doublen    n    Dim tmp_deal_ticket As clsACDealTicketn    Dim last_node() As Doublen    Dim tmp_greeks As New clsGreeksn    nOn Error GoTo ErrorHandlernn    Set tmp_deal_ticket = deal_ticket.copy_objn    n    tmp_deal_ticket.set_to_duration_mode 0.035n    n    'run_ac_calculation_2d tmp_greeks, tmp_deal_ticket, marketn    Dim dummy_set As clsGreekSetn    run_ac_pricing_2d tmp_greeks, tmp_deal_ticket, market, dummy_setn        n    'End Ifn    n        n    get_ac_duration_2d = tmp_greeks.value / tmp_deal_ticket.notionaln    n    Exit Functionn    nErrorHandler:nnn    raise_err "get_ac_duration", Err.descriptionn    nEnd FunctionnnPublic Function get_ac_duration_3d(deal_ticket As clsACDealTicket, market As clsMarketSet) As Doublen    n    Dim tmp_deal_ticket As clsACDealTicketn    Dim last_node() As Doublen    Dim tmp_greeks As New clsGreeksn    nOn Error GoTo ErrorHandlernn    Set tmp_deal_ticket = deal_ticket.copy_objn    n    tmp_deal_ticket.set_to_duration_mode 0.035n    n    Dim dummy_set As clsGreekSetn    'run_ac_calculation_3d tmp_greeks, tmp_deal_ticket, marketn    run_ac_pricing_3d tmp_greeks, tmp_deal_ticket, market, dummy_set, , , , , , , , , , Falsen        n    'End Ifn    n        n    get_ac_duration_3d = tmp_greeks.value / tmp_deal_ticket.notionaln    n    Exit Functionn    nErrorHandler:nnn    raise_err "get_ac_duration_3d"n    nEnd FunctionnPublic Function get_ac_duration(deal_ticket As clsACDealTicket, market As clsMarketSet) As Doublen    n    Dim tmp_deal_ticket As clsACDealTicketn    Dim last_node() As Doublen    Dim tmp_greeks As New clsGreeksn    Dim bump_greek_set As New clsGreekSetn    nOn Error GoTo ErrorHandlernn    Set tmp_deal_ticket = deal_ticket.copy_objn    n    tmp_deal_ticket.set_to_duration_mode 0.025n    n    'If tmp_deal_ticket.no_of_ul = 1 Thennn    run_ac_pricing_1d tmp_greeks, tmp_deal_ticket, market, bump_greek_set, False, False, False, False, 0.001, False, Falsen        n    'End Ifn    n        n    get_ac_duration = tmp_greeks.value / tmp_deal_ticket.notionaln    n    Exit Functionn    nErrorHandler:nnn    raise_err "get_ac_duration", Err.descriptionn    nEnd FunctionnPublic Function get_ac_call_prob_for_all_seq_2d(deal_ticket As clsACDealTicket, market As clsMarketSet) As Double()n    n    Dim tmp_deal_ticket As clsACDealTicketn    Dim last_node() As Doublen    Dim tmp_greeks As New clsGreeksn    n    Dim inx As Integern    Dim call_prob() As Doublen    nOn Error GoTo ErrorHandlernn    ReDim call_prob(1 To deal_ticket.no_of_schedule) As Doublenn    For inx = 1 To deal_ticket.no_of_schedulen    n        call_prob(inx) = get_ac_call_prob_by_seq_2d(deal_ticket, market, inx)n        n    Next inxn    n        n    get_ac_call_prob_for_all_seq_2d = call_probn    n    Exit Functionn    nErrorHandler:nnn    raise_err "get_ac_call_prob_for_all_seq_2d", Err.descriptionn    nEnd FunctionnPublic Function get_ac_call_prob_by_seq_2d(deal_ticket As clsACDealTicket, market As clsMarketSet, seq As Integer) As Doublen    n    Dim tmp_deal_ticket As clsACDealTicketn    Dim last_node() As Doublen    Dim tmp_greeks As New clsGreeksn        n    Dim call_prob As Doublen    nOn Error GoTo ErrorHandlernn    call_prob = 0nn    n    n    If seq <= deal_ticket.no_of_schedule Thenn    n        Set tmp_deal_ticket = deal_ticket.copy_objn    n        tmp_deal_ticket.set_to_call_prob_mode 0.035, seqn        n        'run_ac_calculation_2d tmp_greeks, tmp_deal_ticket, marketn        Dim dummy_set As clsGreekSetn        run_ac_pricing_2d tmp_greeks, tmp_deal_ticket, market, dummy_setn        n        call_prob = call_prob + tmp_greeks.value / tmp_deal_ticket.notionaln                n    End Ifn        n    get_ac_call_prob_by_seq_2d = call_probn    n    Exit Functionn    nErrorHandler:nnn    raise_err "get_ac_call_prob_by_seq_2d", Err.descriptionn    nEnd FunctionnPublic Function get_ac_call_prob_2d(deal_ticket As clsACDealTicket, market As clsMarketSet, call_until As Date) As Doublen    n    'Dim tmp_deal_ticket As clsACDealTicketn    Dim last_node() As Doublen    Dim tmp_greeks As New clsGreeksn    n    Dim inx As Integern    Dim call_prob As Doublen    nOn Error GoTo ErrorHandlernn    call_prob = 0nn  '  Set tmp_deal_ticket = deal_ticket.copy_objn    n    For inx = 1 To deal_ticket.no_of_schedulen    n        If deal_ticket.call_dates()(inx) > deal_ticket.current_date _n        And deal_ticket.call_dates()(inx) <= call_until Thenn            n            call_prob = call_prob + get_ac_call_prob_by_seq_2d(deal_ticket, market, inx)  'tmp_greeks.value / tmp_deal_ticket.notionaln                    n        End Ifn            n    Next inxn        n    get_ac_call_prob_2d = call_probn    n    Exit Functionn    nErrorHandler:nnn    raise_err "get_ac_duration", Err.descriptionn    nEnd FunctionnnPublic Function ac_deal_ticket_to_clr_nd(ac_deal_ticket As clsACDealTicket) As SYPricerInterop.shared_ptr_AutocallableNoteNDn    n    Dim rtn_obj As Objectn    Dim thePayoff As Objectn    Dim theExercise As Objectn    Dim percentStrikes() As Doublen    Dim percentStrikesAtMaturity() As Doublen    Dim couponOnCalls() As Doublen    Dim no_of_schedule As Integern    Dim inx As Integern    n    Set rtn_obj = New shared_ptr_AutocallableNoteNDn    Set thePayoff = New shared_ptr_AutocallablePayoffNDn    Set theExercise = New sy_shared_ptr_EuropeanExercisen     n    thePayoff.initializePayoff (1 - 2 * ac_deal_ticket.call_put) _n                             , ac_deal_ticket.percent_strikes_at_maturity(0) _n                             , ac_deal_ticket.coupon_at_maturity _n                             , ac_deal_ticket.abs_ki_barriers(0) _n                             , ac_deal_ticket.dummy_coupon _n                             , ac_deal_ticket.reference_prices(0) _n                             , ac_deal_ticket.put_strike _n                             , ac_deal_ticket.put_participation _n                             , ac_deal_ticket.put_additional_coupon _n                             , ac_deal_ticket.call_strike _n                             , ac_deal_ticket.call_participation _n                             , (ac_deal_ticket.ki_barrier_flag = 1) _n                             , (ac_deal_ticket.ki_touched_flag = 1) _n                             , ac_deal_ticket.strike_shift_at_maturity _n                             , ac_deal_ticket.no_of_ul _n                             , 0 _n                             , ac_deal_ticket.performance_type_at_maturity _n                             , ac_deal_ticket.floor_value _n                             , ac_deal_ticket.ki_adj_pct _n                             , ac_deal_ticket.ki_performance_typen                             n    theExercise.initializeExerciseInt ac_deal_ticket.maturity_daten    n'    rtn_obj.initializeNote thePayoff, theExercise _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_call_array(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n'                         , (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freqn'    rtn_obj.initializeNote thePayoff, theExercise _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_call_array(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.strike_shift(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n'                         , (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n'                         , ac_deal_ticket.early_exit_flag, ac_deal_ticket.early_exit_touched_flag, ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freqn'    rtn_obj.initializeNote thePayoff, theExercise _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_call_array(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.strike_shift(0) _n'                         , ac_deal_ticket.performance_type(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n'                         , (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n'                         , ac_deal_ticket.early_exit_flag, ac_deal_ticket.early_exit_touched_flag, ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freqn'    rtn_obj.initializeNote thePayoff, theExercise _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_call_array(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.strike_shift(0) _n'                         , ac_deal_ticket.performance_type(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n'                         , (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n'                         , ac_deal_ticket.early_exit_flag, ac_deal_ticket.early_exit_touched_flags(0), ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freqn'dll: 2018.8.8n'    rtn_obj.initializeNote thePayoff, theExercise _n'                         , ac_deal_ticket.value_date _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_call_array(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.strike_shift(0) _n'                         , ac_deal_ticket.performance_type(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n'                         , (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n'                         , ac_deal_ticket.early_exit_flag, ac_deal_ticket.early_exit_touched_flags(0), ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n'                         , ac_deal_ticket.early_exit_performance_types(0), ac_deal_ticket.early_exit_barrier_types(0) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freqn'n'dll: 2021.11.22 ... ejectable 구조n'dll: 2023.05.31 ... time step 변경 (ac_deal_ticket.value_date 추가)n'dll: 2024.06.10 ... memory 구조 반영 (monthly_coupon_memory_flag, unpaid_coupon 추가)n    rtn_obj.initializeNote thePayoff, theExercise _n                         , CLng(ac_deal_ticket.value_date) _n                         , ac_deal_ticket.call_dates(0) _n                         , ac_deal_ticket.coupon_on_call_array(0) _n                         , ac_deal_ticket.abs_strikes(0) _n                         , ac_deal_ticket.strike_shift(0) _n                         , ac_deal_ticket.performance_type(0) _n                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n                         , (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n                         , (ac_deal_ticket.monthly_coupon_memory_flag = 1), (ac_deal_ticket.unpaid_coupon = 0) _n                         , ac_deal_ticket.early_exit_flag, ac_deal_ticket.early_exit_touched_flags(0), ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n                         , ac_deal_ticket.early_exit_performance_types(0), ac_deal_ticket.early_exit_barrier_types(0) _n                         , ac_deal_ticket.ejectable_flag, ac_deal_ticket.ejected_ul_flag(0), ac_deal_ticket.ejected_event_flag(0), ac_deal_ticket.ejectable_order(0) _n                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freqn                        n    Set ac_deal_ticket_to_clr_nd = rtn_objnnEnd FunctionnnnPublic Function ac_deal_ticket_to_clr_2d(ac_deal_ticket As clsACDealTicket) As SYPricerInterop.shared_ptr_AutocallableNote2Dn    Dim holiday_list__(0 To 0) As Longnn    holiday_list__(0) = 42000n    n    Dim rtn_obj As Objectn    Dim thePayoff As Objectn    Dim theExercise As Objectn    Dim percentStrikes() As Doublen    Dim percentStrikesAtMaturity() As Doublen    Dim couponOnCalls() As Doublen    Dim no_of_schedule As Integern    Dim inx As Integern    n    Set rtn_obj = New shared_ptr_AutocallableNote2Dn    Set thePayoff = New shared_ptr_AutocallablePayoffNDn    Set theExercise = New sy_shared_ptr_EuropeanExercisen     n    thePayoff.initializePayoff (1 - 2 * ac_deal_ticket.call_put) _n                             , ac_deal_ticket.percent_strikes_at_maturity(0) _n                             , ac_deal_ticket.coupon_at_maturity _n                             , ac_deal_ticket.abs_ki_barriers(0) _n                             , ac_deal_ticket.dummy_coupon _n                             , ac_deal_ticket.reference_prices(0) _n                             , ac_deal_ticket.put_strike _n                             , ac_deal_ticket.put_participation _n                             , ac_deal_ticket.put_additional_coupon _n                             , ac_deal_ticket.call_strike _n                             , ac_deal_ticket.call_participation _n                             , (ac_deal_ticket.ki_barrier_flag = 1) _n                             , (ac_deal_ticket.ki_touched_flag = 1) _n                             , ac_deal_ticket.strike_shift_at_maturity _n                             , ac_deal_ticket.no_of_ul _n                             , 0 _n                             , ac_deal_ticket.performance_type_at_maturity _n                             , ac_deal_ticket.floor_value _n                             , ac_deal_ticket.ki_adj_pct _n                             , ac_deal_ticket.ki_performance_typen                             n                             n                             n    theExercise.initializeExerciseInt ac_deal_ticket.maturity_daten                             n                              n    n'    rtn_obj.initializeNote thePayoff, theExercise, ac_deal_ticket.value_date _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_call_array(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n'                         , ac_deal_ticket.floating_coupon_dates(0), ac_deal_ticket.floating_fixing_values(0), (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n'                         , (ac_deal_ticket.early_exit_flag = 1), ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0) _n'                         , ac_deal_ticket.ra_tenor, ac_deal_ticket.ra_cpn, holiday_list__, ac_deal_ticket.abs_ra_min(0), ac_deal_ticket.abs_ra_max(0), (ac_deal_ticket.ra_flag = 1) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freq _n'                         , ac_deal_ticket.rate_spread, ac_deal_ticket.instrument_type, 0n    rtn_obj.initializeNote thePayoff, theExercise, ac_deal_ticket.value_date _n                         , ac_deal_ticket.call_dates(0) _n                         , ac_deal_ticket.coupon_on_call_array(0) _n                         , ac_deal_ticket.abs_strikes(0) _n                         , ac_deal_ticket.strike_shift(0) _n                         , ac_deal_ticket.performance_type(0) _n                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.abs_coupon_barriers(0) _n                         , ac_deal_ticket.floating_coupon_dates(0), ac_deal_ticket.floating_fixing_values(0), (ac_deal_ticket.monthly_coupon_flag = 1), ac_deal_ticket.monthly_coupon_amt(0) _n                         , (ac_deal_ticket.early_exit_flag = 1), ac_deal_ticket.early_exit_touched_flag, ac_deal_ticket.abs_early_exit_barriers(0), ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n                         , ac_deal_ticket.ra_tenor, ac_deal_ticket.ra_cpn, holiday_list__, ac_deal_ticket.abs_ra_min(0), ac_deal_ticket.abs_ra_max(0), (ac_deal_ticket.ra_flag = 1) _n                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freq _n                         , ac_deal_ticket.rate_spread, ac_deal_ticket.instrument_type, 0n                         n    n    Set ac_deal_ticket_to_clr_2d = rtn_objn    n    nnEnd FunctionnnPublic Function ac_deal_ticket_to_clr(ac_deal_ticket As clsACDealTicket) As SYPricerInterop.shared_ptr_AutocallableNoten    n    Dim holiday_list__(0 To 0) As Longnn    holiday_list__(0) = 42000n    n    Dim rtn_obj As Objectn    Dim thePayoff As Objectn    Dim theExercise As Objectn    Dim percentStrikes() As Doublen    Dim percentStrikesAtMaturity() As Doublen    Dim couponOnCalls() As Doublen    Dim no_of_schedule As Integern    Dim inx As Integern    n    Set rtn_obj = New shared_ptr_AutocallableNoten    Set thePayoff = New shared_ptr_AutocallablePayoffNDn    Set theExercise = New sy_shared_ptr_EuropeanExercisen     n    thePayoff.initializePayoff (1 - 2 * ac_deal_ticket.call_put) _n                             , ac_deal_ticket.percent_strikes_at_maturity(0) _n                             , ac_deal_ticket.coupon_at_maturity _n                             , ac_deal_ticket.abs_ki_barriers(0) _n                             , ac_deal_ticket.dummy_coupon _n                             , ac_deal_ticket.reference_prices(0) _n                             , ac_deal_ticket.put_strike _n                             , ac_deal_ticket.put_participation _n                             , ac_deal_ticket.put_additional_coupon _n                             , ac_deal_ticket.call_strike _n                             , ac_deal_ticket.call_participation _n                             , (ac_deal_ticket.ki_barrier_flag = 1) _n                             , (ac_deal_ticket.ki_touched_flag = 1) _n                             , ac_deal_ticket.strike_shift_at_maturity _n                             , ac_deal_ticket.no_of_ul _n                             , 0 _n                             , ac_deal_ticket.performance_type_at_maturity _n                             , ac_deal_ticket.floor_value _n                             , ac_deal_ticket.ki_adj_pct _n                             , ac_deal_ticket.ki_performance_typenn                             n                             n    theExercise.initializeExerciseInt ac_deal_ticket.maturity_daten                             n                              n    n'    rtn_obj.initializeNote thePayoff, theExercise, ac_deal_ticket.value_date _n'                         , ac_deal_ticket.call_dates(0) _n'                         , ac_deal_ticket.coupon_on_calls(0) _n'                         , ac_deal_ticket.abs_strikes(0) _n'                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.monthly_coupon_amt(0), ac_deal_ticket.percent_coupon_barriers(0), (ac_deal_ticket.monthly_coupon_flag = 1) _n'                         , ac_deal_ticket.ra_tenor, ac_deal_ticket.ra_cpn, holiday_list__, ac_deal_ticket.ra_min_percent * ac_deal_ticket.reference_price, ac_deal_ticket.ra_max_percent * ac_deal_ticket.reference_price, (ac_deal_ticket.ra_flag = 1) _n'                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freq _n'                         , ac_deal_ticket.rate_spread, 0n    rtn_obj.initializeNote thePayoff, theExercise, ac_deal_ticket.value_date _n                         , ac_deal_ticket.call_dates(0) _n                         , ac_deal_ticket.coupon_on_call_array(0) _n                         , ac_deal_ticket.abs_strikes(0) _n                         , ac_deal_ticket.strike_shift(0) _n                         , ac_deal_ticket.coupon_dates(0), ac_deal_ticket.monthly_coupon_amt(0), ac_deal_ticket.abs_coupon_barriers(0), (ac_deal_ticket.monthly_coupon_flag = 1) _n                         , (ac_deal_ticket.early_exit_flag = 1), ac_deal_ticket.early_exit_barrier, ac_deal_ticket.early_exit_touched_flag, ac_deal_ticket.early_exit_dates(0), ac_deal_ticket.early_exit_coupon_amt(0), ac_deal_ticket.early_exit_strike_shift(0) _n                         , ac_deal_ticket.ra_tenor, ac_deal_ticket.ra_cpn, holiday_list__, ac_deal_ticket.ra_min_percent * ac_deal_ticket.reference_price, ac_deal_ticket.ra_max_percent * ac_deal_ticket.reference_price, (ac_deal_ticket.ra_flag = 1) _n                         , ac_deal_ticket.ki_barrier_shift, ac_deal_ticket.ki_monitoring_freq _n                         , ac_deal_ticket.rate_spreadn                         n    n    Set ac_deal_ticket_to_clr = rtn_objn    n    nnEnd Functionn'n'Private Sub run_ac_calculation(ByRef the_greeks As clsGreeks, deal_ticket As clsACDealTicket, market As clsMarket, last_node() As Double _n'                            , Optional flush_last_node As Long = 0, Optional ignore_smoothing As Boolean = False) ', Optional mid_day_greek As Boolean = False)n'n'    Dim success_fail As Longn'n'    Dim value As Doublen'    Dim delta As Doublen'    Dim gamma As Doublen'n'    Dim vega As Doublen'    Dim theta As Doublen'    Dim tmp_strike_shift As Doublen'    Dim tmp_ki_barrier As Doublen'n'    Dim tmp_ki_touched As Integern'n'    Dim tmp_mid_day_greek As Integern'n'On Error GoTo ErrorHandlern'n'    If ignore_smoothing Thenn'n'        tmp_strike_shift = 0n'n'    Elsen'n'        tmp_strike_shift = deal_ticket.strike_shiftn'n'    End Ifn'n'    If deal_ticket.mid_day_greek Thenn'n'        tmp_mid_day_greek = 1n'n'    Elsen'n'        tmp_mid_day_greek = 0n'n'    End Ifn'n'n'    If (deal_ticket.ki_barrier * deal_ticket.reference_price >= market.s_ And deal_ticket.call_put = 0) _n'    Or (deal_ticket.ki_barrier * deal_ticket.reference_price <= market.s_ And deal_ticket.call_put = 1) Thenn'n'        tmp_ki_touched = 1n'n'    Elsen'n'        tmp_ki_touched = deal_ticket.ki_touched_flagn'n'    End Ifn'n'    '--------------------------------------------------n'    ' KI Barrier. Refer to Kou.n'    '--------------------------------------------------n'n'n'    tmp_ki_barrier = deal_ticket.ki_barrier * Exp(-0.5826 * Sqr(market.heston_parameters_.v_long) * Sqr(deal_ticket.ki_monitoring_freq / 250))n'n''Dim tmp_array_1(1 To 1) As Longn''Dim tmp_array_2(1 To 1) As Doublen''Dim tmp_var_1 As Doublen''n''tmp_array_1(1) = 10000n''tmp_array_2(1) = 0.5n'n'n'   ' success_fail = heston_ac_greeks(value, delta, gamma, vega, theta _n'                 , market.S_ _n'                 , market.rate_curve_.rate_dates, market.rate_curve_.spread_dcf(deal_ticket.rate_spread) _n'                 , market.div_schedule_.get_div_dates, market.div_schedule_.get_divs, deal_ticket.rate_spread _n'                 , market.heston_parameters_.v_initial, market.heston_parameters_.lamda, market.heston_parameters_.v_long, market.heston_parameters_.eta, market.heston_parameters_.rho _n'                 , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.v_grid _n'                 , deal_ticket.call_put, deal_ticket.strike_at_maturity, deal_ticket.coupon_at_maturity, deal_ticket.dummy_coupon, CLng(deal_ticket.maturity_date) _n'                 , tmp_ki_barrier, deal_ticket.reference_price, deal_ticket.ki_barrier_flag, deal_ticket.ki_touched_flag, deal_ticket.put_strike, deal_ticket.put_participation _n'                 , deal_ticket.call_dates, deal_ticket.percent_strikes, deal_ticket.coupon_on_calls, tmp_strike_shift _n'                 , CLng(deal_ticket.current_date), deal_ticket.scheme_type, last_node, flush_last_node _n'                 )n'n'    success_fail = heston_ac_greeks(value, delta, gamma, vega, theta _n'                 , market.s_ _n'                 , market.rate_curve_.rate_dates, market.rate_curve_.spread_dcf(deal_ticket.rate_spread) _n'                 , market.div_schedule_.get_div_dates, market.div_schedule_.get_divs, deal_ticket.rate_spread _n'                 , market.heston_parameters_.v_initial, market.heston_parameters_.lamda, market.heston_parameters_.v_long, market.heston_parameters_.eta, market.heston_parameters_.rho _n'                 , deal_ticket.t_grid, deal_ticket.x_grid, deal_ticket.v_grid _n'                 , deal_ticket.call_put, deal_ticket.strike_at_maturity, deal_ticket.coupon_at_maturity, deal_ticket.dummy_coupon, CLng(deal_ticket.maturity_date) _n'                 , tmp_ki_barrier, deal_ticket.reference_price, deal_ticket.ki_barrier_flag, tmp_ki_touched, deal_ticket.put_strike, deal_ticket.put_participation _n'                 , deal_ticket.call_dates, deal_ticket.percent_strikes, deal_ticket.coupon_on_calls, tmp_strike_shift _n'                 , CLng(deal_ticket.current_date), deal_ticket.scheme_type, last_node, flush_last_node _n'                 , deal_ticket.monthly_coupon_flag, deal_ticket.coupon_dates, deal_ticket.percent_coupon_barriers, deal_ticket.monthly_coupon_amount, tmp_mid_day_greek)n'n'    If success_fail = 1 Thenn'n'        the_greeks.value = value * deal_ticket.notionaln'        the_greeks.delta = delta * deal_ticket.notionaln'        the_greeks.gamma = gamma * deal_ticket.notionaln'        the_greeks.vega = vega * deal_ticket.notionaln'        the_greeks.theta = theta * deal_ticket.notionaln'n'n'    Elsen'n'        raise_err "run_ac_calculation"n'n'    End Ifn'n'    market.heston_parameters_.rewindn'n'n'    Exit Subn'n'ErrorHandler:n'n'    market.heston_parameters_.rewindn'n'    raise_err "run_ac_calculation", Err.descriptionn'n'End Subnn'----------------------------------------------n' Sub: retrieve_a_dealn' DESC: RETRIEVE a deal from DB.n'-----------------------------------------------nPublic Function retrieve_ac_deal(ByRef deal_ticket As clsACDealTicket) As Booleannn    Dim no_of_schedule As Integern    Dim schedule() As Daten    Dim coupon_on_call() As Doublen    Dim strike() As Doublen    Dim data_found As Booleann    n    Dim no_of_coupon_schedule As Integern    Dim coupon_schedule() As Daten    Dim monthly_coupon_amount() As Doublen    Dim coupon_barrier() As Doublen    n    Dim no_of_floating_schedule As Integern    Dim floating_schedule() As Daten    Dim fixing_value() As Doublen    n    n    Dim no_of_dim As Integern    nOn Error GoTo ErrorHandlernn    DBConnectorn    n    no_of_dim = retrieve_ac_ul_cnt(deal_ticket.asset_code)n    n    If no_of_dim >= 1 Thenn    n        deal_ticket.set_ul_dim no_of_dimn        retrieve_ac_deal_header_sql deal_ticket, deal_ticket.asset_coden        retrieve_ac_deal_ul_sql deal_ticket, deal_ticket.asset_coden        n        deal_ticket.current_date = config__.current_date_n    n        data_found = Truen                    n        retrieve_ac_schedule_sql no_of_schedule, schedule, coupon_on_call, strike, deal_ticket.asset_coden       n        deal_ticket.set_schedule no_of_schedule, schedule, strike, coupon_on_calln       n    '   retrieve_fixing_schedule deal_ticket, deal_ticket.asset_coden    '-----n    ' In case monthly couponn    '-----n        If retrieve_ac_coupon_schedule_sql(no_of_coupon_schedule, coupon_schedule, monthly_coupon_amount, coupon_barrier, deal_ticket.asset_code) > 0 Thenn        n            deal_ticket.set_coupon_schedule no_of_coupon_schedule, coupon_schedule, coupon_barrier, monthly_coupon_amountn            'deal_ticket.monthly_coupon_amount = monthly_coupon_amount(1)n            deal_ticket.monthly_coupon_flag = 1n        n        Elsen            ReDim coupon_schedule(1 To 1) As Daten            ReDim coupon_barrier(1 To 1) As Doublen             ReDim monthly_coupon_amount(1 To 1) As Doublen        n            deal_ticket.set_coupon_schedule 1, coupon_schedule, coupon_barrier, monthly_coupon_amountn        n        End Ifn        n    '-----n    ' In case swapn    '-----n        If retrieve_ac_floating_leg_schedule_sql(no_of_floating_schedule, floating_schedule, fixing_value, deal_ticket.asset_code) > 0 Thenn        n            deal_ticket.set_floating_schedule no_of_floating_schedule, floating_schedule, fixing_valuen             n        End Ifn        n        n    '-------------------------------n    ' 2015-10-19n    ' Term VEGAn    '-------------------------------n    Dim no_of_term As Integern    Dim term_array() As Daten    n    no_of_term = shtACPricer.Range("no_of_term").valuen    n'    For inx = 1 To no_of_termn'n'        push_back_date term_array, shtACPricer.Range("Term_Vega_Start").Cells(inx, 1).valuen'n'    Next inxn    n    deal_ticket.set_term_vega_tenor config__.term_vega_tenor_array ' term_array '-----n    n        n        ''------- TEMPn        Dim ee_schedule(1 To 1) As Daten        Dim ee_value(1 To 1) As Doublen        deal_ticket.set_early_exit_schedule 1, ee_schedule, ee_valuen        n        '---------------------------n    n    Elsen    n        data_found = Falsen    n    End Ifn    n    DBDisConnectorn    n    retrieve_ac_deal = data_foundn    n    Exit Functionn    nErrorHandler:nn    DBDisConnectorn    raise_err "retrieve_ac_deal", Err.descriptionnnnEnd Functionnn'=======================n' 2014-06-26, Leen'=======================nPrivate Function make_virtual_bond_schedule(ByRef swap_schedules() As clsSwapSchedule, a_deal As clsACDealTicket, Optional period As Integer = 3) As Integern    n    Dim rtn_value As Integern    Dim no_of_schedule As Integern    Dim an_obj As clsSwapSchedulen    Dim following_payment As Daten    nOn Error GoTo ErrorHandlern    n    no_of_schedule = 0n    n    following_payment = a_deal.settlement_daten    n    Don        no_of_schedule = no_of_schedule + 1n        n        Set an_obj = New clsSwapSchedulen        n        an_obj.fixing_date = yyyymmdd_to_date(get_minusbusiness_day(Format(following_payment, "YYYYMMDD")))n        an_obj.start_date = following_paymentn        an_obj.pay_date = yyyymmdd_to_date(get_elapsedmonths_day(Format(a_deal.settlement_date, "YYYYMMDD"), no_of_schedule * period))n        an_obj.end_date = an_obj.pay_daten        an_obj.fixing_rate = get_cd_rate(Format(an_obj.fixing_date, "YYYYMMDD"))n        an_obj.add_margin = a_deal.rate_spreadn        n        push_back_clsSwapSchedule swap_schedules, an_objn        n        following_payment = an_obj.pay_daten        n    Loop While an_obj.pay_date < a_deal.maturity_daten        n    n    make_virtual_bond_schedule = no_of_schedulen    n    Exit Functionn    nErrorHandler:nn    raise_err "make_vitual_bond_schedule", Err.descriptionnnEnd Functionnnn'<======================PATTERNnPublic Sub kill_all_market_deal()nnnOn Error GoTo ErrorHandlernn    'deal_ticket_check deal_ticketn    n    DBConnectorn    n    GConn_SPS_SPT.BeginTransn        n    update_ac_status_dml "N", , "Y", "M"nn    GConn_SPS_SPT.CommitTransn    nn    DBDisConnectorn    n    Exit Subn    nErrorHandler:nn    If GConn_SPS_SPT.State <> 0 Thenn        GConn_SPS_SPT.RollbackTransn    End Ifn    n    DBDisConnectorn    n   raise_err "kill_all_market_deal", Err.descriptionnnEnd SubnnPublic Sub insert_ac_deal(deal_ticket As clsACDealTicket)n    nnOn Error GoTo ErrorHandlernn    'deal_ticket_check deal_ticketn    n    Dim swap_schedules() As clsSwapSchedulen    Dim no_of_swap_schedule As Integern        n    DBConnectorn    n    no_of_swap_schedule = make_virtual_bond_schedule(swap_schedules, deal_ticket)n    n    n    GConn_SPS_SPT.BeginTransn    n'    dbconnn    GConn_SPT_ALTI.BeginTransn    GConn_SPT_RMS01.BeginTransn    n    insert_ac_deal_dml deal_ticket ', deal_sheet.Range("comment").Cells(1, 1).valuen    insert_ac_underlying_dml deal_ticketn    insert_ac_schedule_dml deal_ticketn    n    n    insert_virtual_bond_schedule deal_ticket.asset_code, swap_schedules, no_of_swap_schedulen    n    If deal_ticket.monthly_coupon_flag Thenn        insert_ac_coupon_schedule_dml deal_ticketn    End Ifn    n    If deal_ticket.no_of_floating_coupon_schedule > 0 Thenn        insert_ac_floating_schedule_dml deal_ticketn    End Ifn    n    GConn_SPT_ALTI.CommitTransn    GConn_SPS_SPT.CommitTransn    GConn_SPT_RMS01.CommitTransnn    DBDisConnectorn    n    Exit Subn    nErrorHandler:nn    If GConn_SPS_SPT.State <> 0 Thenn        GConn_SPS_SPT.RollbackTransn        GConn_SPT_ALTI.RollbackTransn        GConn_SPT_RMS01.RollbackTransnn    End Ifn    n    DBDisConnectorn    n   raise_err "insert_ac_deal", Err.descriptionnnEnd SubnnnnPublic Sub retrieve_ac_deals(ByRef deals() As clsACDealTicket, asset_codes() As String, deal_count As Long, Optional mid_day_greek As Boolean = False)nn    Dim inx As Integern    Dim calldate(1 To 1) As Daten    Dim strike_percent(1 To 1) As Doublen    Dim dummy_cpn_on_call(1 To 1) As Doublen    nOn Error GoTo ErrorHandlernn    If deal_count > 0 Thenn    n        ReDim deals(LBound(asset_codes) To UBound(asset_codes)) As clsACDealTicketn        n        DBConnectorn        n        ' Loop for the asset code listn        For inx = LBound(asset_codes) To UBound(asset_codes)n            n            Set deals(inx) = New clsACDealTicketn            n            deals(inx).asset_code = asset_codes(inx)n            n            'Load a dealn            retrieve_ac_deal deals(inx)n            n            deals(inx).current_date = config__.current_date_n            deals(inx).current_date_origin_ = config__.current_date_n            n            deals(inx).mid_day_greek = mid_day_greekn                        n            If deals(inx).monthly_coupon_flag = 0 Thenn                deals(inx).set_coupon_schedule 1, calldate, strike_percent, dummy_cpn_on_calln            End Ifn                        n    n        Next inxn        n        DBDisConnectorn        n    End Ifn    n    Exit Subn    nErrorHandler:nn    DBDisConnectornn    raise_err "retrieve_ac_deals", Err.descriptionn        nnEnd SubnnnPrivate Sub fill_ac_deal_info(ByRef the_deal As clsACDealTicket)nn    Dim no_of_schedule As Integern    Dim no_of_coupon_schedule As Integern    Dim schedule() As Daten    Dim strike() As Doublen    Dim coupon_on_call() As Doublen    Dim coupon_schedule() As Daten    Dim monthly_coupon_amount() As Doublen    Dim coupon_barrier() As Doublen    n    nOn Error GoTo ErrorHandlernn    retrieve_ac_deal_ul_sql the_deal, the_deal.asset_coden    n    the_deal.current_date = config__.current_date_n    the_deal.current_date_origin_ = config__.current_date_n    n    retrieve_ac_schedule_sql no_of_schedule, schedule, coupon_on_call, strike, the_deal.asset_coden    n'-----n' 2015-11-18 TEMPn' Strike Shift for 3 indexn'-----n'    Dim inx As Integern'    If the_deal.no_of_ul >= 3 Thenn'n'        For inx = 1 To get_array_size_double(strike)n'n'            strike(inx) = strike(inx) - 0.001n'n'        Next inxn'n'    End Ifnnn    the_deal.set_schedule no_of_schedule, schedule, strike, coupon_on_calln    n    If retrieve_ac_coupon_schedule_sql(no_of_coupon_schedule, coupon_schedule, monthly_coupon_amount, coupon_barrier, the_deal.asset_code) > 0 Thenn    n        the_deal.set_coupon_schedule no_of_coupon_schedule, coupon_schedule, coupon_barrier, monthly_coupon_amountn        the_deal.monthly_coupon_amount = monthly_coupon_amount(1)n        the_deal.monthly_coupon_flag = 1n    n    Elsen        ReDim coupon_schedule(1 To 1) As Daten        ReDim coupon_barrier(1 To 1) As Doublen        ReDim monthly_coupon_amount(1 To 1) As Doublen    n        the_deal.set_coupon_schedule 1, coupon_schedule, coupon_barrier, monthly_coupon_amountn    n    End Ifn    n    Exit Subn    nErrorHandler:nn    raise_err "fill_ac_deal_info", Err.descriptionnnnEnd SubnnPrivate Sub reorder_ac_deal(sorted_deals() As clsACDealTicket, deals() As clsACDealTicket)n    n    n    Dim index_max As Integern    Dim index_min As Integern    n    Dim temp As Daten    n    Dim inx As Integern    Dim jnx As Integern    n    nOn Error GoTo ErrorHandlernnn    index_max = UBound(deals)n    index_min = LBound(deals)n    n    ReDim seq(index_min To index_max) As Integern    ReDim reorder_seq(index_min To index_max) As Integern    ReDim SwapArray(index_min To index_max) As Daten    n    ReDim sorted_deals(index_min To index_max) As clsACDealTicketn    n    For inx = index_min To index_maxn    n        SwapArray(inx) = deals(inx).get_next_call_date(config__.current_date_)n        seq(inx) = inxn        reorder_seq(inx) = inxn    n    Next inxn    n    For inx = index_min + 1 To index_maxn    n        temp = deals(inx).get_next_call_date(config__.current_date_)n        n        For jnx = inx - 1 To index_min Step -1n    n            If SwapArray(jnx) > temp Thenn            n                SwapArray(jnx + 1) = SwapArray(jnx)n                SwapArray(jnx) = tempn                n                reorder_seq(jnx + 1) = reorder_seq(jnx)n                reorder_seq(jnx) = inxn                n            End Ifn    n        Next jnxn        n    Next inxn    n'    If LCase(DataOdering) = LCase("ASC") Thenn        n        For inx = index_min To index_maxn        n            Set sorted_deals(inx) = deals(reorder_seq(inx))n        n        Next inxn'n'    Elsen'n'        For inx = index_min To index_maxn'n'            sorted_deals(inx) = deals(reorder_seq(index_max - inx + index_min))n'n'        Next inxn'n'    End Ifn        nnn    Exit Subn    nErrorHandler:nnn    raise_err "recorder_ac_deal", Err.descriptionnnnEnd SubnnnPublic Sub retrieve_ac_deal_list(deals() As clsACDealTicket, greeks() As clsGreeks, LIVE_YN As String, CONFIRM_YN As String, Optional ul_cnt As Integer = 0, Optional exclude_intraday As Boolean = False)nn    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    Dim msg_str As Stringn    n    Dim no_of_schedule As Integern    Dim no_of_coupon_schedule As Integern    Dim schedule() As Daten    Dim strike() As Doublen    n    Dim coupon_schedule() As Daten    Dim coupon_on_call() As Doublen    Dim monthly_coupon_amount() As Doublen    Dim coupon_barrier() As Doublen    n    Dim deals_pre_sorting() As clsACDealTicketn    nOn Error GoTo ErrorHandlernn    If Not initialized__ Thenn    n        Err.Raise vbObjectError + 10000, , "[PRO] Not initialized!!"n        n    End Ifn    n    n    '---------------------------------n    ' DB Accessn    DBConnectorn        n    '----------------------------n    ' Retrieves Deal list from the DB according to search condition.n    '----------------------------n    n    If (retrieve_ac_deal_header_list_sql(deals_pre_sorting, LIVE_YN, CONFIRM_YN, ul_cnt, config__.current_date_, exclude_intraday, config__.adjust_strike_shift_percent)) > 0 Then   ' Retrieve Header Listnn        n        ReDim ac_greek_cache__(LBound(deals_pre_sorting) To UBound(deals_pre_sorting)) As clsGreekCachen        ReDim greeks(LBound(deals_pre_sorting) To UBound(deals_pre_sorting)) As clsGreeksn        n        '--------------------------------------n        ' Fill Deal informationn        '--------------------------------------n        For inx = LBound(deals_pre_sorting) To UBound(deals_pre_sorting)n            fill_ac_deal_info deals_pre_sorting(inx)n        Next inxn        n        '--------------------------------------n        ' Reorder according to call daten        '--------------------------------------n        reorder_ac_deal deals, deals_pre_sortingn        n        '--------------------------------------n        ' Fill previous date Greek informationn        '--------------------------------------n        For inx = LBound(deals) To UBound(deals)n            n            Set greeks(inx) = New clsGreeksn            n            n            If deals(inx).no_of_ul = 1 Thenn                greeks(inx).value = retrieve_greek(deals(inx).asset_code, config__.last_date_, "VALUE")n                greeks(inx).delta = retrieve_greek(deals(inx).asset_code, config__.last_date_, "DELTA")n                greeks(inx).gamma = retrieve_greek(deals(inx).asset_code, config__.last_date_, "GAMMA")n                greeks(inx).vega = retrieve_greek(deals(inx).asset_code, config__.last_date_, "VEGA") ' / 100  <---- 2014-08-18n                greeks(inx).theta = retrieve_greek(deals(inx).asset_code, config__.last_date_, "THETA")n                greeks(inx).skew_s = retrieve_greek(deals(inx).asset_code, config__.last_date_, "SKEW")n                greeks(inx).rho = retrieve_greek(deals(inx).asset_code, config__.last_date_, "RHO")n                greeks(inx).duration = retrieve_greek(deals(inx).asset_code, config__.last_date_, "DURATION")n                greeks(inx).vanna = retrieve_greek(deals(inx).asset_code, config__.last_date_, "VANNA") '* 100n                greeks(inx).conv_s = retrieve_greek(deals(inx).asset_code, config__.last_date_, "CONV") '* 100n                n                n                greeks(inx).implied_tree_delta = greeks(inx).deltan                greeks(inx).implied_tree_gamma = greeks(inx).gamman                n            Elsen                n                greeks(inx).no_of_tenors = retrieve_no_of_tenors(deals(inx).asset_code, config__.last_date_)n                                n                greeks(inx).redim_arrays deals(inx).no_of_ul, greeks(inx).no_of_tenorsn                n                n                greeks(inx).value = retrieve_greek(deals(inx).asset_code, config__.last_date_, "VALUE")n                greeks(inx).theta = retrieve_greek(deals(inx).asset_code, config__.last_date_, "THETA")n                greeks(inx).rho = retrieve_greek(deals(inx).asset_code, config__.last_date_, "RHO")n                greeks(inx).duration = retrieve_greek(deals(inx).asset_code, config__.last_date_, "DURATION")n                n                '----n                ' Appended on 2014-08-18n                '----n                n                n                For jnx = 1 To deals(inx).no_of_uln                     n                    greeks(inx).set_deltas jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "DELTA", , deals(inx).ul_code(jnx))n                    greeks(inx).set_gammas jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "GAMMA", , deals(inx).ul_code(jnx))n                    greeks(inx).set_vegas jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "VEGA", , deals(inx).ul_code(jnx)) ' / 100 <---- 2014-08-18n                    greeks(inx).set_skews jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "SKEW", , deals(inx).ul_code(jnx))n                    greeks(inx).set_vannas jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "VANNA", , deals(inx).ul_code(jnx)) '* 100n                    greeks(inx).set_rho_ul jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "RHO_UL", , deals(inx).ul_code(jnx))  '* 100n                    greeks(inx).set_convs jnx, retrieve_greek(deals(inx).asset_code, config__.last_date_, "CONV", , deals(inx).ul_code(jnx))n                    n                    greeks(inx).set_all_implied_tree_deltas greeks(inx).get_all_deltasn                    greeks(inx).set_all_implied_tree_gammas greeks(inx).get_all_gammasn                n                    For knx = jnx + 1 To deals(inx).no_of_uln                        greeks(inx).set_corr_sens jnx, knx, retrieve_cross_greek(deals(inx).asset_code, config__.last_date_, "CORR", , deals(inx).ul_code(jnx), deals(inx).ul_code(knx))n                    Next knxn                    n                    n                    greeks(inx).set_term_dates_per_ul jnx, retrieve_term_dates(deals(inx).asset_code, config__.last_date_)n                    n                    greeks(inx).set_term_skews_per_ul jnx, retrieve_term_greek(deals(inx).asset_code, config__.last_date_, "TERM_SKEW", deals(inx).ul_code(jnx))n                    greeks(inx).set_term_vegas_per_ul jnx, retrieve_term_greek(deals(inx).asset_code, config__.last_date_, "TERM_VEGA", deals(inx).ul_code(jnx))n                    greeks(inx).set_term_convs_per_ul jnx, retrieve_term_greek(deals(inx).asset_code, config__.last_date_, "TERM_CONV", deals(inx).ul_code(jnx))n                    n                    n                Next jnxnn            End Ifn            n            '----n            ' Appended on 2014-08-18n            '----n            calc_sticky_strike_delta greeks(inx), greeks(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), config__.last_date_, prev_market_set__n            calc_sticky_strike_gamma greeks(inx), greeks(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), config__.last_date_, prev_market_set__n            n            deals(inx).duration = greeks(inx).durationn            n            theta_adjustment greeks(inx), config__.current_date_, config__.next_date_n            n            Set ac_greek_cache__(inx) = New clsGreekCachen            ac_greek_cache__(inx).asset_code = deals(inx).asset_coden                        n        n        Next inxn    n    End Ifnnn    DBDisConnectorn    n    If msg_str <> "" Thenn    n        MsgBox msg_strn        n    End Ifn    n    n    Exit Subn    nErrorHandler:nn    If UCase(Left(Err.description, 5)) = "[BIZ]" Thenn    n        msg_str = msg_str & deals(inx).asset_code & ":" & Err.description & Chr(13)n        Resume Nextn        n    End Ifnn    DBDisConnectorn    raise_err "retrieve_ac_deal_list", Err.descriptionn    nnEnd SubnnPublic Sub retrieve_3d_deal(deals_3d() As clsACDealTicket, greeks() As clsGreeks)n    n    n    Dim asset_codes() As Stringn    Dim ac_deal_count As Longn    Dim inx As Integern    nOn Error GoTo ErrorHandlern        n        n    ac_deal_count = retrieve_ac_asset_code_list(asset_codes, "Y", "Y", 3)n        n    retrieve_ac_deals deals_3d, asset_codes, ac_deal_countnn    retrieve_duration deals_3d, ac_deal_countn    n    n    ReDim greeks(1 To ac_deal_count) As clsGreeksn    n    retrieve_prev_day_greek deals_3d, greeks, ac_deal_countn    n    Exit Subn    nErrorHandler:n    n    raise_err "retrieve_3d_deal", Err.descriptionn    nnEnd SubnnnPublic Sub retrieve_duration(deals_3d() As clsACDealTicket, ac_deal_count As Long)nn    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    DBConnectorn        n    n    For inx = 1 To ac_deal_countn        n        deals_3d(inx).duration = retrieve_greek(deals_3d(inx).asset_code, config__.last_date_, "DURATION")n    n    Next inxn    n    n    DBDisConnectorn    n    Exit Subn    nErrorHandler:nn    DBDisConnectornn    raise_err "retrieve_duration", Err.descriptionnnnEnd SubnnnnnPublic Sub retrieve_prev_day_greek(deals_3d() As clsACDealTicket, greeks() As clsGreeks, ac_deal_count As Long)nn    Dim inx As Integern    Dim jnx As Integern    Const no_of_ul As Integer = 3n    nOn Error GoTo ErrorHandlernn    DBConnectorn        n    n    For inx = 1 To ac_deal_countn    n        Set greeks(inx) = New clsGreeksn        greeks(inx).redim_arrays 3n        n        For jnx = 1 To no_of_uln    n            greeks(inx).set_vegas jnx, retrieve_greek(deals_3d(inx).asset_code, config__.last_date_, "VEGA", , deals_3d(inx).ul_code(jnx)) ' / 100 <---- 2014-08-18n            greeks(inx).set_skews jnx, retrieve_greek(deals_3d(inx).asset_code, config__.last_date_, "SKEW", , deals_3d(inx).ul_code(jnx))n            greeks(inx).set_vannas jnx, retrieve_greek(deals_3d(inx).asset_code, config__.last_date_, "VANNA", , deals_3d(inx).ul_code(jnx)) '* 100n        n        Next jnxn        n    Next inxn    n    n    DBDisConnectorn    n    Exit Subn    nErrorHandler:nn    DBDisConnectorn    raise_err "retrieve_duration", Err.descriptionnnnEnd Subn'n'n'Public Sub file_to_greek_realtime(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, Optional eval_date_in As Date = -1)n'n'    Dim inx As Integern'    Dim deltas() As Doublen'    Dim gammas() As Doublen'    Dim implied_tree_deltas() As Doublen'    Dim sticky_strike_deltas() As Doublen'    Dim implied_tree_gammas() As Doublen'    Dim sticky_strike_gammas() As Doublen'n'    Dim rtn_value As Booleann'n'On Error GoTo ErrorHandlern'n'    Dim file_system As Variantn'    Dim txt_file As Variantn'    Dim line_str As Stringn'    Dim line_str_array() As Stringn'    Dim aGreek As clsGreeksn'    Dim counter As Integern'n'    rtn_value = Falsen'n'    ReDim implied_tree_deltas(1 To no_of_ul) As Doublen'    ReDim sticky_strike_deltas(1 To no_of_ul) As Doublen'    ReDim implied_tree_gammas(1 To no_of_ul) As Doublen'    ReDim sticky_strike_gammas(1 To no_of_ul) As Doublen'n'    Set file_system = CreateObject("Scripting.FileSystemObject")n'    Set txt_file = file_system.OpenTextFile(path_name & file_name, 1)n'n'    Do While txt_file.AtEndOfStream = Falsen'n'        line_str = txt_file.ReadLinen'        line_str_array = Split(CStr(line_str), "*")n'n'        counter = 0n'n'        If line_str_array(0) = asset_code Thenn'n'            greeks.redim_arrays no_of_uln'n'            counter = counter + 1n'            greeks.value = CDbl(Trim(line_str_array(counter)))n'n'            For inx = 1 To no_of_uln'                counter = counter + 1n'                implied_tree_deltas(inx) = CDbl(Trim(line_str_array(counter)))n'                counter = counter + 1n'                sticky_strike_deltas(inx) = CDbl(Trim(line_str_array(counter)))n'                counter = counter + 1n'                implied_tree_gammas(inx) = CDbl(Trim(line_str_array(counter)))n'                counter = counter + 1n'                sticky_strike_gammas(inx) = CDbl(Trim(line_str_array(counter)))n'            Next inxn'n'            greeks.set_all_deltas implied_tree_deltasn'            greeks.set_all_gammas implied_tree_gammasn'n'            greeks.set_all_implied_tree_deltas implied_tree_deltasn'            greeks.set_all_implied_tree_gammas implied_tree_gammasn'n'            greeks.set_all_sticky_strike_deltas sticky_strike_deltasn'            greeks.set_all_sticky_strike_gammas sticky_strike_gammasn'n'            Exit Don'n'            rtn_value = Truen'n'        End Ifn'n'    Loopn'n'n'    txt_file.Closen'n'    file_to_greek_3d = rtn_valuen'n'    Exit Functionn'n'ErrorHandler:n'n'    file_to_greek_3d = Falsen'n'    If txt_file <> Null Thenn'        txt_file.Closen'    End Ifn'n'    Exit Functionn'n'n'End SubnnPrivate Sub read_position_file_to_array(ByRef asset_codes() As String, ByRef data_array() As clsDoubleArray, PATH_NAME As String, file_name As String)n    n    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    Dim file_system As Variantn    Dim txt_file As Variantn    n    Dim line_str As Stringn    Dim line_str_array() As Stringn    n    Dim tmp_array() As Doublen    Dim aDataArray As clsDoubleArrayn    n    Erase asset_codesn    Erase data_arrayn    n    Set file_system = CreateObject("Scripting.FileSystemObject")n    Set txt_file = file_system.OpenTextFile(PATH_NAME & file_name, 1)n    n    Dim counter As Integern    n    line_str = txt_file.ReadLine '<-- Dummy. The first line contains the prices of underliers.n    n    Do While txt_file.AtEndOfStream = Falsen    n    n        Erase line_str_arrayn        Erase tmp_arrayn    n        line_str = txt_file.ReadLinen        line_str_array = Split(CStr(line_str), "*")n            n        push_back_string asset_codes, line_str_array(0)n        n        n        For inx = 1 To UBound(line_str_array)n            n            push_back_double tmp_array, CDbl(Trim(line_str_array(inx)))n        n        Next inxn        n        Set aDataArray = New clsDoubleArrayn        aDataArray.set_array tmp_arrayn        n        push_back_clsDoubleArray data_array, aDataArrayn        n    Loopn    nn    Exit Subn    nErrorHandler:nn    If Err.number = 76 Thenn        MsgBox "no file found"n        Exit Subn    Elsen        raise_err "read_position_file_to_array", Err.descriptionn    End IfnnnEnd SubnnPrivate Function find_asset_code_sequence(asset_codes() As String, asset_code As String) As Integern    n    Dim inx As Integern    Dim rtn_value As Integern    n    nOn Error GoTo ErrorHandlernn    rtn_value = 0n    n    n    For inx = LBound(asset_codes) To UBound(asset_codes)n    n        If asset_codes(inx) = asset_code Thenn        n            rtn_value = inxn        n            Exit Forn            n        End Ifn        n    Next inxn        n    find_asset_code_sequence = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    find_asset_code_sequence = 0nnEnd FunctionnnPrivate Sub parse_greeks_data(ByRef aGreek As clsGreeks, data_array() As Double, no_of_ul As Integer)nnn    Dim deltas() As Doublen    Dim gammas() As Doublen    Dim implied_tree_deltas() As Doublen    Dim sticky_strike_deltas() As Doublen    Dim implied_tree_gammas() As Doublen    Dim sticky_strike_gammas() As Doublen    Dim vegas() As Doublen    Dim skews() As Doublen    Dim vannas() As Doublen    n    Dim inx As Integern    Dim counter As Integern    n    Dim data_size As Integern        nOn Error GoTo ErrorHandlernn    counter = 1n    n    data_size = get_array_size_double(data_array)n    n    ReDim implied_tree_deltas(1 To no_of_ul) As Doublen    ReDim sticky_strike_deltas(1 To no_of_ul) As Doublen    ReDim implied_tree_gammas(1 To no_of_ul) As Doublen    ReDim sticky_strike_gammas(1 To no_of_ul) As Doublen    ReDim vegas(1 To no_of_ul) As Doublen    ReDim skews(1 To no_of_ul) As Doublen    ReDim vannas(1 To no_of_ul) As Doublen    n    ReDim rho_ul(1 To no_of_ul) As Double  ' 2016-01-29n    ReDim eff_dur(1 To no_of_ul) As Double  ' 2016-01-29n    n    aGreek.value = data_array(counter)nn    For inx = 1 To no_of_uln        n        counter = counter + 1n        n        implied_tree_deltas(inx) = data_array(counter)n        counter = counter + 1n        sticky_strike_deltas(inx) = data_array(counter)n        counter = counter + 1n        implied_tree_gammas(inx) = data_array(counter)n        counter = counter + 1n        sticky_strike_gammas(inx) = data_array(counter)n        counter = counter + 1n        vegas(inx) = data_array(counter)n        counter = counter + 1n        skews(inx) = data_array(counter)n        counter = counter + 1n        vannas(inx) = data_array(counter)n        n        If data_size > counter Thenn            counter = counter + 1n            rho_ul(inx) = data_array(counter)n        End Ifn        n        If data_size > counter Thenn            counter = counter + 1n            eff_dur(inx) = data_array(counter)n        End Ifn    n    Next inxn    n    counter = counter + 1n    aGreek.rho = data_array(counter)nn    aGreek.set_all_deltas implied_tree_deltasn    aGreek.set_all_gammas implied_tree_gammasn    n    aGreek.set_all_implied_tree_deltas implied_tree_deltasn    aGreek.set_all_implied_tree_gammas implied_tree_gammasn    n    aGreek.set_all_sticky_strike_deltas sticky_strike_deltasn    aGreek.set_all_sticky_strike_gammas sticky_strike_gammasn    n    aGreek.set_all_vegas vegasn    aGreek.set_all_skews skewsn    aGreek.set_all_vannas vannasn    n    aGreek.set_all_rho_ul rho_uln    n    aGreek.set_all_eff_durations eff_durn    n    'agreek.rho =nn    Exit Subn    nErrorHandler:nn    raise_err "parse_greeks_data", Err.descriptionn    nEnd SubnnPublic Sub file_to_greeks(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, PATH_NAME As String, file_name As String)nn    Dim inx As Integern    n    Dim asset_codes() As Stringn    Dim data_array() As clsDoubleArrayn    n    Dim asset_seq As Integern        nOn Error GoTo ErrorHandlern    n    Dim counter As Integern  n    read_position_file_to_array asset_codes, data_array, PATH_NAME, file_namen    n    For inx = 1 To get_array_size_clsAcDealTicket(deals)n    n        Set greeks(inx) = New clsGreeksn        greeks(inx).redim_arrays deals(inx).no_of_uln        n        asset_seq = find_asset_code_sequence(asset_codes, deals(inx).asset_code)n        n        If asset_seq > 0 Thenn            n            parse_greeks_data greeks(inx), data_array(asset_seq).get_array(), deals(inx).no_of_uln        n        End Ifn            n    n    Next inxn        n    n    Exit Subn    nErrorHandler:nn    raise_err "file_to_greeks", Err.descriptionnn    Exit Subn    nnEnd SubnnPublic Sub greek_to_file(greeks() As clsGreeks, deals() As clsACDealTicket, PATH_NAME As String, file_name As String)nnOn Error GoTo ErrorHandlern    n    Dim file_system As Variantn    Dim txt_file As Variantn    Dim line_str As Stringn    Dim inx As Integern    Dim jnx As Integern    n    n    Set file_system = CreateObject("Scripting.FileSystemObject")n    Set txt_file = file_system.CreateTextFile(PATH_NAME & file_name, True)n    n    line_str = market_set__.market_by_ul("KOSPI200").s_n    line_str = line_str & "*" & market_set__.market_by_ul("SPX").s_n    line_str = line_str & "*" & market_set__.market_by_ul("SX5E").s_n    line_str = line_str & "*" & market_set__.market_by_ul("NKY").s_n    line_str = line_str & "*" & market_set__.market_by_ul("HSCEI").s_n    n    line_str = line_str & "*" & market_set__.get_fx_rate("USDKRW")n    line_str = line_str & "*" & market_set__.get_fx_rate("EURKRW")n    line_str = line_str & "*" & market_set__.get_fx_rate("JPYKRW")n    line_str = line_str & "*" & market_set__.get_fx_rate("HKDKRW")n    n    txt_file.writeline line_strn    n    For inx = 1 To get_array_size_clsgreeks(greeks)n        n        line_str = ""n        line_str = line_str & deals(inx).asset_coden        n        line_str = line_str & "*" & greeks(inx).valuen        n        For jnx = 1 To deals(inx).no_of_uln    n            line_str = line_str & "*" & greeks(inx).implied_tree_deltas(jnx)n            line_str = line_str & "*" & greeks(inx).sticky_strike_deltas(jnx)n            line_str = line_str & "*" & greeks(inx).implied_tree_gammas(jnx)n            line_str = line_str & "*" & greeks(inx).sticky_strike_gammas(jnx)n            line_str = line_str & "*" & greeks(inx).vegas(jnx)n            line_str = line_str & "*" & greeks(inx).skew_s_s(jnx)n            line_str = line_str & "*" & greeks(inx).vannas(jnx)n            line_str = line_str & "*" & greeks(inx).rho_ul(jnx)n            line_str = line_str & "*" & greeks(inx).eff_duration(jnx)n            n        Next jnxn        n        line_str = line_str & "*" & greeks(inx).rhon        n        txt_file.writeline line_strn        n    Next inxn    n    txt_file.Closen    nn    Exit Subn    nErrorHandler:nn    raise_err "greek_to_file_3d", Err.descriptionnnEnd Subnnn'----------------------------------------------------n' refresh_current_greek_acn' retrieve_current_greek :Read cache greeks. If it is not initialized, trigger initializationn' initialize_cache_greekn' retreive_cache_greek : read db.n'nPublic Sub refresh_current_greek_AC(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, Optional end_of_day_greek As Boolean = False, _n                                    Optional intraday_greek As String = "", Optional error_recovery As Boolean = False, Optional vol_bump As Boolean = False, Optional bumping_this As String = "")nnnOn Error GoTo ErrorHandlern    n    Dim intraday_greek_type As Stringn    n    If intraday_greek = "" Thenn        intraday_greek_type = config__.intra_day_greek_n    Elsen        intraday_greek_type = intraday_greekn    End Ifn    n    If Not initialized__ Thenn    n        Err.Raise vbObjectError + 10000, , "[PRO] Not initialized!!"n        n    End Ifn    n    If end_of_day_greek Thenn        n        retrieve_end_of_day_greek_ac greeks, dealsn        n    Elsen       n       ReDim greeks(1 To get_array_size_clsAcDealTicket(deals)) As clsGreeksn        n        If intraday_greek_type = "DB" Thenn        n            file_to_greeks greeks, deals, config__.file_path_, "position_" & Format(config__.current_date_, "YYYYMMDD") & "." & config__.position_file_extensionn            n        ElseIf intraday_greek_type = "Distributor" Thenn        n            '---------------------------------------------------n            ' Firstly, read text file for 2Dn            '---------------------------------------------------n            read_greek_file greeks, deals, config__.current_date_, vol_bump, bumping_thisn            n            If Not error_recovery Thenn                Set GResultHandler = New clsACResultHandlerMultin                GResultHandler.initialize dealsn                GResultHandler.set_greeks greeksn            End Ifn            n                        n            make_greek_to_distribute_dist GResultHandler, "DISTRIBUTOR", error_recoveryn        n        ElseIf intraday_greek_type = "Calculate" Thenn        n            If Not error_recovery Thenn                 Set GResultHandler = New clsACResultHandlerMultin                ' calculate_greeks_ac greeks, dealsn                n                 GResultHandler.initialize dealsn            End Ifn            n            calculate_greeks_ac_dist GResultHandler, "FULLCALC", , True, False, , True, , , , , , True, , , , error_recoverynn        End Ifn            n    End Ifnn    Exit Subn    nErrorHandler:nn    raise_err "refresh_current_greek_AC", Err.descriptionnnEnd SubnnPublic Sub calculate_greeks_ac(ByRef greeks() As clsGreeks, deals() As clsACDealTicket)nn    Dim dummy_intraday_greeks() As clsGreeksn    Dim dummy_bump_greeks_sets() As clsGreekSetnnOn Error GoTo ErrorHandlernn    '------------------------n    ' Changing confign    '----------------------------n    Dim origin_x_grid As Integern    Dim origin_t_steps_per_day As Doublen    Dim origin_no_of_trials As Integern    Dim inx As Integern    Dim jnx As Integern    n    origin_x_grid = config__.x_grid_n    'config__.x_grid_ = config__.x_grid_ / 2n    n    origin_t_steps_per_day = config__.time_step_per_dayn    '  config__.time_step_per_day = config__.time_step_per_day / 4n    n    origin_no_of_trials = config__.no_of_trials_closing_n    '  config__.no_of_trials_closing_ = (config__.no_of_trials_closing_ + 1) / 4 - 1n    n    '------------------------n    ' Calculationn    '----------------------------n    calculate_ac_greeks greeks, dummy_intraday_greeks, deals, get_array_size_clsAcDealTicket(deals), market_set__, , "N", , False, False, False, False, Falsen    calculate_ac_greeks_2D greeks, deals, get_array_size_clsAcDealTicket(deals), market_set__, dummy_bump_greeks_sets, False, False, False, False, , , False, , Falsen    calculate_ac_greeks_3D greeks, deals, get_array_size_clsAcDealTicket(deals), market_set__, dummy_bump_greeks_sets, False, False, False, False, False, , , False, , Falsen    n    '------------------------n    ' Rewinding confign    '----------------------------n    n    config__.x_grid_ = origin_x_gridn    config__.time_step_per_day = origin_t_steps_per_dayn    config__.no_of_trials_closing_ = origin_no_of_trialsn    n    n    For inx = 1 To get_array_size_clsgreeks(greeks)n        greeks(inx).set_all_implied_tree_deltas greeks(inx).get_all_deltasn        greeks(inx).implied_tree_delta = greeks(inx).deltan        greeks(inx).implied_tree_gamma = greeks(inx).gamman        n        For jnx = 1 To deals(inx).no_of_uln            calc_sticky_strike_delta greeks(inx), deals(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), config__.current_date_, market_set__n            calc_sticky_strike_gamma greeks(inx), deals(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), config__.current_date_, market_set__n        Next jnxn        n    Next inxnnn    Exit Subn    nErrorHandler:nn    raise_err "calculate_greeks_ac", Err.descriptionnnEnd Subn'Private Sub copy_ac_deal_list(to_deal_list() As clsACDealTicket, from_deal_list() As clsACDealTicket, dimension As Integer)n'n'    Dim inx As Integern'    Dim no_of_deals As Integern'n'On Error GoTo ErrorHandlern'n'    no_of_deals = get_array_size_clsAcDealTicket(from_deal_list)n'n'    For inx = 1 To no_of_dealsn'n'        If from_deal_list(inx).no_of_ul = dimension Thenn'n'            push_back_clsAcDealTicket deal_list, from_deal_list(inx)n'n'        End Ifn'n'    Next inxn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "copy_ac_deal_list", Err.descriptionn'n'End SubnnnPrivate Sub retrieve_end_of_day_greek_2d(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, Optional eval_date_in As Date = -1)nnnOn Error GoTo ErrorHandlernn    Dim inx As Integern    Dim eval_date As Daten    Dim data_found As Booleann    Dim tmp_greek As clsGreeksn    n    If eval_date_in > 0 Thenn        eval_date = eval_date_inn    Elsen        eval_date = config__.current_date_n    End Ifn    n    n    DBConnectornnn    For inx = LBound(deals) To UBound(deals)n    n        If deals(inx).no_of_ul > 1 Thenn                        n            Set tmp_greek = New clsGreeksn            tmp_greek.redim_arrays deals(inx).no_of_uln            If retrieve_ul_greek(tmp_greek, deals(inx).asset_code, deals(inx).get_ul_codes(), eval_date) Thenn                Set greeks(inx) = tmp_greekn            End Ifn            n        End Ifn    Next inxn    n    DBDisConnectornn    Exit Subn    nErrorHandler:nn    DBDisConnectornn    Err.Raise Err.number, "retrieve_end_of_day_greek_2d : " & Chr(13) & Err.source, Err.descriptionnnEnd SubnnPublic Sub make_greek_to_distribute(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, Optional eval_date_in As Date = -1)nn    Dim inx As Integern    Dim jnx As Integern    n    Dim dummy_bump_greeks_sets() As clsGreekSetnnOn Error GoTo ErrorHandlern    n    '---------------------------------------------------n    ' Firstly, read text file for 2Dn    '---------------------------------------------------n    read_greek_file greeks, deals, config__.current_date_nn    '---------------------------------------------------n    ' And then, calculate 3D autocallable.n    '---------------------------------------------------n    calculate_ac_greeks_3D greeks, deals, get_array_size_clsAcDealTicket(deals), market_set__, dummy_bump_greeks_sets, False, False, False, False, False, , , False, , Falsen        n    For inx = 1 To get_array_size_clsAcDealTicket(deals)n    n        If deals(inx).no_of_ul = 1 Thenn            greeks(inx).vega = AC_closing_greeks__(inx).vegan            greeks(inx).vanna = AC_closing_greeks__(inx).vannan            greeks(inx).skew_s = AC_closing_greeks__(inx).skew_sn        Elsen            greeks(inx).set_all_vegas AC_closing_greeks__(inx).get_all_vegas()n            greeks(inx).set_all_skews AC_closing_greeks__(inx).get_all_skews()n            greeks(inx).set_all_vannas AC_closing_greeks__(inx).get_all_vannas()n        End Ifn    n        greeks(inx).set_all_implied_tree_deltas greeks(inx).get_all_deltasn        greeks(inx).set_all_implied_tree_gammas greeks(inx).get_all_gammasn        greeks(inx).implied_tree_delta = greeks(inx).deltan        greeks(inx).implied_tree_gamma = greeks(inx).gamman        n        n                    n        'For jnx = 1 To deals(inx).no_of_ulnn            calc_sticky_strike_delta greeks(inx), deals(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), config__.current_date_, market_set__n            calc_sticky_strike_gamma greeks(inx), deals(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), config__.current_date_, market_set__n            n            modify_vega_by_vanna greeks(inx), deals(inx).no_of_ul, deals(inx).get_ul_codes(), market_set__n            n       ' Next jnxn    n    Next inxn    n    greek_to_file greeks, AC_deals__, config__.file_path_, "position_" & Format(config__.current_date_, "YYYYMMDD") & "." & config__.position_file_extensionnn    Exit Subn    nErrorHandler:nn    raise_err "make_greek_to_distribute", Err.descriptionnnEnd Subnnnnn'---------------------------------------------------------------n' To read text file for 2d ac.n'---------------------------------------------------------------nPrivate Sub read_greek_file(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, Optional eval_date_in As Date = -1, Optional vol_bump As Boolean = False, Optional bumping_this As String = "")nn  n    Dim inx As Integern    Dim jnx As Integern    n    Dim file_str As Stringn    Dim no_of_deals As Integern    Dim eval_date As Daten    Dim nodevalue_tmp() As Doublen    Dim px_tmp() As Doublen    Dim dx_tmp() As Doublen    Dim nmin_tmp() As Longn    Dim nmax_tmp() As Longn    'Dim file_cls As New FileIOn    Dim file_found As Booleann    n    Dim current_prices() As Doublen        n    n    'Dim greek_table As clsACGreekTablen    Dim sparse_greek_table As clsACSparseGridTablen   ' Dim sp_legacy_object As Objectn    n    Dim ul_Index As IntegernnOn Error Resume Nextnn    no_of_deals = UBound(deals)n    n    If Err.number = 9 Thenn        no_of_deals = 0n    End Ifn    nnOn Error GoTo ErrorHandlernn    If eval_date_in > 0 Thenn        eval_date = eval_date_inn    Elsen        eval_date = config__.current_date_n    End Ifn    n   ' Set sp_legacy_object = find_com_addIn()nn    For inx = 1 To no_of_dealsn    n        file_found = Falsen    n        ReDim nmin_tmp(1 To deals(inx).no_of_ul) As Longn        ReDim nmax_tmp(1 To deals(inx).no_of_ul) As Longn        ReDim current_prices(1 To deals(inx).no_of_ul) As Doublen        nn        n        For jnx = 1 To deals(inx).no_of_uln            nmin_tmp(jnx) = 0n            n            If deals(inx).no_of_ul <= 2 Thenn                nmax_tmp(jnx) = 200 '<-------n            Elsen                nmax_tmp(jnx) = 5 '<-------n            End Ifn            n            current_prices(jnx) = market_set__.market(market_set__.find_index(deals(inx).ul_code(jnx))).s_n            n        Next jnxn        n        '-------------------------------------------------------------------------------------------n        'n        '-------------------------------------------------------------------------------------------n        If greek_file_cache__ Is Nothing Thennn            Set greek_file_cache__ = New PositionFileRepositoryn            greek_file_cache__.initialize "W:\", "." & config__.snapshot_file_extensionnn        End Ifnn        n        '-----------------------------------------------n        ' I'm not so proud of this piece. Really.n        '-----------------------------------------------n        If deals(inx).no_of_ul <= 2 Thenn        n            Dim tmpValue As Doublen            Dim tmp_delta() As Doublen            Dim tmp_gamma() As Doublen            n            tmpValue = 0n            n            ReDim tmp_delta_array(1 To deals(inx).no_of_ul) As Doublen            ReDim tmp_gamma_array(1 To deals(inx).no_of_ul) As Doublen            n            Set greeks(inx) = New clsGreeksn            n            greeks(inx).redim_arrays deals(inx).no_of_uln            n            Dim tmp_file_name As Stringn            n            tmp_file_name = deals(inx).asset_coden            n            If vol_bump Thenn                For jnx = 1 To deals(inx).no_of_uln                    If deals(inx).ul_code(jnx) = bumping_this Thenn                        tmp_file_name = deals(inx).asset_code & "_vol_bump_" & jnx & "_"n                        Exit Forn                    End Ifn                Next jnxn            End Ifn            n            tmpValue = greek_file_cache__.getValue(tmp_file_name, array_base_zero(current_prices), array_base_zero(deals(inx).get_reference_price()), Format(eval_date, "YYYYMMDD"))n            n            greeks(inx).value = tmpValue * Sgn(deals(inx).notional)n            n            '------------------n            greeks(inx).value = tmpValue * Sgn(deals(inx).notional)n            n            n            tmp_delta = greek_file_cache__.getAllDeltas(tmp_file_name, array_base_zero(current_prices), array_base_zero(deals(inx).get_reference_price()), Format(eval_date, "YYYYMMDD"))n                                n            For jnx = 1 To deals(inx).no_of_uln                tmp_delta_array(jnx) = tmp_delta(jnx + LBound(tmp_delta) - 1) * Sgn(deals(inx).notional)n            Next jnxn            n            greeks(inx).set_all_deltas tmp_delta_array ' * Sgn(deals(inx).notional)n            greeks(inx).set_all_implied_tree_deltas greeks(inx).get_all_deltasn            greeks(inx).implied_tree_delta = greeks(inx).deltan            n            n            '------------------------n            n            n            tmp_gamma = greek_file_cache__.getAllGammas(tmp_file_name, array_base_zero(current_prices), array_base_zero(deals(inx).get_reference_price()), Format(eval_date, "YYYYMMDD"))n                      n            For jnx = 1 To deals(inx).no_of_uln                tmp_gamma_array(jnx) = tmp_gamma(jnx + LBound(tmp_gamma) - 1) * Sgn(deals(inx).notional)n            Next jnxn            n            greeks(inx).set_all_gammas tmp_gamma_array ' * Sgn(deals(inx).notional)n            greeks(inx).set_all_implied_tree_gammas greeks(inx).get_all_gammasn            greeks(inx).implied_tree_gamma = greeks(inx).gammann        n        End Ifnn    Next inxnn    Exit Subn    nErrorHandler:nn    raise_err "read_greek_file. Index: " & inx & ", asset_code: " & deals(inx).asset_code, Err.descriptionnnnEnd SubnnPrivate Function FileExists(ByVal sFullPath As String) As Booleann    Dim oFile As New Scripting.FileSystemObjectn    FileExists = oFile.FileExists(sFullPath)nEnd FunctionnnPrivate Sub retrieve_current_greek(ByRef greeks() As clsGreeks, ByRef deals() As clsACDealTicket, Optional eval_date_in As Date = -1) ', Optional eval_date_in As Date = -1)nn    Dim inx As Integern    Dim eval_date As Daten    nOn Error GoTo ErrorHandlernn    If eval_date_in < 0 Thenn    n        eval_date = config__.current_date_n    n    Elsen    n        eval_date = eval_date_inn        n    End Ifnn    If Not IsNull(ac_greek_cache__) And UBound(ac_greek_cache__) >= LBound(ac_greek_cache__) Thennn        ReDim greeks(LBound(ac_greek_cache__) To UBound(ac_greek_cache__)) As clsGreeksnn        For inx = LBound(ac_greek_cache__) To UBound(ac_greek_cache__)n        n            If ac_greek_cache__(inx).initialized = False Thenn            n                initialize_cache_greek ac_greek_cache__(inx), eval_date_inn                n            End Ifnn            Set greeks(inx) = ac_greek_cache__(inx).get_greeks(market_set__.market_by_ul().s_)n            n            If deals(inx).no_of_ul = 1 Thenn                greeks(inx).vega = AC_closing_greeks__(inx).vegan                greeks(inx).vanna = AC_closing_greeks__(inx).vannan                greeks(inx).skew_s = AC_closing_greeks__(inx).skew_sn            Elsen                greeks(inx).set_all_vegas AC_closing_greeks__(inx).get_all_vegas()n                greeks(inx).set_all_skews AC_closing_greeks__(inx).get_all_skews()n                greeks(inx).set_all_vannas AC_closing_greeks__(inx).get_all_vannas()n            End Ifn            n            'calc_implied_tree_delta greeks(inx), deals(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes(), eval_date, market_set__n            'greeks(inx).set_implied_tree_deltas deals(inx).duration, deals(inx).no_of_ul, deals(inx).get_ul_codes()nn        Next inxnn'        deals = deals__nn    End Ifnnnn    Exit SubnnErrorHandler:nn    raise_err "retrieve_current_greek", Err.descriptionnnEnd Subnn'-------------n'n'-------------nPrivate Sub calc_implied_tree_delta(the_greeks As clsGreeks, duration As Double, no_of_ul As Integer, ul_codes() As String, eval_date As Date, themarketset As clsMarketSet)n    n    Dim inx As Integern    Dim skew As Doublen    Dim market_index As Integern    Dim s As Doublen    nOn Error GoTo ErrorHandlern    n    If no_of_ul > 1 Thenn        n        If no_of_ul = get_array_size_double(the_greeks.get_all_deltas) Thenn        n            For inx = 1 To no_of_uln                n                the_greeks.set_implied_tree_deltas inx, the_greeks.deltas(inx) '+ the_greeks.vegas(inx) * get_skew(eval_date, eval_date + 365 * duration, ul_codes(inx), S) * 100 / Sn                                      n            n            Next inxn        End Ifn                n    Elsen        market_index = themarketset.find_index(ul_codes(1))n    n        s = themarketset.market(market_index).s_n        the_greeks.implied_tree_delta = the_greeks.delta + the_greeks.vega * themarketset.market(market_index).sabr_surface_.get_skew(eval_date + 365 * duration, s, eval_date, 0.8, 1.1) * 100 / sn    n    End Ifn    n    Exit Subn    nErrorHandler:nn    raise_err "calc_implied_tree_delta", Err.descriptionn    nnEnd Subnnn'-----------------------------------------------n' Calculate 2 dimension ac greeksn'-----------------------------------------------nPublic Sub calculate_ac_greeks_2D(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, deal_count As Long _n                              , theMarket As clsMarketSet _n                              , bump_greek_sets() As clsGreekSet _n                              , Optional calc_vega As Boolean _n                              , Optional calc_skew As Boolean _n                              , Optional calc_corr As Boolean _n                              , Optional calc_rho As Boolean = False _n                              , Optional ByVal current_date As Date = -1 _n                              , Optional ByVal ignore_smoothing As Boolean = False _n                              , Optional ByVal percent_vega As Boolean = False _n                              , Optional snapshot_time As Double = 1 / 365 / 2 _n                              , Optional ByVal calc_duration As Boolean = True)nnnnn    Dim inx As Integern    Dim jnx As Integern    Dim market As clsMarketn    Dim last_node() As Doublen    Dim tmp_greek As clsGreeksn    n    Dim status_bar_str As Stringn        nnOn Error GoTo ErrorHandlernn    If current_date < 0 Thenn        n        current_date = config__.current_date_n    n    Elsen    n        Set theMarket.pl_currency_rate_curve_ = theMarket.pl_currency_rate_curve_.copy_obj(current_date - theMarket.pl_currency_rate_curve_.rate_dates()(0))n    n    End Ifn    n    status_bar_str = Application.StatusBarnnn    If deal_count > 0 Thenn    n        ReDim Preserve greeks(LBound(deals) To UBound(deals)) As clsGreeksn        ReDim Preserve bump_greek_sets(LBound(deals) To UBound(deals)) As clsGreekSetnn        For inx = LBound(deals) To UBound(deals)n        'For inx = UBound(deals) To UBound(deals)n            n            DoEventsn            n            Application.StatusBar = status_bar_str & "> AC 2D: " & inx & " / " & UBound(deals) & " : " & deals(inx).asset_codennn            n            If deals(inx).no_of_ul = 2 Thenn            n                Set greeks(inx) = New clsGreeksn                n                greeks(inx).redim_arrays deals(inx).no_of_ulnn                deals(inx).current_date = current_daten                deals(inx).x_grid = config__.x_grid_n                deals(inx).v_grid = config__.v_grid_n                deals(inx).t_grid = -1 * Int(-1 * config__.time_step_per_day * (deals(inx).maturity_date - deals(inx).current_date))n                deals(inx).scheme_type = config__.fdm_scheme_n                deals(inx).set_term_vega_tenor config__.term_vega_tenor_arrayn    n    n                deals(inx).strike_at_maturity = deals(inx).autocall_schedules(deals(inx).no_of_schedule).percent_strike ' strike_values()(deals(inx).no_of_schedule) / deals(inx).reference_pricen                deals(inx).coupon_at_maturity = deals(inx).coupon_on_calls()(deals(inx).no_of_schedule)n                deals(inx).maturity_date = deals(inx).call_dates()(deals(inx).no_of_schedule)n                n                run_ac_pricing_2d greeks(inx), deals(inx), theMarket, bump_greek_sets(inx), calc_vega, calc_skew, calc_corr, calc_rho, 1 / 365 / 2, ignore_smoothingn                n    n                n                greeks(inx).asset_code = deals(inx).asset_coden    n                If percent_vega Thenn                    greeks(inx).set_vegas 1, greeks(inx).vegas(1) / 100n                    greeks(inx).set_vegas 2, greeks(inx).vegas(2) / 100n                End Ifn                n                n                If calc_duration Thenn                    greeks(inx).duration = get_ac_duration_2d(deals(inx), theMarket)n                End Ifn            n            End Ifnn        Next inxnn    End Ifn    n    Application.StatusBar = status_bar_strnnn    Exit SubnnErrorHandler:nn    raise_err "calculate_ac_greeks", Err.descriptionnnEnd Subn'-----------------------------------------------n' Calculate 2 dimension ac greeksn'-----------------------------------------------nPublic Sub calculate_ac_greeks_3D(ByRef greeks() As clsGreeks, deals() As clsACDealTicket, deal_count As Long _n                              , theMarket As clsMarketSet _n                              , bump_greek_sets() As clsGreekSet _n                              , Optional calc_vega As Boolean _n                              , Optional calc_skew As Boolean _n                              , Optional calc_corr As Boolean _n                              , Optional calc_rho As Boolean = False _n                              , Optional calc_theta As Boolean = False _n                              , Optional ByVal current_date As Date = -1 _n                              , Optional ByVal ignore_smoothing As Boolean = False _n                              , Optional ByVal percent_vega As Boolean = False _n                              , Optional snapshot_time As Double = 1 / 365 / 2 _n                              , Optional ByVal calc_duration As Boolean = True)nnnnn    Dim inx As Integern    Dim jnx As Integern    Dim market As clsMarketn    Dim last_node() As Doublen    Dim tmp_greek As clsGreeksn    Dim status_bar_strnnOn Error GoTo ErrorHandlernn    If current_date < 0 Thenn        n        current_date = config__.current_date_n    n    Elsen    n        Set theMarket.pl_currency_rate_curve_ = theMarket.pl_currency_rate_curve_.copy_obj(current_date - theMarket.pl_currency_rate_curve_.rate_dates()(0))n    n    End Ifn    n    status_bar_str = Application.StatusBarn    nn    If deal_count > 0 Thenn    n        ReDim Preserve greeks(LBound(deals) To UBound(deals)) As clsGreeksn        ReDim Preserve bump_greek_sets(LBound(deals) To UBound(deals)) As clsGreekSetnn        For inx = LBound(deals) To UBound(deals)n        'For inx = UBound(deals) To UBound(deals)n        n            n            n            Application.StatusBar = status_bar_str & "> AC 3D: " & inx & " / " & UBound(deals) & " : " & deals(inx).asset_codenn            DoEventsn            n            If deals(inx).no_of_ul = 3 Thenn                n                n                    Set greeks(inx) = New clsGreeksn                n                n                n                greeks(inx).redim_arrays deals(inx).no_of_uln                n                deals(inx).current_date = current_daten                deals(inx).x_grid = config__.x_grid_n                deals(inx).v_grid = config__.v_grid_n                deals(inx).t_grid = -1 * Int(-1 * config__.time_step_per_day * (deals(inx).maturity_date - deals(inx).current_date))n                deals(inx).scheme_type = config__.fdm_scheme_n                deals(inx).set_term_vega_tenor config__.term_vega_tenor_arrayn                n                If Abs(deals(inx).notional) < 500000000 Thenn                    deals(inx).no_of_trials = (config__.no_of_trials_closing_ + 1) / 2 - 1n                Elsen                    deals(inx).no_of_trials = config__.no_of_trials_closing_n                End Ifn    n                deals(inx).strike_at_maturity = deals(inx).autocall_schedules(deals(inx).no_of_schedule).percent_strike 'deals(inx).strike_values()(deals(inx).no_of_schedule) / deals(inx).reference_pricen                deals(inx).coupon_at_maturity = deals(inx).coupon_on_calls()(deals(inx).no_of_schedule)n                deals(inx).maturity_date = deals(inx).call_dates()(deals(inx).no_of_schedule)n                n                run_ac_pricing_3d greeks(inx), deals(inx), theMarket, bump_greek_sets(inx), calc_vega, calc_skew, calc_corr, calc_rho, calc_theta, 1 / 365 / 2, ignore_smoothingn    n                n                greeks(inx).asset_code = deals(inx).asset_coden    n                If percent_vega Thenn                    greeks(inx).set_vegas 1, greeks(inx).vegas(1) / 100n                    greeks(inx).set_vegas 2, greeks(inx).vegas(2) / 100n                    greeks(inx).set_vegas 3, greeks(inx).vegas(3) / 100n                End Ifn                n                n                If calc_duration Thenn                    greeks(inx).duration = get_ac_duration_3d(deals(inx), theMarket)n                End Ifn            n            End Ifnn        Next inxnn    End Ifn    n    Application.StatusBar = status_bar_strnnnn    Exit SubnnErrorHandler:nn    raise_err "calculate_ac_greeks", Err.descriptionnnEnd Subnn'---------------------------------------------------------------------n' Calculate 1dimension autocallable greeksn'---------------------------------------------------------------------nPublic Sub calculate_ac_greeks(ByRef greeks() As clsGreeks, ByRef intraday_greeks() As clsGreeks, deals() As clsACDealTicket, deal_count As Long _n                              , theMarket As clsMarketSet _n                              , Optional s_in As Double = -1, Optional bump_greeks As String = "Y" _n                              , Optional ByVal current_date_in As Date = -1 _n                              , Optional ByVal ignore_smoothing As Boolean = False _n                              , Optional ByVal percent_vega As Boolean = False _n                              , Optional calc_skew As Boolean = True _n                              , Optional calc_rho As Boolean = True _n                              , Optional calc_duration As Boolean = False)nn    Dim inx As Integern    Dim jnx As Integern    Dim market As clsMarketn    Dim pl_currency_curve As clsRateCurven    n    Dim last_node() As Doublen    Dim tmp_greek As clsGreeksn    Dim current_date As Daten    n    Dim bump_greek_set As clsGreekSetn    n    Dim status_bar_str As Stringn        nnOn Error GoTo ErrorHandlernn    Set market = theMarket.market_by_ul().copy_obj()nn    If current_date_in < 0 Thenn        current_date = config__.current_date_n    Elsen        current_date = current_date_inn        Set market.rate_curve_ = theMarket.pl_currency_rate_curve_.copy_obj(current_date - theMarket.pl_currency_rate_curve_.rate_dates()(0))n    End Ifn    n    n    status_bar_str = Application.StatusBarnnnn    If deal_count > 0 Thenn        n        ReDim Preserve greeks(LBound(deals) To UBound(deals)) As clsGreeksnn        '---------------------------------n        ' Loop for deal listn        '---------------------------------n        For inx = LBound(deals) To UBound(deals)n            n            DoEventsn        n            Application.StatusBar = status_bar_str & "> AC1D" & inx & " / " & UBound(deals) & " : " & deals(inx).asset_coden    n            Set greeks(inx) = New clsGreeksn                n            If deals(inx).no_of_ul = 1 Thenn                '-------------------------------------------------------n                ' Set FDM parametersn                '-------------------------------------------------------n                deals(inx).current_date = current_daten                deals(inx).x_grid = config__.x_grid_n                deals(inx).v_grid = config__.v_grid_n                deals(inx).t_grid = -1 * Int(-1 * config__.time_step_per_day * (deals(inx).maturity_date - deals(inx).current_date))n                deals(inx).scheme_type = config__.fdm_scheme_n                deals(inx).set_term_vega_tenor config__.term_vega_tenor_arrayn    n    n                deals(inx).strike_at_maturity = deals(inx).autocall_schedules(deals(inx).no_of_schedule).percent_strike 'deals(inx).strike_values()(deals(inx).no_of_schedule) / deals(inx).reference_pricen                deals(inx).coupon_at_maturity = deals(inx).coupon_on_calls()(deals(inx).no_of_schedule)n                deals(inx).maturity_date = deals(inx).call_dates()(deals(inx).no_of_schedule)n                n                Erase last_noden                n                '----------------------------------------n                ' RUN Pricingn                '----------------------------------------n                'run_ac_pricing greeks(inx), deals(inx), market, last_node, bump_greeks = "Y", 1, ignore_smoothingn                run_ac_pricing_1d greeks(inx), deals(inx), theMarket, bump_greek_set, bump_greeks = "Y", bump_greeks = "Y", bump_greeks = "Y", bump_greeks = "Y", 1 / 365 / 2, ignore_smoothingn                greeks(inx).asset_code = deals(inx).asset_coden    n                If percent_vega Thenn                    greeks(inx).vega = greeks(inx).vega / 100n                End Ifn                n                n                '----------------------------------------n                ' Intraday greekn                '----------------------------------------n'                For jnx = 1 To get_array_size_double(greeks(inx).get_xAxis())n'n'                    Set tmp_greek = New clsGreeksn'n'                    tmp_greek.asset_code = deals(inx).asset_coden'                    tmp_greek.value = greeks(inx).get_snapshot_value()(inx)n'                    tmp_greek.delta = greeks(inx).get_xAxis()(inx)n'                    tmp_greek.gamma = greeks(inx).get_xAxis()(inx)n'n'    Dim rtn_array() As Doublen'    Dim inx As Integern'n'    ReDim rtn_array(1 To ul_num_index) As Doublen'n'    For inx = 1 To ul_num_indexn'n'        rtn_array(inx) = rtnCls.ReturnDelta(current_prices, initial_prices, nodeValue_, px_, dx_, nmin_, nmax_, inx) * notional_signn'n'    Next inxn'n'    get_deltas = rtn_arrayn'n'n'                Next jnxn'                For jnx = LBound(last_node, 2) To UBound(last_node, 2)n'n'                    Set tmp_greek = New clsGreeksn'n'                    tmp_greek.asset_code = deals(inx).asset_coden'                    tmp_greek.value = last_node(2, jnx) * deals(inx).notionaln'                    tmp_greek.delta = last_node(3, jnx) * deals(inx).notionaln'                    tmp_greek.gamma = last_node(4, jnx) * deals(inx).notionaln'                    tmp_greek.ul_price = last_node(1, jnx) ' * deals(inx).notionaln'n'                    push_back_greek intraday_greeks, tmp_greekn'n'                Next jnxn                n                '----------------------------------------n                ' Calc durationn                '----------------------------------------n                If calc_duration Thenn                    greeks(inx).duration = get_ac_duration(deals(inx), theMarket)n                End Ifn                n            End Ifnn        Next inxnn    End Ifnn     Application.StatusBar = status_bar_strnnn    Exit SubnnErrorHandler:nn  '  Application.StatusBar = ""n    raise_err "calculate_ac_greeks", Err.description & ": " & deals(inx).asset_codennEnd Subnn'Private Sub initialize_cache_greek(greek_cache As clsGreekCache, Optional eval_date_in As Date = -1)n'n'    Dim eval_date As Daten'    Dim abscissa() As Doublen'    Dim greeks() As clsGreeksn'    Dim ul_count As Integern'n'On Error GoTo ErrorHandlern''Check evaluation date.n''Default evaluation date is the current date loaded.n'n'    If eval_date_in >= 0 Thenn'n'        eval_date = eval_date_inn'n'    Elsen'n'        eval_date = config__.current_date_n'n'    End Ifn'n'    ul_count = retrieve_cache_greek(abscissa, greeks, greek_cache.deal.asset_code, eval_date)n'n'    If ul_count > 0 Thenn'n'        greek_cache.initialize abscissa, greeksn'n'    Elsen'n'        greek_cache.null_greekn'       ' Err.Raise vbObjectError, , "[PRO] Cannot find greek cache:" & Chr(13) & "Asset code:" & greek_cache.deal.asset_coden'n'    End Ifn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "initialize_cache_greek"n'n'n'End Subn'n'n'n'n'n'Private Function retrieve_cache_greek(ByRef abscissa() As Double, ByRef greeks() As clsGreeks, asset_code As String, eval_date As Date) As Integern'n'    Dim greek_cd() As Stringn'    Dim greek_value() As Doublen'    Dim ul_price() As Doublen'    Dim ul_count As Integern'    Dim inx As Integern'n'    Dim counter As Integern'    Dim prev_ul_price As Doublen'n'On Error GoTo ErrorHandlern'n'    DBConnectorn'n'    If retrieve_ul_count(ul_count, eval_date, asset_code) Thenn'n'        ReDim abscissa(1 To ul_count) As Doublen'        ReDim greeks(1 To ul_count) As clsGreeksn'n'        retrieve_cache_greek_sql ul_price, greek_cd, greek_value, eval_date, asset_coden'n'        prev_ul_price = -1n'        counter = 0n'n'        For inx = LBound(greek_value) To UBound(greek_value)n'n'            If prev_ul_price <> ul_price(inx) Thenn'n'                counter = counter + 1n'n'                abscissa(counter) = ul_price(inx)n'                Set greeks(counter) = New clsGreeksn'n'                prev_ul_price = ul_price(inx)n'n'            End Ifn'n'            greeks(counter).set_greek_value greek_cd(inx), greek_value(inx)n'n'        Next inxn'n'    End Ifn'n'    retrieve_cache_greek = ul_countn'n'    DBDisConnectorn'n'    Exit Functionn'n'ErrorHandler:n'n'    DBDisConnectorn'    raise_err "retrieve_cache_greek"n'n'n'End FunctionnnPublic Sub get_closing_s_series(ul_code As String, start_date As String, end_date As String, ByRef result_date_array() As Long, ByRef result_price_array() As Double)nn    Dim adoCon As New adoDB.Connectionn    Call connectDB(adoCon, TNS_SERVICE_NAME, USER_ID, PASSWORD)n    nOn Error GoTo ErrorHandlernn    Dim oCmd As New adoDB.Commandn    Dim oRS As New adoDB.Recordsetn    Dim sql As Stringn    n'    If Left(ul_code, 3) = "KR7" Thenn'        sql = "select tdate, endprice from ras.if_stock_data where tdate between '" + start_date + "' and '" + end_date + "' and code = '" + ul_code + "'  order by tdate asc"n'    Elsen'        sql = "select tdate, endprice from ras.if_index_data where tdate between '" + start_date + "' and '" + end_date + "' and indexid = '" + ul_code + "'  order by tdate asc"n'    End Ifn    sql = "select tdate, endprice from ras.if_stock_data where tdate between '" + start_date + "' and '" + end_date + "' and code = '" + ul_code + "' union " _n        & "select tdate, endprice from ras.if_index_data where tdate between '" + start_date + "' and '" + end_date + "' and indexid = '" + ul_code + "' order by tdate asc"n    n    With oCmdn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = sqln        n        oRS.Open .Executen    End Withn    n'    Dim i As Integern'    ReDim result_date_array(0 To oRS.RecordCount - 1) As Longn'    ReDim result_price_array(0 To oRS.RecordCount - 1) As Doublen    n    Do Until oRS.EOFn    n        Call push_back_long(result_date_array, CLng(str2date(oRS.Fields(0))), 0)n        Call push_back_double(result_price_array, oRS.Fields(1), 0)n    n        'result_date_array(i) = CLng(oRS.Fields(0))n        'result_price_array(i) = oRS.Fields(1)n        n        'i = i + 1n        oRS.MoveNextn    Loopn    oRS.Closen    n    Call disconnectDB(adoCon)n    nnExit Subn    nErrorHandler:n    n    raise_err "get_closing_s_series", Err.descriptionnnEnd Subnn'drift adjustment 추가: 2023.11.21nPublic Function get_drift_adjustment(ByRef term_date() As Date, ByRef adjust() As Double, eval_date As Date, ul_code As String) As Integern'Public Function get_drift_adjustme                  nt(ByRef term_date() As Date, ByRef adjust() As Double, eval_date As Date, ul_code As String) As LongPtrnnOn Error GoTo ErrorHandlern    n    Dim adoCon As New adoDB.Connectionn    Call connectDB(adoCon, TNS_SERVICE_NAME, USER_ID, PASSWORD)nn    Dim sql As Stringn    Dim oRS As New adoDB.Recordsetn    Dim i As Integern    i = 1n    n    sql = "select term_date, adjust from sps.drift_adjust where  ul_code='" + ul_code + "' and eval_date = (select max(eval_date) from sps.ul_sabr_parameter where ul_code='" + ul_code + "' and eval_date<='" + date2str(eval_date) + "')"n    n    oRS.CursorLocation = adUseClientn    oRS.CursorType = adOpenStaticn    oRS.Open sql, adoConn    n    ReDim term_date(1 To oRS.RecordCount + 2) As Daten    ReDim adjust(1 To oRS.RecordCount + 2) As Doublen    n    term_date(i) = eval_daten    adjust(i) = 1#n    i = i + 1n    n    If oRS.RecordCount > 0 Thenn        oRS.MoveFirstn        Don            term_date(i) = str2date(oRS("TERM_DATE"))n            adjust(i) = Exp(-1 * oRS("ADJUST") * (term_date(i) - eval_date) / 365)n            n            oRS.MoveNextn            i = i + 1n        Loop While Not oRS.EOFn    End Ifn    n    term_date(i) = DateValue(eval_date + 365 * 10)n    adjust(i) = 1#n    n    If oRS.State <> 0 Then oRS.Closen    n    get_drift_adjustment = in    n    adoCon.Closen    n    Exit FunctionnnErrorHandler:n    If oRS.State <> 0 Then oRS.Closen    Err.Raise Err.number, Err.source, Err.description, Erl, "get_drift_adjustment"nnEnd Functionnnn'To Do(verify=true)n'deal ticket cls 구성 단계에서n'1. biz-one 테이블 별 booking 오류, 모순점 검증n'2. 각 DB source와 대사 (source: biz-one / front / risk)n'3. 발행 후 주가 경로 탐색 -> barrier touch 대사nPublic Function get_ac_deal_ticket(indv_iscd As String, target_date As Date, for_frn_flag As Boolean, for_eswap_flag As Boolean, adoCon As adoDB.Connection, Optional db_source As DATA_FROM = DATA_FROM.bsys, Optional eval_date_lag As Boolean = False, Optional verify As Boolean = False, Optional market_set As clsMarketSet) As clsACDealTicketnn    Dim oCmd As New adoDB.Commandn    Dim oRS As New adoDB.Recordsetn    Dim oRS2 As New adoDB.Recordsetn    n    Dim bind_variable() As Stringn    Dim bind_value() As Variantn    n    Dim deal_ticket As clsACDealTicketn    Dim schedule_list() As clsAutocallSchedulen    Dim a_schedule As clsAutocallSchedulen    Dim no_of_schedule As Integern    Dim call_dates() As Daten    Dim strikes() As Doublen    Dim coupons() As Doublen    Dim strike_shifts() As Doublen    Dim early_exit_touched_flags() As Long 'data type 변경: dll(2018.7.17)n    Dim early_exit_performance_types() As Long 'dll(2018.8.8)n    Dim early_exit_barrier_types() As Long 'dll(2018.8.8)n    n    Dim inx As Integern    Dim jnx As Integern    Dim i As Integern    n    Set deal_ticket = New clsACDealTicketnnOn Error GoTo ErrorHandlernn    'Fixed Valuen    deal_ticket.alive_yn = "Y"n    deal_ticket.confirmed_yn = "Y"n    deal_ticket.rate_spread = 0n    deal_ticket.hedge_cost = 0n    deal_ticket.instrument_type = INST_TYPE.note 'noten    n    'Autocall optionn    deal_ticket.call_put = 0 'autocall/autoputn    deal_ticket.call_strike = 1n    deal_ticket.call_participation = 0n    deal_ticket.floor_value = 0n    n    'KI optionn    deal_ticket.put_strike = 1 'ki putn    deal_ticket.put_additional_coupon = 0n    deal_ticket.put_participation = 1n    deal_ticket.ki_adj_pct = 1 'ki시 기존 coupon rate 대비 지급 승수n    n    'Range Accrualn    deal_ticket.ra_flag = 0n    deal_ticket.ra_cpn = 0n    deal_ticket.ra_tenor = 0n    deal_ticket.ra_min_percent = 0n    deal_ticket.ra_max_percent = 10000n    n    'Ejectable: TBDn'    deal_ticket.ejectable_flag = Falsen        n    'Floating Leg: TBDn'    no_of_schedule = shtACPricer.Range("no_of_floating_leg").valuen'    If no_of_schedule >= 1 Thenn'        ReDim call_dates(1 To no_of_schedule) As Daten'        ReDim coupons(1 To no_of_schedule) As Doublen'n'        For inx = 1 To no_of_schedulen'            call_dates(inx) = shtACPricer.Range("floating_leg_start").Cells(inx, 1).valuen'            coupons(inx) = shtACPricer.Range("floating_leg_start").Cells(inx, 2).valuen'        Next inxn'    End Ifn'    deal_ticket.set_floating_schedule no_of_schedule, call_dates, couponsn    n    'Simulation Confign    deal_ticket.current_date = target_daten    deal_ticket.current_date_origin_ = deal_ticket.current_daten    deal_ticket.x_grid = 200n    deal_ticket.v_grid = 100n    deal_ticket.days_per_step = 0.25n    deal_ticket.scheme_type = 1 '0: Do, 1: CS, 2: MCS, 3:HVn    deal_ticket.mid_day_greek = Falsen    deal_ticket.vol_scheme_type = 1 '0:Stochastic, 1:Localn    deal_ticket.no_of_trials = 2 ^ 14 - 1n    n    Dim term_array() As Daten    For inx = 1 To 14n        If inx < 3 Thenn            push_back_date term_array, deal_ticket.current_date + 30 * inxn        Elsen            push_back_date term_array, deal_ticket.current_date + 90 * (inx - 2)n        End Ifn    Next inxn    deal_ticket.set_term_vega_tenor term_arrayn    n    'deal_ticket 미사용 필드n    'Public current_notional As Doublen    'Public early_exit_touched_flag As Longn    'Public Maturity As Integern    'Public duration As Doublen    'Public ko_barrier_flag As Longn    'Public ko_touched_flag As Longn    'Public ko_barrier As Doublen    'Public comment As Stringn        n    'biz-one -> deal_ticketn    'OTC 기본 정보, KIn    deal_ticket.asset_code = indv_iscdnn    ReDim bind_variable(2) As Stringn    ReDim bind_value(2) As Variantn    bind_variable(1) = ":indv_iscd"n    bind_value(1) = indv_iscdn    bind_variable(2) = ":tdate"n    bind_value(2) = date2str(target_date)n    n    With oCmdnn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = getSQL(SQL_PATH_AC_DEAL, bind_variable, bind_value)nn        oRS.Open .Executenn    End Withn        n    Dim ki_barrier As Doublen    Dim ac_every_performance_type As Integern            n    Do Until oRS.EOFn    n        deal_ticket.fund_code_c = oRS(0)n        deal_ticket.fund_code_m = Left(deal_ticket.fund_code_c, 2)nn        deal_ticket.value_date = oRS("FRST_STND_PRC_FIN_DATE")n        deal_ticket.settlement_date = oRS("PBLC_DATE")n        deal_ticket.maturity_date = oRS("MTRT_DATE")n        deal_ticket.ccy = oRS("STLM_CRCD")n    n        deal_ticket.issue_price = oRS("FUND_PBLC_UNPR") / oRS("REAL_PBLC_FCAM") '발행가n        deal_ticket.issue_cost = oRS("PERC_APLY_THPR") '장부가n        n        deal_ticket.unit_notional = oRS("REAL_PBLC_FCAM")nn        If for_eswap_flag = True Thenn            deal_ticket.put_additional_coupon = -1n            deal_ticket.floor_value = -1n        End Ifn        n        'for ELB 2024.07.12 <- temp for ELB290, ELB312, ELB316n        If oRS("PROD_CLS_CODE_D") = "13" Then 'indv_iscd = "IO322724290T" Or indv_iscd = "IO322724312T" Or indv_iscd = "IO322724316T" Thenn            deal_ticket.floor_value = 1n            If for_eswap_flag = True Thenn                deal_ticket.floor_value = 0n            End Ifn        End Ifn        n        'for Booster 2024.07.12 <- temp for Booster 2024.06.28n        If oRS("CLRD_TYPE_CODE") = "19" Then 'indv_iscd = "IO332724072T" Or indv_iscd = "IO332724073T" Or indv_iscd = "IO332724077T" Thenn            deal_ticket.call_participation = 2 '<- 비즈원[35304] 만기수익률관리 참여율 참조로 변경 필요n        End Ifnn        '2024.05.29n        If deal_ticket.value_date = target_date Thenn            deal_ticket.qty = oRS("PBLC_STCK_QTY")n        Elsen            deal_ticket.qty = oRS("RMND_QTY")n        End Ifnn        If oRS("DEAL_CLS_CODE") = "1" Then '매도n            deal_ticket.qty = -1 * deal_ticket.qtyn        End Ifn        n        deal_ticket.notional = deal_ticket.qty * deal_ticket.unit_notionaln        n        Select Case oRS("PROD_CLS_CODE")n        Case "04": deal_ticket.instrument_type = INST_TYPE.SWAPn        Case "07": deal_ticket.instrument_type = INST_TYPE.note 'ELSn        Case "09": deal_ticket.instrument_type = INST_TYPE.note 'ELNn        End Selectn        n        'KI barriern        '만기상환 베리어 유무n        If oRS("BARR_EN") = "2" Then 'No KI barriern            deal_ticket.ki_barrier_flag = 1n            ki_barrier = 0n            deal_ticket.dummy_coupon = 0n            deal_ticket.ki_touched_flag = 1n            deal_ticket.ki_monitoring_freq = 1n        Elsen            deal_ticket.ki_barrier_flag = 1n            ki_barrier = oRS("BARR_VAL1") / 100n            deal_ticket.dummy_coupon = get_dummy(indv_iscd, ki_barrier, adoCon)n            n            '만기상환 베리어 HIT유무n            If oRS("BARR_HIT_CLS_CODE") = "2" Thenn                deal_ticket.ki_touched_flag = 0n            Elsen                deal_ticket.ki_touched_flag = 1n            End Ifn            n            If oRS("MNTG_CYCL_CODE") = "3" Thenn                deal_ticket.ki_monitoring_freq = 1n            Elsen                deal_ticket.comment = deal_ticket.comment + "KI 모니터링 주기(MNTG_CYCL_CODE)가 Daily로 설정되지 않음"n            End Ifn        End Ifn        n        If for_frn_flag = True Thenn            deal_ticket.ki_touched_flag = 0n        End Ifn            n        If for_eswap_flag = True Thenn            deal_ticket.dummy_coupon = deal_ticket.dummy_coupon - 1n        End Ifn            n        '기초자산 선정방법n        Select Case oRS("UNAS_CHOC_MTHD_CODE")n        Case "1" 'Worstn            ac_every_performance_type = -1n            deal_ticket.ki_performance_type = -1n        Case "2" 'Bestn            ac_every_performance_type = 1n            deal_ticket.ki_performance_type = 1n        Case "4" 'Avgn            ac_every_performance_type = 0n            deal_ticket.ki_performance_type = 0n        Case "5" 'WPn            ac_every_performance_type = 0n            deal_ticket.ki_performance_type = -1n        End Selectn        n        '조기상환 유형n        deal_ticket.monthly_coupon_flag = 0n        deal_ticket.early_exit_flag = 0n        n        Select Case oRS("CLRD_TYPE_CODE")n        Case "17" 'safe stepdownn            If oRS("BARR_EN") = "1" Thenn                deal_ticket.comment = deal_ticket.comment + "조기상환유형(CLRD_TYPE_CODE)과 KI barrier 유무(BARR_EN) 불일치"n            Elsen                'KI HIT한 stepdown 상품으로 간주n'                deal_ticket.ki_barrier_flag = 1n'                deal_ticket.ki_touched_flag = 1n'                deal_ticket.ki_monitoring_freq = 1n            End Ifn        Case "22": deal_ticket.monthly_coupon_flag = 1n        Case "29": deal_ticket.early_exit_flag = 1n        Case "38": 'five-winn        End Selectn        n        If for_frn_flag = True Or for_eswap_flag = True Then '월지급식 조기상환 구조를 이용한 equity-linked frn, equity swap pricingn            deal_ticket.monthly_coupon_flag = 1n        End Ifn        n        oRS.MoveNextn    n    Loopn    n    oRS.Closen    n    'Simulation Confign    deal_ticket.t_grid = Round((deal_ticket.maturity_date - deal_ticket.current_date) / 4, 0)n    n    '기초자산n    Dim ref_spot As Doublen    Dim enum_ua As Variantn    'Dim eval_shift_flag As Booleann    deal_ticket.has_eval_shift_ul = False '2025.05.23 eval_shift_flag를 deal_ticket에 추가n    n    ReDim bind_variable(1) As Stringn    ReDim bind_value(1) As Variantn    bind_variable(1) = ":indv_iscd"n    bind_value(1) = indv_iscdn        n    With oCmdnn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = getSQL(SQL_PATH_AC_DEAL_UL, bind_variable, bind_value)nn        oRS.Open .Executenn    End Withnn    Dim no_of_ul As Integern    no_of_ul = 0n    n    Do Until oRS.EOFn    n        no_of_ul = no_of_ul + 1n        n        '기초자산 수 설정 및 관련 배열 초기화n        deal_ticket.set_ul_dim no_of_uln    n        'deal_ticket.set_ul_code oRS("UNAS_ISCD"), no_of_uln        deal_ticket.set_ul_code get_ua_code(get_ua_idx(oRS("UNAS_ISCD"))), no_of_ul '2024.04.29 ul_code 정규화n        n        '한국 영업시간 종료기준 종가 미확정 기초자산이 포함된 경우, deal_ticket.has_eval_shift_ul = true (and eval_date_lag = true 이면 평가일 1일 이연 목적)n        For Each enum_ua In eval_shift_uan            If enum_ua = get_ua_idx(deal_ticket.ul_code(no_of_ul)) Thenn                deal_ticket.has_eval_shift_ul = Truen            End Ifn        Nextn        n'        If eval_date_lag = True Thenn'            For Each enum_ua In EVAL_SHIFT_UAn'                If enum_ua = get_ua_idx(deal_ticket.ul_code(no_of_ul)) Thenn'                    eval_shift_flag = Truen'                End Ifn'            Nextn'        End Ifn        n        '평가일 <= 거래일 or Quote 모드 경우, 최초기준가 100으로 설정n        If target_date <= deal_ticket.value_date Thenn            ref_spot = get_spot(deal_ticket.ul_code(no_of_ul), target_date, True, adoCon)n            '종가 입수 누락된 경우, 음수 표시n            If ref_spot = 0 Thenn                ref_spot = -1n            End Ifn        Elsen            ref_spot = oRS("UNAS_INTL_PRC")n            '평가일 = 발행일 경우, 최초기준가 검증n            If target_date = deal_ticket.settlement_date And Abs(get_spot(deal_ticket.ul_code(no_of_ul), deal_ticket.value_date, False, adoCon) - ref_spot) > 0.0001 Thenn                deal_ticket.comment = deal_ticket.comment + "기초자산 최초기준가(UNAS_INTL_PRC)가 종가와 일치하지 않음"n            End Ifn        End Ifn        deal_ticket.set_reference_price ref_spot, no_of_uln        n        '기초자산별 ejected 여부: TBDn        deal_ticket.set_ejected_ul_flag 0, no_of_uln        n        '기초자산별 ki barreir가 모두 동일: biz-one booking 확인 필요n        deal_ticket.set_ki_barrier ki_barrier, no_of_uln    n        oRS.MoveNextn        n    Loopn    n    oRS.Closen    nn    'Front DB -> deal_ticketn    'KI barrier shift: 자체헷지만 적용n    deal_ticket.ki_barrier_shift = 0n    n    If KI_SHIFT_ENABLE = True Then '2024.07.16n    n        With oCmdn        n            .ActiveConnection = adoConn            .CommandType = adCmdTextn            .CommandText = "select KIBARRIER_SHIFT_SIZE from sps.ac_deal where asset_code ='" + indv_iscd + "'"n            n            oRS.Open .Executen        n        End Withn    n        Do Until oRS.EOFn        n            deal_ticket.ki_barrier_shift = oRS(0)n            oRS.MoveNextn        n        Loopn        n        oRS.Closen        n    End Ifn    n    n    'biz-one, front DB -> deal_ticketn    'autocall schedules w/ strike smoothing widthsn    With oCmdnn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = getSQL(SQL_PATH_AC_SCHEDULE, bind_variable, bind_value)nn        oRS.Open .Executenn    End Withnn    'unas_choc_mthd_code과 일치 여부 검증n    Dim ac_each_performance_type As Integern    no_of_schedule = 0n    n    Do Until oRS.EOFnn        no_of_schedule = no_of_schedule + 1n        n        Set a_schedule = New clsAutocallSchedulenn        If deal_ticket.has_eval_shift_ul = True And eval_date_lag = True Thenn            '모두 해외지수이고 call_date가 국내 연휴기간 중인 경우, target_date > TRTH_CLRD_DTRM_DATE+1 이더라도 상환여부 판단 필요.n            '이 경우, 해당 기간 중 해외지수 종가가 동일하게 국내 비영업일 기준으로 하루 지연되어 입수되어야 함.n            'TRTH_CLRD_DTRM_DATE:조기상환결정일=Tn            'CLRD_DTRM_DATE:회계반영일=T(미확정 기초자산일 경우, 조기상환결정일에 T+1로 수정)n            'CLRD_DATE:조기상환일(결제)=T+2n            a_schedule.call_date = oRS("TRTH_CLRD_DTRM_DATE") + 1n        Elsen            a_schedule.call_date = oRS("TRTH_CLRD_DTRM_DATE")n        End Ifn        a_schedule.set_percent_strike oRS("UNAS_SDRT1") / 100n        n        If for_frn_flag = True Thenn            a_schedule.set_coupon_on_call 0n            a_schedule.strike_shift = 0n        Elsen            If for_eswap_flag = True Thenn                a_schedule.set_coupon_on_call oRS("CLRD_ERT") / 100 - 1n            Elsen                a_schedule.set_coupon_on_call oRS("CLRD_ERT") / 100n            End Ifn            n            If IsEmpty(oRS("strike_smoothing_width")) Thenn                a_schedule.strike_shift = 0n            Elsen                'If shtACPricer.Range("chkStrikeSmoothing").value = True Thenn                If PAYOFF_SMOOTHING_ENABLE = True Then '2024.07.16n                    a_schedule.strike_shift = oRS("strike_smoothing_width")n                Elsen                    a_schedule.strike_shift = 0n                End Ifn            End Ifn            n        End Ifn        n        n        If oRS("AVRG_APLY_YN") = "Y" Thenn            ac_each_performance_type = 0n        Elsen            ac_each_performance_type = ac_every_performance_typen        End Ifn        n        If IsEmpty(oRS("performance_type")) Thenn            a_schedule.performance_type = -1n        Elsen            If ac_every_performance_type = oRS("performance_type") And ac_every_performance_type = ac_each_performance_type Thenn                a_schedule.performance_type = oRS("performance_type")n            Elsen                deal_ticket.comment = deal_ticket.comment + "조기상환평가일별 performance_type이 unas_choc_mthd_code과 일치하지 않음"n            End Ifn        End Ifn        n        'for the ejectable structure : dll(2021.11.12)n        If deal_ticket.ejectable_flag = True Thenn            a_schedule.ejected_event_flag = 1n            a_schedule.ejectable_order = 0 'TBDn        Elsen            a_schedule.ejected_event_flag = 0n        End Ifnn        push_back_clsAutocallSchedule schedule_list, a_schedulenn        oRS.MoveNextnn    Loopnn    oRS.Closen    n    deal_ticket.no_of_schedule = no_of_schedulen    n    '마지막 조기상환일 = 만기일과 같은지 확인 필요n    If schedule_list(deal_ticket.no_of_schedule).call_date <> deal_ticket.maturity_date Thenn        deal_ticket.comment = deal_ticket.comment + "마지막 조기상환평가일과 만기일이 일치하지 않음"n        'schedule_list(deal_ticket.no_of_schedule).call_date = deal_ticket.maturity_date '2024.02.26n        deal_ticket.maturity_date = schedule_list(deal_ticket.no_of_schedule).call_date '2024.05.16n        'Update simulation confign        deal_ticket.t_grid = Round((deal_ticket.maturity_date - deal_ticket.current_date) / 4, 0) '2024.05.16n    End Ifn    n    deal_ticket.set_schedule_array schedule_listn    deal_ticket.strike_at_maturity = schedule_list(deal_ticket.no_of_schedule).percent_striken    deal_ticket.coupon_at_maturity = schedule_list(deal_ticket.no_of_schedule).coupon_on_callnn    'safe stepdown인 경우, KI HIT한 stepdown 상품으로 간주하고 마지막 조기상환 베리어로 KI 설정n'    If 1 Thenn'        For i = 1 To deal_ticket.no_of_uln'            deal_ticket.set_ki_barrier deal_ticket.strike_at_maturity, in'        Next in'    End Ifnn    For i = 1 To deal_ticket.no_of_schedulen        Set schedule_list(i) = Nothingn    Next in    n    'monthly coupon schedulesn    no_of_schedule = 0n    If deal_ticket.monthly_coupon_flag = 1 Thenn        n        '쿠폰 지급일 관리n        With oCmdn        n            .ActiveConnection = adoConn            .CommandType = adCmdTextn            .CommandText = "SELECT to_date(TRTH_CUPN_VLTN_DATE,'YYYYMMDD') TRTH_CUPN_VLTN_DATE FROM BSYS.TBSIMO213L00@GDW WHERE INDV_ISCD = '" + indv_iscd + "' ORDER BY 1 ASC"n            n            oRS.Open .Executen        n        End Withn    n    n        '쿠폰 구간 관리n        With oCmdn        n            .ActiveConnection = adoConn            .CommandType = adCmdTextn            .CommandText = "SELECT SCTN_STA_CTNU, SCTN_FIN_CTNU, BONS_CUPN_STA_SDRT, BONS_CUPN_INRT FROM BSYS.TBSIMO210L00@GDW  WHERE INDV_ISCD = '" + indv_iscd + "' ORDER BY 1 ASC"n            n            oRS2.Open .Executen        n        End Withnn        Do Until oRS.EOFn            n            no_of_schedule = no_of_schedule + 1n            n            ReDim Preserve call_dates(1 To no_of_schedule) As Daten            ReDim Preserve strikes(1 To no_of_schedule) As Doublen            ReDim Preserve coupons(1 To no_of_schedule) As Doublen            n            If deal_ticket.has_eval_shift_ul = True And eval_date_lag = True Thenn                call_dates(no_of_schedule) = oRS("TRTH_CUPN_VLTN_DATE") + 1n            Elsen                call_dates(no_of_schedule) = oRS("TRTH_CUPN_VLTN_DATE")n            End Ifn             n            Do Until oRS2.EOFn                If no_of_schedule >= oRS2("SCTN_STA_CTNU") And no_of_schedule <= oRS2("SCTN_FIN_CTNU") Thenn                    strikes(no_of_schedule) = oRS2("BONS_CUPN_STA_SDRT") / 100n                    coupons(no_of_schedule) = oRS2("BONS_CUPN_INRT") / 100n                    oRS2.MoveNextn                Elsen                    oRS2.MoveNextn                End Ifn            Loopn            oRS2.MoveFirstn            n            oRS.MoveNextn        n        Loopn   n        oRS.Closen        oRS2.Closen        n        If no_of_schedule > 0 Thenn            deal_ticket.monthly_coupon_amount = coupons(no_of_schedule)n            n            '마지막 월지급평가일이 만기일 이후인 경우, 만기일로 강제 조정 2024.02.26n            If call_dates(no_of_schedule) > deal_ticket.maturity_date Thenn                call_dates(no_of_schedule) = deal_ticket.maturity_daten            End Ifn        End Ifn        nn        n        If for_frn_flag = True Or for_eswap_flag = True Thenn            n            '변동금리 스케줄 관리n            With oCmdn            n                .ActiveConnection = adoConn                .CommandType = adCmdTextn                .CommandText = "SELECT nvl(CRCD,'KRW') CRCD, PRVS_INDT_MNRT_CODE, PRVS_DATE, INT_AMT, INDT_MNRT_ADJS_DATE, A.CCLS_MNRT, PRVS_ADTN_MNRT, VLTN_STA_DATE, VLTN_FIN_DATE FROM BSYS.TBSIMO216L00@GDW A, BSYS.TBSIMO201M00@GDW B WHERE A.INDV_ISCD=B.INDV_ISCD AND A.INDV_ISCD = '" + indv_iscd + "' AND RCVN_CLS_CODE='2' ORDER BY PRVS_DATE ASC"n                n                oRS.Open .Executen            n            End Withn            n            Do Until oRS.EOFn                n                Dim daycount As Integern                daycount = 365n                n                If oRS("CRCD") = "USD" Thenn                    daycount = 360n                End Ifn                n                Dim foward_rate As Doublen                Dim add_rate As Doublen                n                no_of_schedule = no_of_schedule + 1n                n                ReDim Preserve call_dates(1 To no_of_schedule) As Daten                ReDim Preserve strikes(1 To no_of_schedule) As Doublen                ReDim Preserve coupons(1 To no_of_schedule) As Doublen                n'                If deal_ticket.has_eval_shift_ul = True And eval_date_lag = True Thenn'                    call_dates(no_of_schedule) = str2date(oRS("PRVS_DATE")) + 1n'                Elsen                    call_dates(no_of_schedule) = str2date(oRS("PRVS_DATE"))n'                End Ifnn                '마지막 floating leg 스케줄이 만기일 이후인 경우, 만기일로 강제 조정 2024.02.26n                If call_dates(no_of_schedule) > deal_ticket.maturity_date Thenn                    call_dates(no_of_schedule) = deal_ticket.maturity_daten                End Ifn                n                strikes(no_of_schedule) = 0n                n                '2024.03.04n                If oRS("CCLS_MNRT") <> 0 Thenn                    If call_dates(no_of_schedule) <= deal_ticket.current_date Thenn                        '비즈원에 계산된 변동금리 CCLS_MNRT 사용: CD/LIBOR는 fixing 값, USD-SOFR는 현재까지 누적 관찰값 (VUS0003M의 경우 CCLS_MNRT는 누적 SOFR에 26.16bp가 더해진 값임)n                        coupons(no_of_schedule) = (oRS("CCLS_MNRT") + oRS("PRVS_ADTN_MNRT")) / 100 * (str2date(oRS("VLTN_FIN_DATE")) - str2date(oRS("VLTN_STA_DATE"))) / daycountn                    ElseIf oRS("CRCD") = "KRW" And (call_dates(max(no_of_schedule - 1, 1)) <= deal_ticket.current_date Or no_of_schedule = 1) Thenn                        '비즈원에 계산된 변동금리 CCLS_MNRT 사용: CD/LIBOR는 fixing 값, USD-SOFR는 현재까지 누적 관찰값 (VUS0003M의 경우 CCLS_MNRT는 누적 SOFR에 26.16bp가 더해진 값임)n                        coupons(no_of_schedule) = (oRS("CCLS_MNRT") + oRS("PRVS_ADTN_MNRT")) / 100 * (str2date(oRS("VLTN_FIN_DATE")) - str2date(oRS("VLTN_STA_DATE"))) / daycountn                    Elsen                        '변동금리 정보 없을 경우, 이전 스케줄 값 사용n                        'coupons(no_of_schedule) = Abs(coupons(no_of_schedule - 1))n                        n                        '변동금리 정보 없을 경우, forward rate 계산n                        'foward_rate = market_set.dcf_by_ccy(oRS("CRCD")).get_fwd_rate(str2date(oRS("VLTN_STA_DATE")), str2date(oRS("VLTN_FIN_DATE")))n                        '2024-03-08 dcf가 credit curve일 수도 있으므로 swap curve로 변경n                        If deal_ticket.ccy = get_dcf_ccy(DCF.KRW) Thenn                            foward_rate = market_set.market_by_ul(get_ua_code(ua.KOSPI200)).rate_curve_.get_fwd_rate(str2date(oRS("VLTN_STA_DATE")), str2date(oRS("VLTN_FIN_DATE")))n                        ElseIf deal_ticket.ccy = get_dcf_ccy(DCF.USD) Thenn                            foward_rate = market_set.market_by_ul(get_ua_code(ua.SPX)).rate_curve_.get_fwd_rate(str2date(oRS("VLTN_STA_DATE")), str2date(oRS("VLTN_FIN_DATE")))n                        End Ifn                        n                        add_rate = oRS("PRVS_ADTN_MNRT") / 100n                        n                        'VUS0003M의 경우, SOFR 보정을 위해 forward에 26.16bp 가산 필요n                        If oRS("PRVS_INDT_MNRT_CODE") = "VUS0003M" Or (oRS("PRVS_INDT_MNRT_CODE") = "LIBORUSD" And oRS("INDT_MNRT_ADJS_DATE") >= "20230701") Thenn                            foward_rate = foward_rate + 0.002616n                        End Ifn                        n                        coupons(no_of_schedule) = (foward_rate + add_rate) * (str2date(oRS("VLTN_FIN_DATE")) - str2date(oRS("VLTN_STA_DATE"))) / daycountn                    End Ifn                Elsen                    '변동금리 정보 없을 경우, 이전 스케줄 값 사용n                    'coupons(no_of_schedule) = Abs(coupons(no_of_schedule - 1))n                    n                    '변동금리 정보 없을 경우, forward rate 계산n                    'foward_rate = market_set.dcf_by_ccy(oRS("CRCD")).get_fwd_rate(str2date(oRS("VLTN_STA_DATE")), str2date(oRS("VLTN_FIN_DATE")))n                    '2024-03-08 dcf가 credit curve일 수도 있으므로 swap curve로 변경n                    If deal_ticket.ccy = get_dcf_ccy(DCF.KRW) Thenn                        foward_rate = market_set.market_by_ul(get_ua_code(ua.KOSPI200)).rate_curve_.get_fwd_rate(str2date(oRS("VLTN_STA_DATE")), str2date(oRS("VLTN_FIN_DATE")))n                    ElseIf deal_ticket.ccy = get_dcf_ccy(DCF.USD) Thenn                        foward_rate = market_set.market_by_ul(get_ua_code(ua.SPX)).rate_curve_.get_fwd_rate(str2date(oRS("VLTN_STA_DATE")), str2date(oRS("VLTN_FIN_DATE")))n                    End Ifn                    n                    add_rate = oRS("PRVS_ADTN_MNRT") / 100n                    n                    'VUS0003M의 경우, SOFR 보정을 위해 forward에 26.16bp 가산 필요n                    If oRS("PRVS_INDT_MNRT_CODE") = "VUS0003M" Or (oRS("PRVS_INDT_MNRT_CODE") = "LIBORUSD" And oRS("INDT_MNRT_ADJS_DATE") >= "20230701") Thenn                        foward_rate = foward_rate + 0.002616n                    End Ifn                    n                    coupons(no_of_schedule) = (foward_rate + add_rate) * (str2date(oRS("VLTN_FIN_DATE")) - str2date(oRS("VLTN_STA_DATE"))) / daycountn                End Ifn            n                If for_eswap_flag = True Thenn                    coupons(no_of_schedule) = -1 * coupons(no_of_schedule)n                End Ifn                n                oRS.MoveNextn                n               n                n                n            Loopn       n            oRS.Closen            n'''''''''nn            If no_of_schedule > 0 Thenn           '마지막 floating leg 스케줄 ~ 만기일 사이에 스케줄이 비어 있을 경우, 스케줄 강제 입력 2024.03.04n            Do While deal_ticket.maturity_date - call_dates(no_of_schedule) >= 90n                no_of_schedule = no_of_schedule + 1n                n                ReDim Preserve call_dates(1 To no_of_schedule) As Daten                ReDim Preserve strikes(1 To no_of_schedule) As Doublen                ReDim Preserve coupons(1 To no_of_schedule) As Doublen                n                call_dates(no_of_schedule) = call_dates(no_of_schedule - 1) + 90n                strikes(no_of_schedule) = 0n                n                foward_rate = market_set.dcf_by_ccy(deal_ticket.ccy).get_fwd_rate(call_dates(no_of_schedule - 1), call_dates(no_of_schedule))n                coupons(no_of_schedule) = (foward_rate + add_rate) * 90 / daycountn                n                If for_eswap_flag = True Thenn                    coupons(no_of_schedule) = -1 * coupons(no_of_schedule)n                End Ifnn            Loopn            n            '/<----- 2024.02.07n            Dim inx_target As Integern            Dim inx_shift As Integern            n            Dim date_target As Daten            Dim coupon_target As Doublen            Dim strike_target As Doublen            n            For inx = 2 To no_of_schedulen            n                'recursive functionn                'input: call_dates(inx)n                'array: result(1~inx-1)n                'output: result(1~inx) -> redim result() as datenn                n                'sort_dates(result, call_dates(inx))n            n                'search indexn                inx_target = search_inx(call_dates, call_dates(inx))n                n                If inx_target > 0 And inx_target < inx + 1 Thenn                'sorting by call_datesn                n                    'tempn                    date_target = call_dates(inx)n                    coupon_target = coupons(inx)n                    strike_target = strikes(inx)n                n                    'shiftn                    For inx_shift = inx - 1 To inx_target Step -1n                        call_dates(inx_shift + 1) = call_dates(inx_shift)n                        coupons(inx_shift + 1) = coupons(inx_shift)n                        strikes(inx_shift + 1) = strikes(inx_shift)n                    Next inx_shiftn                    n                    'insertn                    call_dates(inx_target) = date_targetn                    coupons(inx_target) = coupon_targetn                    strikes(inx_target) = strike_targetn               n                End Ifn                n            Next inxn            '----->/n            n            '2024.03.07 조기상환결정일 이후에 equity swap의 floating leg 결제일이 발생항 경우, 해당 현금흐름이 누락됨을 방지n            For inx = 1 To deal_ticket.no_of_schedulen            n                For jnx = 1 To no_of_schedulen                n                    If call_dates(jnx) > deal_ticket.autocall_schedules(inx).call_date And call_dates(jnx) - deal_ticket.autocall_schedules(inx).call_date < 10 Thenn                        call_dates(jnx) = deal_ticket.autocall_schedules(inx).call_daten                        Exit Forn                    End Ifn                    n                Next jnxn            n            Next inxn            '----->/n            n            If deal_ticket.monthly_coupon_amount = 0 Thenn            'If no_of_schedule > 0 And deal_ticket.monthly_coupon_amount = 0 Thenn                deal_ticket.monthly_coupon_amount = coupons(no_of_schedule)n            End Ifn            End Ifn                n                '''''''''n            n        End Ifn        n    End Ifn    n    deal_ticket.set_coupon_schedule no_of_schedule, call_dates, strikes, couponsn    n    '상환결정일2n    'early-exit schedules: 현재까지 최대 5개 구조 발행n    'five-wins: 6회 x 연속 5일간 기회 부여 = 30개 구조 발행n    'hi-five: double strike 구조로 2nd strike 충족시 추가 쿠폰 지급. 6개 구조 발행n    no_of_schedule = 0n    If deal_ticket.early_exit_flag = 1 Thenn        n        With oCmdn        n            .ActiveConnection = adoConn            .CommandType = adCmdTextn            .CommandText = "SELECT INDV_ISCD, CLRD_DTRM_DATE, CALC_STA_DATE, CALC_FIN_DATE, CLRD_BARR_HIT_YN, CLRD_BARR_VAL, CLRD_INRT FROM BSYS.TBSIMO227L00@GDW WHERE INDV_ISCD = '" + indv_iscd + "' ORDER BY SEQ_SRNO"n            n            oRS.Open .Executen        n        End Withnn        Do Until oRS.EOFn            n            no_of_schedule = no_of_schedule + 1n            deal_ticket.redim_early_exit_barrier no_of_schedulen        n            ReDim Preserve call_dates(1 To no_of_schedule) As Daten            ReDim Preserve coupons(1 To no_of_schedule) As Doublen            ReDim Preserve strike_shifts(1 To no_of_schedule) As Doublen            ReDim Preserve early_exit_touched_flags(1 To no_of_schedule) As Long  'data type 변경: dll(2018.7.17)n            ReDim Preserve early_exit_performance_types(1 To no_of_schedule) As Long  'dll(2018.8.8)n            ReDim Preserve early_exit_barrier_types(1 To no_of_schedule) As Long  'dll(2018.8.8)n            n            n            If str2date(oRS("CALC_STA_DATE")) <> deal_ticket.settlement_date Thenn                deal_ticket.comment = deal_ticket.comment + "early-exit 관찰시작일(CALC_STA_DATE)이 발행일과 일치하지 않음"n            End Ifn            n            If deal_ticket.has_eval_shift_ul = True And eval_date_lag = True Thenn                call_dates(no_of_schedule) = str2date(oRS("CALC_FIN_DATE")) + 1n            Elsen                call_dates(no_of_schedule) = str2date(oRS("CALC_FIN_DATE"))n            End Ifn            n            If for_eswap_flag = True Thenn                coupons(no_of_schedule) = oRS("CLRD_INRT") / 100 - 1n            Elsen                coupons(no_of_schedule) = oRS("CLRD_INRT") / 100n            End Ifn            n            strike_shifts(no_of_schedule) = 0n            n            For no_of_ul = 1 To deal_ticket.no_of_uln                deal_ticket.set_early_exit_barrier oRS("CLRD_BARR_VAL") / 100, deal_ticket.no_of_ul * (no_of_schedule - 1) + no_of_uln            Next no_of_uln            n            If oRS("CLRD_BARR_HIT_YN") = "Y" Thenn                early_exit_touched_flags(no_of_schedule) = 1#n            Elsen                early_exit_touched_flags(no_of_schedule) = 0#n            End Ifnn            'Front dbn            early_exit_performance_types(no_of_schedule) = -1  'dll(2018.8.8)n            early_exit_barrier_types(no_of_schedule) = -1  'dll(2018.8.8)n            n            oRS.MoveNextn        n        Loopn   n        oRS.Closenn    End Ifn        n    deal_ticket.set_early_exit_schedule no_of_schedule, call_dates, coupons, strike_shifts, early_exit_touched_flags, early_exit_performance_types, early_exit_barrier_typesn    n    Set get_ac_deal_ticket = deal_ticketn    n    Set deal_ticket = Nothingn    n    Exit FunctionnnErrorHandler:nn    raise_err "get_ac_deal_ticket", Err.descriptionnnEnd Functionnn'2024.02.07nPrivate Function search_inx(schedules() As Date, target_date As Date) As Integernn    Dim rtn As Integern    Dim i As Integern    n    For i = 1 To UBound(schedules)n        n        If CLng(schedules(i)) > CLng(target_date) Or CLng(schedules(i)) = 0 Thenn            rtn = in            Exit Forn        End Ifn        n    Next in    n    search_inx = rtnnnEnd Functionnn'당일 기초자산 가격 반영여부 검증 (미완성)nPublic Sub check_barrier_hit(ac_deal_ticket, market_set)n    n    Dim ua_eval_spot As Doublen    Dim ua_spot As Doublen    n    '당일 KI HIT 검증 -> deal_ticket 대사n    If deal_ticket.ki_barrier_flag = 1 Thenn        For i = 1 To deal_ticket.no_of_uln            n            ua_spot = get_spot(deal_ticket.ul_code(i), target_date, adoCon) / deal_ticket.reference_price(i)n            n            If i = 1 Thenn                ua_eval_spot = ua_spotn            End Ifn        n            Select Case deal_ticket.ki_performance_typen            Case -1: ua_eval_spot = min(ua_eval_spot, ua_spot) 'worstn            Case 0: ua_eval_spot = ua_eval_spot + ua_spot / deal_ticket.no_of_ul 'avgn            Case 1: ua_eval_spot = max(ua_eval_spot, ua_spot) 'bestn            End Selectn            n        Next in        n        For i = 1 To deal_ticket.no_of_uln            If deal_ticket.ki_barrier(i) >= ua_eval_spot And deal_ticket.ki_touched_flag = 0 Thenn               Err.description = "당일 KI 터치하였으나, 원장(BARR_HIT_CLS_CODE) 반영되지 않음."n               Exit Forn            End Ifn        Next in    End Ifn    n    '당일 EE HIT 검증 -> deal_ticket 대사n    If deal_ticket.early_exit_flag = 1 Thenn        n        '현재 스케줄 j 찾기n    n        For i = 1 To deal_ticket.no_of_uln            n            ua_spot = get_spot(deal_ticket.ul_code(i), target_date, adoCon) / deal_ticket.reference_price(i)n            n            If i = 1 Thenn                ua_eval_spot = ua_spotn            End Ifn        n            Select Case deal_ticket.early_exit_barrier_types(j)n            Case -1: ua_eval_spot = min(ua_eval_spot, ua_spot) 'worstn            Case 0: ua_eval_spot = ua_eval_spot + ua_spot / deal_ticket.no_of_ul 'avgn            Case 1: ua_eval_spot = max(ua_eval_spot, ua_spot) 'bestn            End Selectn            n        Next in        n        If deal_ticket.early_exit_barrier(j) >= ua_eval_spot And deal_ticket.early_exit_touched_flags(j) = 0 Thenn           Err.description = "당일 EE 터치하였으나, 원장(CLRD_BARR_HIT_YN) 반영되지 않음."n        End Ifn        n    End Ifn    n    '당일 AC 검증n    For j = 1 To deal_ticket.no_of_schedulen        n        If target_date = deal_ticket.autocall_schedules(j).call_date Thenn        n            For i = 1 To deal_ticket.no_of_uln            n                ua_spot = get_spot(deal_ticket.ul_code(i), target_date, adoCon) / deal_ticket.reference_price(i)n                n                If i = 1 Then ua_eval_spot = ua_spotn                End Ifn            n                Select Case deal_ticket.autocall_schedules(j).performance_typen                Case -1: ua_eval_spot = min(ua_eval_spot, ua_spot) 'worstn                Case 0: ua_eval_spot = ua_eval_spot + ua_spot / deal_ticket.no_of_ul 'avgn                Case 1: ua_eval_spot = max(ua_eval_spot, ua_spot) 'bestn                End Selectn            n            Next in            n            If deal_ticket.early_exit_flag = 1 Thenn            End Ifn        n            If deal_ticket.autocall_schedules(j).strike_value < ua_eval_spot Thenn               '조기상환 성공n            '   당일 월지급 쿠폰 검증n            '   당일 EE 쿠폰 검증 -> 상환실패시, 상환일정 및 만기일에 적용된 eval_shift 취소n            ElseIf target_date = deal_ticket.maturity_date Thenn                If deal_ticket.ki_touched_flag = 0 Thenn                    '만기상환: dummay 지급n                Elsen                    '만기상환: 원금손실n                End Ifn            Elsen                '조기상환 이연n                '상환일정 및 만기일에 적용된 eval_shift 취소n                n            End Ifn        n        End Ifn        n    Next jn    nEnd Subn            nnPrivate Function get_dummy(indv_iscd As String, ki_barrier As Double, adoCon As adoDB.Connection) As Doublenn    Dim rtn As Doublen    rtn = 0n    n    Dim oCmd As New adoDB.Commandn    Dim oRS As New adoDB.Recordsetn    n    Dim bind_variable() As Stringn    Dim bind_value() As Variantn    n    'KI 미발생시 만기상환 조건n    ReDim bind_variable(1) As Stringn    ReDim bind_value(1) As Variantn    bind_variable(1) = ":indv_iscd"n    bind_value(1) = indv_iscdn    n    With oCmdnn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = getSQL(SQL_PATH_AC_DEAL_DUMMY, bind_variable, bind_value)nn        oRS.Open .Executenn    End Withn    n    Dim prev_sdpr_loeq As Doublen        n    Do Until oRS.EOFn        n        If oRS("SRNO") = 1 Thenn            prev_sdpr_loeq = oRS("SDPR_LOEQ_RATE")n        End Ifn        n        '구간 연속 확인n        If oRS("SDPR_LOEQ_RATE") = prev_sdpr_loeq And oRS("SDPR_EXCS_RATE") > prev_sdpr_loeq Thenn        n            n            '참여율 = 100%, 상수 = 0%n            If oRS("SDPR_LOEQ_RATE") = 0 And oRS("INVL_RATE") = 100 And oRS("MTRT_ERT") = 0 Thenn                n                '만기상환조건과 정합성 검증. 하단에서 마지막 ac barrier 확인n                If oRS("SDPR_EXCS_RATE") / 100 <> ki_barrier Thenn                    Err.description = "만기상환조건 구간(SDPR_EXCS_RATE)과 메인 화면의 KI barrier(BARR_VAL1) 불일치"n                End Ifn            n            '참여율 = 0%n            ElseIf oRS("SDPR_LOEQ_RATE") > 0 And oRS("SDPR_EXCS_RATE") >= 999 And oRS("INVL_RATE") = 0 Thenn                            n                '상수n                rtn = oRS("MTRT_ERT") / 100n                Exit Don            n            End Ifn            n            prev_sdpr_loeq = oRS("SDPR_EXCS_RATE")n                    n        Elsen            Err.description = "만기수익율 구간(SDPR_LOEQ_RATE,SDPR_EXCS_RATE)이 연속하지 않음"n        End Ifn        n        oRS.MoveNextnn    Loopnn    oRS.Closen    n    get_dummy = rtnnnEnd FunctionnnnPublic Sub insert_price(tdate As String, code As String, price_theo As Double, price_mtm As Double, adoCon As adoDB.Connection)n    n    Dim sql As Stringn        n    sql = "delete from ras.rm_pricing_data@rms01 where tdate = '" + tdate + "' and code = '" + code + "' "n    n    adoCon.Execute (sql)n    n    sql = "insert into ras.rm_pricing_data@rms01 values ('" + tdate + "','" + code + "', " & price_theo & ", " & price_mtm & ", SYSDATE, 'EXCEL') "n    n    adoCon.Execute (sql)nnnEnd Subn        nnPublic Sub insert_greeks(greeks As clsGreeks, deal_ticket As clsACDealTicket, market_set As clsMarketSet, adoCon As adoDB.Connection)nn    Dim sql As Stringn    n    Dim tdate As Stringn    tdate = date2str(deal_ticket.current_date)n            n    Dim fx As Doublen    If deal_ticket.ccy = get_ccy_code(ccy.KRW) Thenn        fx = 1n    Elsen        fx = get_fx(get_ccy_code(ccy.KRW), deal_ticket.ccy, deal_ticket.current_date, adoCon)n    End Ifn    n    Dim baseasset_code As Stringn    n    Dim delta As Doublen    Dim gamma As Doublen    Dim vega As Doublen    Dim theta As Doublen    n    Dim delta_expsorue As Doublen    Dim gamma_exposure As Doublen    Dim vega_exposure As Doublen    n    Dim tau As Doublen    Dim dur_els As Doublen    Dim close_spot As Doublen    Dim wp As Doublen    wp = MAX_UA_PCT_PRICEn    n    'dur_els =n    n    Call delete_dv01(tdate, deal_ticket.asset_code, adoCon)n    n    Dim j As Integern    For j = 1 To deal_ticket.no_of_uln        n        If deal_ticket.value_date = deal_ticket.current_date And is_eval_shift_ua(deal_ticket.ul_code(j)) = True Thenn            '최초기준가설정일 기초자산이 확정되지 않은 경우 skip: delta를 잡지 않았다고 간주하고 greeks 집계하지 않음(원칙은 집계해야함)n        Elsen            baseasset_code = get_ua_code(get_ua_idx(deal_ticket.ul_code(j)), UA_CODE_TYPE.ISIN)n        n            close_spot = market_set.market_by_ul(deal_ticket.ul_code(j)).s_n            n            delta = (greeks.deltas(j) * 0.75 + greeks.sticky_moneyness_deltas(j) * 0.25) * fx / deal_ticket.qtyn            gamma = greeks.gammas(j) * fx / deal_ticket.qtyn            vega = greeks.vegas(j) * fx / deal_ticket.qtyn            n            delta_expsorue = deal_ticket.qty * delta * close_spotn            gamma_exposure = 0.5 * deal_ticket.qty * gamma * (close_spot * 0.01) ^ 2n            vega_exposure = deal_ticket.qty * vegan            n            If j = 1 Thenn                theta = greeks.theta / 365 * fx / deal_ticket.qty '1dayn            Elsen                theta = 0n            End Ifn                        n            '----- rcs.pml_greek -----n            sql = "delete from rcs.pml_greek@rms01 where tdate = '" + tdate + "' and stk_code = '" + deal_ticket.asset_code + "' and baseasset_code = '" + baseasset_code + "'"nn            adoCon.Execute (sql)nn            sql = "insert into rcs.pml_greek@rms01 values ('" & tdate & "','" & deal_ticket.fund_code_c & "','" & deal_ticket.asset_code & "','" & baseasset_code & "','파생결합증권'," & close_spot & "," & delta & "," & gamma & "," & vega & "," & delta_expsorue & "," & gamma_exposure & "," & vega_exposure & ",SYSDATE,'EXCEL','EXCEL',null,null,null,null,null,null,null," & theta & ",'351',null)"nn            adoCon.Execute (sql)nn            ' 향후, oracle precedure로 수행 검토 필요: rcs.pml_greek -> ras.if_otc_template_factor, ras.if_otc_template_datan            '----- ras.if_otc_template_factor -----n            sql = "delete from ras.if_otc_template_factor where tdate = '" + tdate + "' and code = '" + deal_ticket.asset_code + "' and factorid = '" + baseasset_code + "'"nn            adoCon.Execute (sql)nn            sql = "insert into ras.if_otc_template_factor values ('" & tdate & "','" & deal_ticket.asset_code & "','" & baseasset_code & "'," & close_spot & "," & delta & "," & gamma & ",0,SYSDATE,'EXCEL','EXCEL')"nn            adoCon.Execute (sql)nn            '----- ras.if_otc_template_data -----n            sql = "delete from ras.if_otc_template_data where tdate = '" + tdate + "' and code = '" + deal_ticket.asset_code + "'"nn            adoCon.Execute (sql)nn            sql = "insert into ras.if_otc_template_data (tdate, code, endprice) values ('" & tdate & "','" & deal_ticket.asset_code & "'," & greeks.value / deal_ticket.notional * deal_ticket.unit_notional & ")"nn            adoCon.Execute (sql)n            n            'RM StickyMoneyness델타: greeks.sticky_moneyness_deltas(j) * fxn            n            'RM 바나: greeks.vannas(j) * fxn            n            'RM 스큐: greeks.skew_s_s(j) * fxn    n            'RM 로(기초자산통화커브): greeks.rho_ul(j) * fxn            n            'tau 추정식의 분자/분모가 너무 작은 경우, 0으로 강제 조정n            If (Abs(greeks.rho_ul(j) * 10000) < 1) Or (Abs(greeks.deltas(j)) < 1) Then '0으로 강제 조정되는 종목이 너무 많음. tau의 분자와 동일하게 *10000 추가 2024.06.20n                tau = 0n            Elsen                tau = greeks.rho_ul(j) / (greeks.deltas(j) * greeks.ul_prices(j)) * 10000n                n                'lower bound = 2주n                If tau < 1 / 24 Thenn                    tau = 1 / 24n                End Ifn                'upper bound = 잔존만기 2024.06.26n                If tau > (deal_ticket.maturity_date - deal_ticket.current_date) / 365 Thenn                    tau = (deal_ticket.maturity_date - deal_ticket.current_date) / 365n                End Ifn            End Ifn            n            '기초자산 통화 DV01 입력n            Call insert_dv01(tdate, deal_ticket.asset_code, market_set.market_by_ul(deal_ticket.ul_code(j)).ul_currency, tau, greeks.rho_ul(j) * fx, adoCon)n                        n            'ELS duration: wp의 greeks로 추정. 이전에는 max tau로 추정했으나 max값이 기초자산 wp가 아닌 경우가 발생하여 로직 수정.n            If close_spot / deal_ticket.reference_price(j) < wp Thenn                dur_els = taun            End Ifn        n        End Ifnn    Next jn    n    'RM 로(할인커브): 명목금액 통화 DV01 입력n    Call insert_dv01(tdate, deal_ticket.asset_code, deal_ticket.ccy, dur_els, greeks.rho * fx, adoCon)n    n    'CrossGamman'        If deal_ticket.no_of_ul > 1 Thenn'            shtELS.Range("close_xgamma_col").Cells(i + 9, calc_xgamma_ofs(deal_ticket.ul_code(1), deal_ticket.ul_code(2))) = greeks.cross_gamma12 * fxn'            If deal_ticket.no_of_ul = 3 Thenn'                shtELS.Range("close_xgamma_col").Cells(i + 9, calc_xgamma_ofs(deal_ticket.ul_code(1), deal_ticket.ul_code(3))) = greeks.cross_gamma13 * fxn'                shtELS.Range("close_xgamma_col").Cells(i + 9, calc_xgamma_ofs(deal_ticket.ul_code(2), deal_ticket.ul_code(3))) = greeks.cross_gamma23 * fxn'            End Ifn'        End IfnnEnd SubnnPublic Sub insert_scenario_result(greeks As clsGreeks, deal_ticket As clsACDealTicket, market_set As clsMarketSet, adoCon As adoDB.Connection, scenario_id As String)nn    Dim oCmd As New adoDB.Commandn    Dim oRS As New adoDB.Recordsetn    n    Dim sql As Stringn    n    Dim tdate As Stringn    tdate = date2str(deal_ticket.current_date)n    n    Dim fx0 As Doublen    Dim fx As Doublen    If deal_ticket.ccy = get_ccy_code(ccy.KRW) Thenn        fx0 = 1n        fx = 1n    Elsen        fx0 = get_fx(get_ccy_code(ccy.KRW), deal_ticket.ccy, deal_ticket.current_date, adoCon)n        fx = get_fx(get_ccy_code(ccy.KRW), deal_ticket.ccy, deal_ticket.current_date, adoCon, scenario_id)n    End Ifn    n    Dim baseasset_code As Stringn    n    Dim delta As Doublen    Dim gamma As Doublen    Dim vega As Doublen    Dim theta As Doublen    n    Dim delta_exposure As Doublen    Dim gamma_exposure As Doublen    Dim vega_exposure As Doublen    n    Dim close_spot As Doublenn    Dim gds_tp As Stringn    gds_tp = "파생결합증권"n    n    sql = "delete from rcs.pml_position_st where tdate = '" + tdate + "' and stk_code = '" + deal_ticket.asset_code + "' and scenarioid = '" + scenario_id + "'"n    n    adoCon.Execute (sql)n    n    sql = "delete from rcs.pml_greek_st where tdate = '" + tdate + "' and stk_code = '" + deal_ticket.asset_code + "' and scenarioid = '" + scenario_id + "'"n    n    adoCon.Execute (sql)n    n    sql = "delete from rms.mr_scenario_detail_data where tdate = '" + tdate + "' and code = '" + deal_ticket.asset_code + "' and scenarioid = '" + scenario_id + "'"n    n    adoCon.Execute (sql)nn    Dim j As Integern    For j = 1 To deal_ticket.no_of_uln        n        If deal_ticket.value_date = deal_ticket.current_date And is_eval_shift_ua(deal_ticket.ul_code(j)) = True Thenn            '최초기준가설정일 기초자산이 확정되지 않은 경우 skip: delta를 잡지 않았다고 간주하고 greeks 집계하지 않음(원칙은 집계해야함)n        Elsen            baseasset_code = get_ua_code(get_ua_idx(deal_ticket.ul_code(j)), UA_CODE_TYPE.ISIN)n        n            close_spot = market_set.market_by_ul(deal_ticket.ul_code(j)).s_n            n            delta = (greeks.deltas(j) * 0.75 + greeks.sticky_moneyness_deltas(j) * 0.25) * fx / deal_ticket.qtyn            gamma = greeks.gammas(j) * fx / deal_ticket.qtyn            vega = greeks.vegas(j) * fx / deal_ticket.qtyn            n            delta_exposure = deal_ticket.qty * delta * close_spotn            gamma_exposure = 0.5 * deal_ticket.qty * gamma * (close_spot * 0.01) ^ 2n            vega_exposure = deal_ticket.qty * vegan            n            If j = 1 Thenn                theta = greeks.theta / 365 * fx / deal_ticket.qty '1dayn            Elsen                theta = 0n            End Ifn                        n            '----- rcs.pml_greek -----n'            sql = "delete from rcs.pml_greek_st@rms01 where tdate = '" + tdate + "' and stk_code = '" + deal_ticket.asset_code + "' and baseasset_code = '" + baseasset_code + "'"n'n'            adoCon.Execute (sql)nn'            sql = "insert into rcs.pml_greek_st@rms01 values ('" & tdate & "','" & deal_ticket.fund_code_c & "','" & deal_ticket.asset_code & "','" & baseasset_code & "','파생결합증권'," & close_spot & "," & delta & "," & gamma & "," & vega & "," & delta_exposure & "," & gamma_exposure & "," & vega_exposure & ",SYSDATE,'EXCEL','EXCEL',null,null,null,null,null,null,null," & theta & ",'351',null)"n            sql = "insert into rcs.pml_greek_st (tdate, scenarioid, fund_code, stk_code, baseasset_code, gds_tp, close_amt, " _n                & " delta, gamma, vega, delta_exposure, gamma_exposure, vega_exposure, work_time, work_trm, work_memb, dept_code) values (" _n                & "'" + tdate + "','" + scenario_id + "','" + deal_ticket.fund_code_c + "','" + deal_ticket.asset_code + "','" + baseasset_code + "', " _n                & "'" + gds_tp + "', " & close_spot & "," & delta & "," & gamma & "," & vega & "," & delta_exposure & ", " & gamma_exposure & "," & vega_exposure & ",SYSDATE, 'EXCEL','EXCEL','351') "n                    n            adoCon.Execute (sql)nnn        n        End Ifnn    Next jnn    Dim unitPrice As Doublen    Dim unitPrice0 As Doublen    n    unitPrice = Round(greeks.value / deal_ticket.notional * deal_ticket.unit_notional, 5)nn    sql = "insert into rcs.pml_position_st (tdate, scenarioid, fund_code, stk_code, gds_tp, book_qty, " _n        & " work_time, work_trm, work_memb, pure_unit_price, pure_evlt_amt) values (" _n        & "'" + tdate + "','" + scenario_id + "','" + deal_ticket.fund_code_c + "','" + deal_ticket.asset_code + "'," _n        & "'" + gds_tp + "'," & deal_ticket.qty & ",SYSDATE, 'EXCEL','EXCEL', " & unitPrice & ", " & unitPrice * deal_ticket.qty & ") "n    n    adoCon.Execute (sql)n    n    sql = "select theory_price from ras.rm_pricing_data where tdate='" + tdate + "' and code='" + deal_ticket.asset_code + "'" '2024.06.26 rm_els_data -> rm_pricing_data, rm_els_info 삭제n    n    With oCmdn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = sqln        oRS.Open .Executen    End Withn    n    Do Until oRS.EOFn        unitPrice0 = oRS(0)n        oRS.MoveNextn    Loopn    oRS.Closen    n    sql = "insert into rms.mr_scenario_detail_data (tdate, portfolio_id, scenarioid, code, asset_type, modul_type, fund_cd, qty, assetstartprice, assetendprice, assetscenariopl, currency)" _n        & " values ('" + tdate + "','351','" + scenario_id + "','" + deal_ticket.asset_code + "','" + gds_tp + "','EXCEL','" + deal_ticket.fund_code_c + "'," & deal_ticket.qty & ", " _n        & "" & unitPrice0 & ", " & unitPrice & "," & (unitPrice * fx - unitPrice0 * fx0) * deal_ticket.qty & ",'" + deal_ticket.ccy + "') "n        n    adoCon.Execute (sql)n    n    nEnd SubnnnPublic Sub delete_dv01(tdate As String, els_t_code As String, adoCon As adoDB.Connection)nn    Dim sql As Stringn    sql = "delete from rcs.pml_dv01@rms01 where tdate = '" + tdate + "' and code = '" + els_t_code + "' "nn    adoCon.Execute (sql)nnEnd SubnnPublic Sub insert_dv01(tdate As String, els_t_code As String, ccy As String, t As Double, dv01_tmp As Double, adoCon As adoDB.Connection)n    n    Dim oCmd As New adoDB.Commandn    Dim oRS As New adoDB.Recordsetn    n    Dim sql As Stringn    Dim sub_sql As Stringn    Dim insert_sql As Stringn    Dim update_sql As Stringn    n    Dim dv01 As Doublen    Dim bcktDV01(14) As Doublen    Dim bcktDV01_tmp(14) As Doublen        n    Call map_bcktDV01(t, dv01_tmp, bcktDV01_tmp)n    n    'Selectn    sql = "select dv01, BCKT_DV01_3M, BCKT_DV01_6M, BCKT_DV01_9M, BCKT_DV01_1Y, BCKT_DV01_18M, BCKT_DV01_2Y, BCKT_DV01_3Y, BCKT_DV01_4Y, BCKT_DV01_5Y, BCKT_DV01_7Y, BCKT_DV01_10Y, BCKT_DV01_12Y, BCKT_DV01_15Y, BCKT_DV01_20Y from rcs.pml_dv01@rms01 where tdate = '" + tdate + "' and code = '" + els_t_code + "' and currency = '" + ccy + "'"n    n    With oCmdnn        .ActiveConnection = adoConn        .CommandType = adCmdTextn        .CommandText = sqlnn        oRS.Open .Executenn    End Withn    n    '같은 통화 값이 이미 있는 경우, DV01과 bcktDV01에 읽어온 후 dv01_tmp와 bcktDV01_tmp를 누적n    Dim i As Integern    n    Do Until oRS.EOFn        dv01 = dv01 + oRS(0)n        For i = 1 To 14n            bcktDV01(i - 1) = bcktDV01(i - 1) + oRS(i)n        Next inn        oRS.MoveNextn    Loopn    n    dv01 = dv01 + dv01_tmpn    Call acc_bcktDV01(bcktDV01, bcktDV01_tmp)n    n    'Mergen    update_sql = "UPDATE SET DURATION=" & t & ", DV01=" & dv01 & ", BCKT_DV01_3M=" & bcktDV01(0) & ", BCKT_DV01_6M=" & bcktDV01(1) & ", BCKT_DV01_9M=" & bcktDV01(2) & ", BCKT_DV01_1Y=" & bcktDV01(3) & ", BCKT_DV01_18M=" & bcktDV01(4) & ", BCKT_DV01_2Y=" & bcktDV01(5) & ", BCKT_DV01_3Y=" & bcktDV01(6) & ", BCKT_DV01_4Y=" & bcktDV01(7) & ", BCKT_DV01_5Y=" & bcktDV01(8) & ", BCKT_DV01_7Y=" & bcktDV01(9) & ", BCKT_DV01_10Y=" & bcktDV01(10) & ", BCKT_DV01_12Y=" & bcktDV01(11) & ", BCKT_DV01_15Y=" & bcktDV01(12) & ", BCKT_DV01_20Y=" & bcktDV01(13)n    'update_sql = "UPDATE SET DV01=?, BCKT_DV01_3M=?, BCKT_DV01_6M=?, BCKT_DV01_9M=?, BCKT_DV01_1Y=?, BCKT_DV01_18M=?, BCKT_DV01_2Y=?, BCKT_DV01_3Y=?, BCKT_DV01_4Y=?, BCKT_DV01_5Y=?, BCKT_DV01_7Y=?, BCKT_DV01_10Y=?, BCKT_DV01_12Y=?, BCKT_DV01_15Y=?, BCKT_DV01_20Y=?"n    n    insert_sql = "INSERT (TDATE, CODE, DEPTCODE, GDS_TP, NAME, DURATION, POSITION, DV01, WORK_TIME, WORK_TRM, WORK_MEMB, CURRENCY, FUNDCODE, NOTIONAL, BCKT_DV01_3M, BCKT_DV01_6M, BCKT_DV01_9M, BCKT_DV01_1Y, BCKT_DV01_18M, BCKT_DV01_2Y, BCKT_DV01_3Y, BCKT_DV01_4Y, BCKT_DV01_5Y, BCKT_DV01_7Y, BCKT_DV01_10Y, BCKT_DV01_12Y, BCKT_DV01_15Y, BCKT_DV01_20Y) " _n                  + " VALUES (b.TDATE, b.CODE, b.DEPTCODE, b.GDS_TP, b.NAME, b.DURATION, b.POSITION, b.DV01, b.WORK_TIME, b.WORK_TRM, b.WORK_MEMB, b.CURRENCY, b.FUNDCODE, b.NOTIONAL, b.BCKT_DV01_3M, b.BCKT_DV01_6M, b.BCKT_DV01_9M, b.BCKT_DV01_1Y, b.BCKT_DV01_18M, b.BCKT_DV01_2Y, b.BCKT_DV01_3Y, b.BCKT_DV01_4Y, b.BCKT_DV01_5Y, b.BCKT_DV01_7Y, b.BCKT_DV01_10Y, b.BCKT_DV01_12Y, b.BCKT_DV01_15Y, b.BCKT_DV01_20Y)"n    n'    sub_sql = "SELECT C.STND_DATE TDATE, A.ISCD CODE, ? DEPTCODE, ? GDS_TP, A.KOR_ISNM NAME, ? DURATION, C.RMND_QTY POSITION, ? DV01, SYSDATE WORK_TIME, null WORK_TRM, null WORK_MEMB, " _n'        & "           ? CURRENCY, B.PROD_FNCD FUNDCODE, D.REAL_PBLC_FCAM*C.RMND_QTY NOTIONAL, ? BCKT_DV01_3M,? BCKT_DV01_6M,? BCKT_DV01_9M,? BCKT_DV01_1Y,? BCKT_DV01_18M,? BCKT_DV01_2Y,? BCKT_DV01_3Y,? BCKT_DV01_4Y,? BCKT_DV01_5Y,? BCKT_DV01_7Y,? BCKT_DV01_10Y,? BCKT_DV01_12Y,? BCKT_DV01_15Y,? BCKT_DV01_20Y " _n'        & "     FROM   BSYS.TBSIMM100M00@GDW A," _n'        & "            BSYS.TBSIMO201M00@GDW B," _n'        & "            BSYS.TBFNOM021L00@GDW C," _n'        & "            BSYS.TBSIMO100M00@GDW D " _n'        & "    WHERE  A.ISCD='" + els_t_code + "' " _n'        & "    AND    A.ISCD=B.INDV_ISCD " _n'        & "    AND    A.ISCD=C.ISCD " _n'        & "    AND    C.STND_DATE='" + tdate + "' " _n'        & "    AND    B.OTC_FUND_ISCD=D.OTC_FUND_ISCD "n    sub_sql = "SELECT C.STND_DATE TDATE, A.ISCD CODE, '351' DEPTCODE, DECODE(B.PROD_CLS_CODE,'04','EquitySwap','09','ELN',B.PROD_CLS_CODE) GDS_TP, A.KOR_ISNM NAME, " & t & " DURATION, C.RMND_QTY POSITION, " & dv01 & " DV01, SYSDATE WORK_TIME, 'EXCEL' WORK_TRM, 'EXCEL' WORK_MEMB, " _n        & "           '" + ccy + "' CURRENCY, B.PROD_FNCD FUNDCODE, D.REAL_PBLC_FCAM*C.RMND_QTY NOTIONAL, " & bcktDV01(0) & " BCKT_DV01_3M," & bcktDV01(1) & " BCKT_DV01_6M," & bcktDV01(2) & " BCKT_DV01_9M," & bcktDV01(3) & " BCKT_DV01_1Y," & bcktDV01(4) & " BCKT_DV01_18M," & bcktDV01(5) & " BCKT_DV01_2Y," & bcktDV01(6) & " BCKT_DV01_3Y," & bcktDV01(7) & " BCKT_DV01_4Y," & bcktDV01(8) & " BCKT_DV01_5Y," & bcktDV01(9) & " BCKT_DV01_7Y," & bcktDV01(10) & " BCKT_DV01_10Y," & bcktDV01(11) & " BCKT_DV01_12Y," & bcktDV01(12) & " BCKT_DV01_15Y," & bcktDV01(13) & " BCKT_DV01_20Y " _n        & "     FROM   BSYS.TBSIMM100M00@GDW A," _n        & "            BSYS.TBSIMO201M00@GDW B," _n        & "            BSYS.TBFNOM021L00@GDW C," _n        & "            BSYS.TBSIMO100M00@GDW D " _n        & "    WHERE  A.ISCD='" + els_t_code + "' " _n        & "    AND    A.ISCD=B.INDV_ISCD " _n        & "    AND    A.ISCD=C.ISCD " _n        & "    AND    C.STND_DATE='" + tdate + "' " _n        & "    AND    B.OTC_FUND_ISCD=D.OTC_FUND_ISCD "n        n    sql = "MERGE INTO RCS.PML_DV01 a USING (" + sub_sql + ") b ON (a.tdate = b.tdate and a.code = b.code and a.currency = b.currency) WHEN MATCHED THEN " + update_sql + " WHEN NOT MATCHED THEN " + insert_sqln    nnn    With oCmdnn        .CommandText = sqlnn'        Call .Parameters.append(oCmd.CreateParameter("TDATE", adoDB.DataTypeEnum.adVarChar, adoDB.ParameterDirectionEnum.adParamInput, 8, tdate))n'        Call .Parameters.append(oCmd.CreateParameter("CODE", adoDB.DataTypeEnum.adVarChar, adoDB.ParameterDirectionEnum.adParamInput, 30, els_t_code))n'        Call .Parameters.append(oCmd.CreateParameter("CURRENCY", adoDB.DataTypeEnum.adVarChar, adoDB.ParameterDirectionEnum.adParamInput, 12, ccy))n'        Call .Parameters.append(oCmd.CreateParameter("DURATION", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=t))n'        Call .Parameters.append(oCmd.CreateParameter("DV01", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=dv01))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_3M", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(0)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_6M", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(1)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_9M", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(2)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_1Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(3)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_18M", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(4)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_2Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(5)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_3Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(6)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_4Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(7)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_5Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(8)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_7Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(9)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_10Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(10)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_12Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(11)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_15Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(12)))n'        Call .Parameters.append(oCmd.CreateParameter("BCKT_DV01_20Y", adoDB.DataTypeEnum.adNumeric, adoDB.ParameterDirectionEnum.adParamInput, value:=bcktDV01(13)))n'        Call .Parameters.append(oCmd.CreateParameter("DEPTCODE", adoDB.DataTypeEnum.adVarChar, adoDB.ParameterDirectionEnum.adParamInput, 12, "351"))n'        Call .Parameters.append(oCmd.CreateParameter("GDS_TP", adoDB.DataTypeEnum.adVarChar, adoDB.ParameterDirectionEnum.adParamInput, 20, "EquitySwap"))nn        .ActiveConnection = adoConn        Call .Executenn    End Withn    n    Set oCmd = Nothingn    nEnd SubnnnPublic Sub map_bcktDV01(t As Double, dv01 As Double, bcktDV01() As Double)nn    Dim t_lower As Doublen    Dim t_upper As Doublen    Dim w As Doublen    Dim i As Integern    n    If t < 0.25 Thenn        i = 0n        w = 1n    ElseIf t < 0.5 Thenn        i = 0n        t_lower = 0.25n        t_upper = 0.5n    ElseIf t < 0.75 Thenn        i = 1n        t_lower = 0.5n        t_upper = 0.75n    ElseIf t < 1# Thenn        i = 2n        t_lower = 0.75n        t_upper = 1#n    ElseIf t < 1.5 Thenn        i = 3n        t_lower = 1#n        t_upper = 1.5n    ElseIf t < 2# Thenn        i = 4n        t_lower = 1.5n        t_upper = 2#n    ElseIf t < 3# Thenn        i = 5n        t_lower = 2#n        t_upper = 3#n    ElseIf t < 4# Thenn        i = 6n        t_lower = 3#n        t_upper = 4#n    ElseIf t < 5# Thenn        i = 7n        t_lower = 4#n        t_upper = 5#n    ElseIf t < 7# Thenn        i = 8n        t_lower = 5#n        t_upper = 7#n    ElseIf t < 10# Thenn        i = 9n        t_lower = 7#n        t_upper = 10#n    ElseIf t < 12# Thenn        i = 10n        t_lower = 10#n        t_upper = 12#n    ElseIf t < 15# Thenn        i = 11n        t_lower = 12#n        t_upper = 15#n    ElseIf t < 20# Thenn        i = 12n        t_lower = 15#n        t_upper = 20#n    ElseIf t >= 20# Thenn        i = 13n        w = 1n    End Ifn    n    If t_lower * t_lower <> 0 Thenn        w = (t_upper - t) / (t_upper - t_lower)n    End Ifnn    bcktDV01(i) = dv01 * wn    If w <> 1 Thenn        bcktDV01(i + 1) = dv01 * (1 - w)n    End Ifn        nEnd Subn                nPublic Sub acc_bcktDV01(bcktDV01() As Double, bcktDV01_tmp() As Double)n    n    Dim i As Integern    For i = 0 To UBound(bcktDV01)n        bcktDV01(i) = bcktDV01(i) + bcktDV01_tmp(i)n    Next in    nEnd Sub