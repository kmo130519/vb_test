'-------------------------------n' Modified onn' 2013-10-16n'-------------------------------nOption Explicitnnnn'Option Explicitnnnn'#######################################################n' Class: clsACDealTicketn' Modified by Lee, Seok on 2012/07/12n'         - added members to support 2 index pricing.n'#######################################################nnPublic ccy As StringnPublic no_of_ul As Integer '< --- 2dnnPublic asset_code As StringnPublic fund_code_m As StringnPublic fund_code_c As StringnPrivate ul_code_() As Stringnn'for leverage indices: 2018.7.9n'Private ratioLeverage_() As Doublen'ratioLeverage_ -> codeLeverage:2020.6.19nPrivate codeLeverage_() As IntegernnPublic isLeveraged As BooleannPublic has_eval_shift_ul As Boolean '2024.05.23nnPublic current_date As DatenPublic current_date_origin_ As DatennPublic value_date As DatenPublic Maturity As IntegernPublic maturity_date As DatenPublic settlement_date As DatennPublic confirmed_yn As StringnPublic alive_yn As StringnnPublic call_put As LongnPublic strike_at_maturity As DoublenPublic coupon_at_maturity As DoublenPublic dummy_coupon As DoublennPublic ki_barrier_flag As LongnPublic ki_touched_flag As LongnPrivate ki_barrier_() As Doublen'Public ki_barrier_2 As Double '< --- 2dnPrivate early_exit_barrier_() As DoublennPublic ko_barrier_flag As LongnPublic ko_touched_flag As LongnPublic ko_barrier As DoublennPublic put_strike As DoublenPublic put_participation As DoublenPublic put_additional_coupon As DoublenPublic ki_monitoring_freq As IntegernnPublic ki_adj_pct As Double ' 2015-01-19nnPublic call_strike As DoublenPublic call_participation As DoublennnPublic monthly_coupon_flag As LongnPublic monthly_coupon_amount As Double '<-- Monthly couponnPublic monthly_coupon_memory_flag As Long '2024.06.10 memory 구조 추가nPublic unpaid_coupon As Double '2024.06.10 memory 구조 추가nnPublic early_exit_flag As LongnPublic early_exit_touched_flag As Longn'Private early_exit_touched_flag_() As DoublenPrivate early_exit_touched_flag_() As Long 'data type 변경: dll(2018.7.17)nnPrivate early_exit_performance_types_() As Long 'dll(2018.8.8)nPrivate early_exit_barrier_types_() As Long 'dll(2018.8.8)nnPublic ejectable_flag As Boolean 'dll(2021.11.12)nPrivate ejected_ul_flag_() As Long 'dll(2021.11.12)nnPublic x_grid As LongnPublic v_grid As LongnPublic t_grid As LongnPublic days_per_step As Double 'dll(2023.05.30)nnPublic mid_day_greek As BooleannnPublic scheme_type As LongnnPublic no_of_trials As LongnnPublic vol_scheme_type As LongnnPublic comment As StringnPublic notional As DoublenPublic unit_notional As Double '2023.10.23nPublic qty As Double '2023.10.23nPublic instrument_type As String '2023.10.23nPublic current_notional As DoublennPrivate reference_price_() As Doublen'Public reference_price_2 As Double '< --- 2dn'Public strike_shift As DoublenPublic ki_barrier_shift As DoublennPublic no_of_schedule As Integern'Public no_of_schedule_2 As Integer '< --- 2dnPublic no_of_coupon_schedule As IntegernPublic no_of_floating_coupon_schedule As IntegernPublic no_of_early_exit_schedule As IntegernnnPublic rate_spread As DoublennPublic issue_price As DoublenPublic issue_cost As DoublennPublic hedge_cost As Double ' expected hedge cost as percentage of notionalnnPublic duration As DoublennnnPrivate autocall_schedules_() As clsAutocallSchedulen'Private autocall_schedules_2_() As clsAutocallSchedule '< --- 2dnPrivate monthly_coupon_schedules_() As clsAutocallSchedule '<-- Monthly CouponnPrivate floating_schedules_() As clsAutocallSchedulenPrivate early_exit_schedules_() As clsAutocallSchedulenn'Public instrument_type As Longn'Public performance_type As LongnPublic ki_performance_type As LongnnPublic ra_flag As IntegernPublic ra_tenor As IntegernPublic ra_cpn As DoublenPublic ra_min_percent As DoublenPublic ra_max_percent As DoublennPublic floor_value As DoublennPrivate term_vega_tenor_() As Date '2015/10/05n nnPrivate func As New FunctionsnnPublic Function term_vega_tenor_array() As Date() '2015/10/05nn    term_vega_tenor_array = term_vega_tenor_n    nEnd FunctionnnPublic Function term_vega_tenor(inx As Integer) As Date       '2015/10/05n    n    term_vega_tenor = term_vega_tenor_(inx)n    nEnd FunctionnnnnPublic Sub set_term_vega_tenor(term_vega_tenor() As Date)nn    Dim inx As Integern    n    ReDim term_vega_tenor_(1 To get_array_size_date(term_vega_tenor))n    n    n    For inx = 1 To get_array_size_date(term_vega_tenor)n        term_vega_tenor_(inx) = term_vega_tenor(inx)n    Next inxnnEnd SubnnPublic Function floating_schedules(inx As Integer) As clsAutocallSchedulenn    Set floating_schedules = floating_schedules_(inx)nnEnd FunctionnnPublic Sub set_floating_schedule(no_of_schedule_in As Integer, coupon_date() As Date, fixing_value() As Double)nn    Dim a_schedule As clsAutocallSchedulen    Dim inx As Integern    nOn Error GoTo ErrorHandlern    n    If no_of_schedule_in >= 1 Thennn        ReDim floating_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        no_of_floating_coupon_schedule = no_of_schedule_inn'    Elsen'n'        raise_err "clsACDealTicket.setSchedule", "No schedule found"nn    n'n    n        For inx = 1 To no_of_schedule_inn            n            Set floating_schedules_(inx) = New clsAutocallSchedulen            n            floating_schedules_(inx).call_date = coupon_date(inx)n            floating_schedules_(inx).set_coupon_on_call fixing_value(inx)n        n        Next inxn    n    End Ifn    n    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.set_floating_schedule"nnnEnd SubnnnnPublic Function floating_coupon_dates(Optional base As Integer = 1) As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(floating_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = CLng(floating_schedules_(inx + 1 - base).call_date)n        n        Next inxn        n    Elsen        n        ReDim rtn_array(base To base) As Longn        n        rtn_array(base) = CLng(#12/31/2100#) ' Dummyn    n    End Ifn    n    floating_coupon_dates = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.call_dates"nnEnd FunctionnnnPublic Function floating_fixing_values(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(floating_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number <> 9 And no_of_schedule_in > 0 Thenn                n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = floating_schedules_(inx + 1 - base).coupon_on_calln        n        Next inxn        n    Elsen        ReDim rtn_array(base To base) As Doublen        n        rtn_array(base) = 0n        n    End Ifn    n    floating_fixing_values = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsBarrierDealTicket.coupon_on_calls", Err.descriptionnnnEnd FunctionnnPublic Sub set_ul_dim(no_of_ul_in As Integer)nn    no_of_ul = no_of_ul_inn    n    'Preserve 추가 (2023.09.27)n    ReDim Preserve ul_code_(1 To no_of_ul_in) As Stringn    ReDim Preserve reference_price_(1 To no_of_ul_in) As Doublen    ReDim Preserve ki_barrier_(1 To no_of_ul_in) As Doublen    'ReDim early_exit_barrier_(1 To no_of_ul_in) As Doublen    n    'for leverage indices: 2018.7.9n    'ReDim ratioLeverage_(1 To no_of_ul_in) As Doublen    ReDim Preserve codeLeverage_(1 To no_of_ul_in) As Integern    n    'for ejectable structure: dll(2021.11.12)n    ReDim Preserve ejected_ul_flag_(1 To no_of_ul_in) As Longn    nEnd SubnnPublic Sub redim_early_exit_barrier(no_of_schedule_in As Integer)nn    'Preserve 추가 (2023.09.27)n    ReDim Preserve early_exit_barrier_(1 To no_of_ul * no_of_schedule_in) As Doublen    nEnd Subn n nPublic Function get_reference_price() As Double()nn    get_reference_price = reference_price_nnEnd FunctionnnPublic Function reference_price(Optional inx As Integer = 1) As DoublennOn Error Resume Nextnn    reference_price = reference_price_(inx)n    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.ki_barrier", "Underlying Asset is not specified."n    n    End IfnnEnd FunctionnPublic Function reference_prices(Optional base As Integer = 1) As Double()n    n    Dim rtn_array() As Doublen    Dim inx As Integern    n    ReDim rtn_array(base To base + no_of_ul - 1) As Doublen    nOn Error Resume Nextnnn    For inx = base To base + no_of_ul - 1n        n        rtn_array(inx) = reference_price_(inx + 1 - base)n    n    Next inxn    n    reference_prices = rtn_arraynnEnd FunctionnnPublic Sub set_reference_price(in_reference_price As Double, Optional inx As Integer = 1)nnOn Error Resume Nextnn    reference_price_(inx) = in_reference_pricen    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.set_reference_price", "Underlying Asset is not specified."n    n    End Ifn    nnEnd SubnnPublic Sub set_reference_prices(in_reference_price() As Double)nn    reference_price_ = in_reference_pricen    nEnd SubnnPublic Sub set_ejected_ul_flag(in_ejected_ul_flag As Integer, Optional inx As Integer = 1)n    n    On Error Resume Nextn    n    ejected_ul_flag_(inx) = in_ejected_ul_flagn    n    If Err.number = 9 Thenn        n        raise_err "clsACDealTicket.set_ejected_ul_flag", "Underlying asset is not specified."n        n    End Ifn    nEnd SubnnPublic Sub set_ejected_ul_flags(in_ejected_ul_flag() As Integer)nn    ejected_ul_flag_ = in_ejected_ul_flagn    nEnd SubnnPublic Function percent_ki_barriers(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integernn    ReDim rtn_array(base To base + no_of_ul - 1) As Doublenn    For inx = base To base + no_of_ul - 1n    n        rtn_array(inx) = ki_barrier_(inx + 1 - base)n    n    Next inxn    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.ki_barrier", "Underlying Asset is not specified."n    n    End Ifn    n    percent_ki_barriers = rtn_arraynnEnd FunctionnnPublic Function abs_ki_barriers(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integernn    ReDim rtn_array(base To base + no_of_ul - 1) As Doublenn    For inx = base To base + no_of_ul - 1n    n        rtn_array(inx) = ki_barrier_(inx + 1 - base) * reference_price(inx + 1 - base)n    n    Next inxn    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.abs_ki_barriers", "Underlying Asset is not specified."n    n    End Ifn    n    abs_ki_barriers = rtn_arraynnEnd Functionn nPublic Function ki_barrier(Optional inx As Integer = 1) As DoublennOn Error Resume Nextnn    ki_barrier = ki_barrier_(inx)n    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.ki_barrier", "Underlying Asset is not specified."n    n    End IfnnEnd FunctionnPublic Function early_exit_barrier(Optional inx As Integer = 1) As DoublennOn Error Resume Nextnn    early_exit_barrier = early_exit_barrier_(inx)nn    If Err.number = 9 Thennn        raise_err "clsACDealTicket.early_exit_barrier", "Underlying Asset is not specified."nn    End IfnnEnd FunctionnnPublic Function abs_early_exit_barriers(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integern    n    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlern    n    If early_exit_flag = 0 Thenn    n        ReDim rtn_array(base To no_of_ul + base - 1) As Doublen        n        For inx = base To no_of_ul + base - 1n            rtn_array(inx) = 1 ' Dummyn        Next inxn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.coupon_barriers", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in * no_of_ul + base - 1) As Doublen        n        For inx = 1 To no_of_schedule_inn            For jnx = 1 To no_of_uln                n                'early_exit_schedules_(inx).percent_strike를 set 해주지 않아 항상 0으로 나옴. 대신 early_exit_barrier 함수를 사용n                'rtn_array(no_of_ul * (inx - 1) + jnx - 1) = early_exit_schedules_(inx).percent_strike() * reference_price(jnx)n                'rtn_array(no_of_ul * (inx - 1) + jnx - 1) = early_exit_barrier(jnx) * reference_price(jnx)n                rtn_array(no_of_ul * (inx - 1) + jnx - 1) = early_exit_barrier_(no_of_ul * (inx - 1) + jnx) * reference_price(jnx)n                n            Next jnxn        Next inxn        n    End Ifn    n    abs_early_exit_barriers = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.abs_early_exit_barriers"n'n'    Dim rtn_array() As Doublen'    Dim inx As Integern'n'    Dim no_of_ee_schedule As Integern'n'    no_of_ee_schedule = UBound(early_exit_barrier)n'n'On Error Resume Nextn'n'    ReDim rtn_array(base To base)n'n'    early_exit_barriers = early_exit_barrier_n'n'    If Err.number = 9 Thenn'n'        raise_err "clsACDealTicket.early_exit_barrier", "Underlying Asset is not specified."n'n'    End IfnnEnd FunctionnnPublic Function early_exit_barriers(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlern    n    If early_exit_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Doublen        rtn_array(base) = 1 ' Dummyn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.coupon_barriers", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = early_exit_schedules_(inx + 1 - base).percent_strike()n        n        Next inxn        n    End Ifn    n    early_exit_barriers = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_barriers"n'n'    Dim rtn_array() As Doublen'    Dim inx As Integern'n'    Dim no_of_ee_schedule As Integern'n'    no_of_ee_schedule = UBound(early_exit_barrier)n'n'On Error Resume Nextn'n'    ReDim rtn_array(base To base)n'n'    early_exit_barriers = early_exit_barrier_n'n'    If Err.number = 9 Thenn'n'        raise_err "clsACDealTicket.early_exit_barrier", "Underlying Asset is not specified."n'n'    End IfnnEnd FunctionnnPublic Sub set_ki_barrier(in_ki_barrier As Double, Optional inx As Integer = 1)nnOn Error Resume Nextnn    ki_barrier_(inx) = in_ki_barriern    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.set_ki_barrier", "Underlying Asset is not specified."n    n    End Ifn    nnEnd SubnnPublic Sub set_ki_barriers(in_ki_barrier() As Double)nn    ki_barrier_ = in_ki_barriern    nEnd SubnPublic Sub set_early_exit_barrier(in_early_exit_barrier As Double, Optional inx As Integer = 1)nnOn Error Resume Nextnn    early_exit_barrier_(inx) = in_early_exit_barriern    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.set_early_exit_barrier", "Underlying Asset is not specified."n    n    End Ifn    nnEnd SubnnPublic Sub set_early_exit_barriers(in_early_exit_barrier() As Double)nn    early_exit_barrier_ = in_early_exit_barriern    nEnd Subn n nPublic Function get_ul_codes() As String()nnOn Error Resume Nextnn    get_ul_codes = ul_code_nnEnd Functionn nPublic Function ul_code(Optional inx As Integer = 1) As StringnnOn Error Resume Nextnn    ul_code = ul_code_(inx)n    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.ul_code", "Underlying Asset is not specified."n    n    End IfnnEnd Functionnn'for leverage indices: 2018.7.9nPublic Function ratioLeverage(Optional inx As Integer = 1) As DoublennOn Error Resume Nextnn    ratioLeverage = ratioLeverage_(inx)n    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.ratioLeverage", "Leverage ratio is not specified."n    n    End IfnnEnd FunctionnnPublic Function codeLeverage(Optional inx As Integer = 1) As IntegernnOn Error Resume Nextnn    codeLeverage = codeLeverage_(inx)n    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.codeLeverage", "Leverage ratio is not specified."n    n    End IfnnEnd FunctionnnPublic Sub set_ratioLeverage(ratioLeverage As Double, Optional inx As Integer = 1)nnOn Error Resume Nextnn    ratioLeverage_(inx) = ratioLeveragen    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.set_ratioLeverage", "Leverage ratio is not specified."n    n    End IfnnEnd SubnnnPublic Sub set_codeLeverage(codeLeverage As Integer, Optional inx As Integer = 1)nnOn Error Resume Nextnn    codeLeverage_(inx) = codeLeveragen    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.set_codeLeverage", "Leverage ratio is not specified."n    n    End IfnnEnd SubnnPublic Sub set_ul_code(in_ul_code As String, Optional inx As Integer = 1)nnOn Error Resume Nextnn    ul_code_(inx) = in_ul_coden    n    If Err.number = 9 Thenn    n        raise_err "clsACDealTicket.set_ul_code", "Underlying Asset is not specified."n    n    End Ifn    nnEnd SubnnPublic Sub set_ul_codes(in_ul_codes() As String)nn    ul_code_ = in_ul_codesn    nEnd Subn n'Public current_date_origin_ As DatennPublic Function copy_obj() As clsACDealTicketnn    Dim obj As clsACDealTicketn    n    Set obj = New clsACDealTicketn    n    obj.no_of_ul = no_of_uln    n    obj.fund_code_m = fund_code_mn    obj.fund_code_c = fund_code_cn    obj.asset_code = asset_coden    obj.set_ul_codes ul_code_n    nn    obj.current_date = current_daten    obj.current_date_origin_ = current_date_origin_n    n    obj.value_date = value_daten    obj.Maturity = Maturityn    obj.maturity_date = maturity_daten    obj.settlement_date = settlement_datenn    obj.confirmed_yn = confirmed_ynn    obj.alive_yn = alive_ynn    n    n    obj.call_put = call_putn    obj.strike_at_maturity = strike_at_maturityn    obj.coupon_at_maturity = coupon_at_maturityn    obj.dummy_coupon = dummy_couponn    n    obj.ki_barrier_flag = ki_barrier_flagn    obj.ki_touched_flag = ki_touched_flagn    obj.set_ki_barriers ki_barrier_n    n    n    obj.ki_monitoring_freq = ki_monitoring_freqn    n    obj.x_grid = x_gridn    obj.v_grid = v_gridn    obj.t_grid = t_gridn    n    obj.scheme_type = scheme_typen    n    obj.comment = commentn    obj.notional = notionaln    n    obj.no_of_trials = no_of_trialsn    n    obj.set_reference_prices reference_price_n    n    obj.issue_cost = issue_costn    n    obj.copy_schedule no_of_schedule, autocall_schedules_n    n    n'n'    If obj.no_of_ul >= 2 Thenn'        obj.copy_schedule_2 no_of_schedule_2, autocall_schedules_2_n'    End Ifn    n    obj.early_exit_flag = early_exit_flagn    obj.set_early_exit_barriers early_exit_barrier_nnn    obj.monthly_coupon_flag = monthly_coupon_flagn    obj.monthly_coupon_amount = monthly_coupon_amountn    n    obj.copy_coupon_schedule no_of_coupon_schedule, monthly_coupon_schedules_n '   obj.copy_floating_schedule UBound(floating_schedules_), floating_schedules_n    obj.copy_early_exit_schedule no_of_early_exit_schedule, early_exit_schedules_n    n    obj.instrument_type = instrument_typen    obj.performance_type = performance_typen    n    obj.ra_cpn = ra_cpnn    obj.ra_flag = ra_flagn    obj.ra_max_percent = ra_max_percentn    obj.ra_min_percent = ra_min_percentn    obj.ra_tenor = ra_tenorn    n    obj.rate_spread = rate_spreadn    n    obj.ki_adj_pct = ki_adj_pctn    n    obj.duration = durationn    n    obj.issue_price = issue_pricen    n    obj.ki_barrier_shift = ki_barrier_shiftn    obj.strike_shift = strike_shiftn    obj.hedge_cost = hedge_costn    n    obj.put_strike = put_striken    obj.put_participation = put_participationn    n    If get_array_size_date(term_vega_tenor_) > 0 Thenn        obj.set_term_vega_tenor term_vega_tenor_n    End Ifnn    Set copy_obj = objnnEnd FunctionnnPublic Function autocall_schedules(inx As Integer) As clsAutocallSchedulenn    Set autocall_schedules = autocall_schedules_(inx)nnEnd FunctionnnPublic Function monthly_coupon_schedules(inx As Integer) As clsAutocallSchedulenn    Set monthly_coupon_schedules = monthly_coupon_schedules_(inx)nnEnd FunctionnPublic Function coupon_dates(Optional base As Integer = 1) As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(monthly_coupon_schedules_)n    nOn Error GoTo ErrorHandlernn    If monthly_coupon_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1 ' Dummyn        n    Elsen        n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.coupon_dates", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To base + no_of_schedule_in - 1) As Longn        n        For inx = base To base + no_of_schedule_in - 1n        n            rtn_array(inx) = CLng(monthly_coupon_schedules_(inx + 1 - base).call_date)n        n        Next inxn    n    End Ifn        n    coupon_dates = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.coupon_dates"nnEnd Functionn'Public Function early_exit_touched_flags(Optional base As Integer = 1) As Double()nPublic Function early_exit_touched_flags(Optional base As Integer = 1) As Long() 'data type 변경: dll(2018.7.17)nn    'Dim rtn_array() As Doublen    Dim rtn_array() As Long 'data type 변경: dll(2018.7.17)n    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlernn    If early_exit_flag = 0 Thenn    n        'ReDim rtn_array(base To base) As Doublen        ReDim rtn_array(base To base) As Long 'data type 변경: dll(2018.7.17)n        rtn_array(base) = 1#  ' Dummyn        n    Elsen        n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.early_exit_touched_flags", "Not initialized array"n        End Ifn        n        'ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Long 'data type 변경: dll(2018.7.17)n        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = early_exit_touched_flag_(inx + 1 - base)n        n        Next inxn    n    End Ifn        n    early_exit_touched_flags = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_touched_flags"nnEnd FunctionnnPublic Function early_exit_performance_types(Optional base As Integer = 1) As Long() 'dll(2018.8.8)nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlernn    If early_exit_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1#  ' Dummyn        n    Elsen        n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.early_exit_performance_types_", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = early_exit_performance_types_(inx + 1 - base)n        n        Next inxn    n    End Ifn        n    early_exit_performance_types = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_performance_types_"nnEnd FunctionnnPublic Function early_exit_barrier_types(Optional base As Integer = 1) As Long() 'dll(2018.8.8)nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlernn    If early_exit_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1#  ' Dummyn        n    Elsen        n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.early_exit_barrier_types_", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = early_exit_barrier_types_(inx + 1 - base)n        n        Next inxn    n    End Ifn        n    early_exit_barrier_types = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_barrier_types_"nnEnd FunctionnnPublic Function early_exit_dates(Optional base As Integer = 1) As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlernn    If early_exit_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1 ' Dummyn        n    Elsen        n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.coupon_dates", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = CLng(early_exit_schedules_(inx + 1 - base).call_date)n        n        Next inxn    n    End Ifn        n    early_exit_dates = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_dates"nnEnd FunctionnnPublic Function early_exit_date(inx As Integer, Optional base As Integer = 1) As DatennOn Error Resume Nextnn    early_exit_date = early_exit_schedules_(inx + 1 - base).call_datenn    If Err.number = 9 Thennn        raise_err "clsACDealTicket.early_exit_date"nn    End IfnnEnd FunctionnnPublic Function ejected_ul_flag(Optional base As Integer = 1) As Long() 'dll(2021.11.12)nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_ul_in As Integern    n    On Error Resume Nextn    n    no_of_ul_in = UBound(ejected_ul_flag_)n    nOn Error GoTo ErrorHandlern    n    If ejectable_flag = False Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1 ' Dummyn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.ejected_ul_flag", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_ul_in + base - 1) As Longn        n        For inx = base To no_of_ul_in + base - 1n        n            rtn_array(inx) = ejected_ul_flag_(inx + 1 - base)n        n        Next inxn        n    End Ifn    n    ejected_ul_flag = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.ejected_ul_flag"nnEnd FunctionnnPublic Function ejected_event_flag(Optional base As Integer = 1) As Long() 'dll(2021.11.12)nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If ejectable_flag = False Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1 ' Dummyn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.ejected_event_flag", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = autocall_schedules_(inx + 1 - base).ejected_event_flagn        n        Next inxn        n    End Ifn    n    ejected_event_flag = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.ejected_event_flag"nnEnd FunctionnnPublic Function ejectable_order(Optional base As Integer = 1) As Long() 'dll(2021.11.12)nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If ejectable_flag = False Thenn    n        ReDim rtn_array(base To base) As Longn        rtn_array(base) = 1 ' Dummyn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.ejectable_order", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = autocall_schedules_(inx + 1 - base).ejectable_ordern        n        Next inxn        n    End Ifn    n    ejectable_order = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.ejectable_order"nnEnd FunctionnnPublic Function early_exit_coupon_amt(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlern    n    If early_exit_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Doublen        rtn_array(base) = 1 ' Dummyn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.coupon_barriers", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = early_exit_schedules_(inx + 1 - base).coupon_on_calln        n        Next inxn        n    End Ifn    n    early_exit_coupon_amt = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_coupon_amt"nnnEnd FunctionnnPublic Function early_exit_coupon(inx As Integer, Optional base As Integer = 1) As DoublennOn Error Resume Nextnn    early_exit_coupon = early_exit_schedules_(inx + 1 - base).coupon_on_callnn    If Err.number = 9 Thennn        raise_err "clsACDealTicket.early_exit_coupon"nn    End IfnnEnd FunctionnnPublic Function monthly_coupon_amt(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(monthly_coupon_schedules_)n    nOn Error GoTo ErrorHandlern    n    If monthly_coupon_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Doublen        rtn_array(base) = 1 ' Dummyn        n    Elsen    n        If Err.number = 9 Thenn            raise_err "clsACDealTicket.coupon_barriers", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = monthly_coupon_schedules_(inx + 1 - base).coupon_on_calln        n        Next inxn        n    End Ifn    n    monthly_coupon_amt = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.coupon_barriers"nnnEnd Functionn'Public Function coupon_barriers() As Double()n'n'    Dim rtn_array() As Doublen'    Dim inx As Integern'    Dim no_of_schedule_in As Integern'n'    On Error Resume Nextn'n'    no_of_schedule_in = UBound(monthly_coupon_schedules_)n'n'On Error GoTo ErrorHandlern'n'    If monthly_coupon_flag = 0 Thenn'n'        ReDim rtn_array(1 To 1) As Doublen'        rtn_array(1) = 1 ' Dummyn'n'    Elsen'n'        If Err.number = 9 Thenn'            raise_err "clsACDealTicket.coupon_barriers", "Not initialized array"n'        End Ifn'n'        ReDim rtn_array(1 To no_of_schedule_in) As Doublen'n'        For inx = 1 To no_of_schedule_inn'n'            rtn_array(inx) = monthly_coupon_schedules_(inx).strike_valuen'n'        Next inxn'n'    End Ifn'n'    coupon_barriers = rtn_arrayn'n'    Exit Functionn'n'ErrorHandler:n'n'    raise_err "clsACDealTicket.coupon_barriers"n'n'n'End FunctionnPublic Function abs_coupon_barriers(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integern    n    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(monthly_coupon_schedules_)n    nOn Error GoTo ErrorHandlern    If monthly_coupon_flag = 0 Thenn    n        ReDim rtn_array(base To no_of_ul + base - 1) As Doublen        n        For inx = base To no_of_ul + base - 1n            rtn_array(inx) = 1 ' Dummyn        Next inxn    n    Elsen        If Err.number = 9 Thenn            raise_err "clsACDealTicket.percent_coupon_barriers", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in * no_of_ul + base - 1) As Doublen        n        For inx = 1 To no_of_schedule_inn            For jnx = 1 To no_of_uln        n                rtn_array(no_of_ul * (inx - 1) + jnx - 1) = monthly_coupon_schedules_(inx).percent_strike * reference_price(jnx)n                n            Next jnxn        Next inxn    End Ifn    n    abs_coupon_barriers = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.percent_coupon_barriers"nnnEnd FunctionnPublic Function percent_coupon_barriers(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(monthly_coupon_schedules_)n    nOn Error GoTo ErrorHandlern    If monthly_coupon_flag = 0 Thenn    n        ReDim rtn_array(base To base) As Doublen        rtn_array(base) = 1 ' Dummyn    n    Elsen        If Err.number = 9 Thenn            raise_err "clsACDealTicket.percent_coupon_barriers", "Not initialized array"n        End Ifn        n        ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen        n        For inx = base To no_of_schedule_in + base - 1n        n            rtn_array(inx) = monthly_coupon_schedules_(inx + 1 - base).percent_striken        n        Next inxn    End Ifn    n    percent_coupon_barriers = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.percent_coupon_barriers"nnnEnd FunctionnnnPublic Function call_dates(Optional base As Integer = 1) As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.call_dates", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To base + no_of_schedule_in - 1) As Longn    n    For inx = base To base + no_of_schedule_in - 1n    n        rtn_array(inx) = CLng(autocall_schedules_(inx + 1 - base).call_date)n    n    Next inxn        n    call_dates = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.call_dates"nnEnd Functionn'n'Public Function strike_values() As Double()n'n'    Dim rtn_array() As Doublen'    Dim inx As Integern'    Dim no_of_schedule_in As Integern'n'    On Error Resume Nextn'n'    no_of_schedule_in = UBound(autocall_schedules_)n'n'On Error GoTo ErrorHandlern'n'    If Err.number = 9 Thenn'        raise_err "clsACDealTicket.strike_values", "Not initialized array"n'    End Ifn'n'    ReDim rtn_array(1 To no_of_schedule_in) As Doublen'n'    For inx = 1 To no_of_schedule_inn'n'        rtn_array(inx) = autocall_schedules_(inx).strike_valuen'n'    Next inxn'n'    strike_values = rtn_arrayn'n'    Exit Functionn'n'ErrorHandler:n'n'    raise_err "clsACDealTicket.call_dates"n'n'n'End FunctionnnPublic Function coupon_on_call_array(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublenn    Dim inx As Integern    Dim jnx As Integern    n    Dim no_of_schedule_in As Integern    Dim no_of_jumps As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    no_of_jumps = autocall_schedules_(1).no_of_jumps()n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in * no_of_jumps + base - 1) As Doublen        n    For inx = 1 To no_of_jumpsn        For jnx = 1 To no_of_schedule_inn    n                rtn_array((inx - 1) * no_of_schedule_in + jnx - 1 + base) = autocall_schedules_(jnx).coupon_on_call(inx)n            n        Next jnxn    Next inxn        n    coupon_on_call_array = rtn_arrayn    nn    Exit Functionn    nErrorHandler:nn    raise_err "clsAcDealTicket.coupon_on_call_array", Err.descriptionnnEnd Functionnnn'-------------------------------------------------------------------------n'This will be Deperciated Soon. 2014-03-26n'-------------------------------------------------------------------------nPublic Function coupon_on_calls(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    Dim no_of_jumps As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen    n    no_of_jumps = autocall_schedules_(1).no_of_jumps()n    n    For inx = base To no_of_schedule_in * no_of_jumps + base - 1n    n        rtn_array(inx) = autocall_schedules_(inx + 1 - base).coupon_on_calln    n    Next inxn        n    coupon_on_calls = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.call_dates"nnnEnd Functionnn'-------------------------------------------------------------------------n'This will be Deperciated Soon. 2014-03-26n'-------------------------------------------------------------------------nPublic Function coupon_on_calls_multi_jump() As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(1 To no_of_schedule_in, 1 To autocall_schedules_(1).no_of_jumps()) As Doublen    n    For inx = 1 To no_of_schedule_inn        For jnx = 1 To autocall_schedules_(inx).no_of_jumps()n            rtn_array(inx, jnx) = autocall_schedules_(inx).coupon_on_call(jnx)n        Next jnxn    Next inxn        n    coupon_on_calls_multi_jump = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.call_dates"nnnEnd FunctionnnnPublic Function percent_strikes_multi_jump() As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integern    n    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(1 To no_of_schedule_in, 1 To autocall_schedules_(1).no_of_jumps()) As Doublen    n    For inx = 1 To no_of_schedule_inn        For jnx = 1 To autocall_schedules_(inx).no_of_jumpsn            rtn_array(inx, jnx) = autocall_schedules_(inx).percent_strike(jnx)n        Next jnxn    Next inxn        n    percent_strikes_multi_jump = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.percent_strikes"nnnEnd FunctionnPublic Function abs_ra_max(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    n    ReDim rtn_array(base To base + no_of_ul - 1) As Doublen    n    For inx = 1 To no_of_uln        n        rtn_array((inx - 1) + base) = ra_max_percent * reference_price_(inx)n    n    Next inxn    n    abs_ra_max = rtn_arraynnEnd FunctionnPublic Function abs_ra_min(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    n    ReDim rtn_array(base To base + no_of_ul - 1) As Doublen    n    For inx = 1 To no_of_uln        n        rtn_array((inx - 1) + base) = ra_min_percent * reference_price_(inx)n    n    Next inxn    n    abs_ra_min = rtn_arraynnEnd Functionnn'-------------------------------------------------------------------n' Returns 1dim arrayn'n'-------------------------------------------------------------------nPublic Function abs_strikes(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim jnx As Integern    Dim knx As Integern    n    Dim no_of_schedule_in As Integern    Dim no_of_jumps As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    no_of_jumps = autocall_schedules_(1).no_of_jumps()n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in * no_of_ul * no_of_jumps + base - 1) As Doublen        n    For inx = 1 To no_of_jumpsn        For jnx = 1 To no_of_schedule_inn            For knx = 1 To no_of_uln    n                rtn_array((inx - 1) * no_of_schedule_in * no_of_ul + (jnx - 1) * no_of_ul + knx - 1 + base) = autocall_schedules_(jnx).percent_strike(inx) * reference_price(knx)n            n            Next knxn        Next jnxn    Next inxn        n    abs_strikes = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.abs_strikes", Err.descriptionnnnEnd FunctionnPublic Function percent_strikes(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen    n    For inx = base To no_of_schedule_in + base - 1n    n        rtn_array(inx) = autocall_schedules_(inx + 1 - base).percent_striken    n    Next inxn        n    percent_strikes = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.percent_strikes"nnnEnd Functionnn'<--addednPublic Function performance_type(Optional base As Integer = 1) As Long()nn    Dim rtn_array() As Longn    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.performance_type", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in + base - 1) As Longn    n    For inx = base To no_of_schedule_in + base - 1n    n        rtn_array(inx) = autocall_schedules_(inx + 1 - base).performance_typen    n    Next inxn        n    performance_type = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.performance_type"nnEnd FunctionnnPublic Function strike_shift(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.strike_shift", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen    n    For inx = base To no_of_schedule_in + base - 1n    n        rtn_array(inx) = autocall_schedules_(inx + 1 - base).strike_shiftn    n    Next inxn        n    strike_shift = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.strike_shift"nnEnd FunctionnnPublic Function early_exit_strike_shift(Optional base As Integer = 1) As Double()nn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule_in As Integern    n    On Error Resume Nextn    n    no_of_schedule_in = UBound(early_exit_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.early_exit_strike_shift", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To no_of_schedule_in + base - 1) As Doublen    n    For inx = base To no_of_schedule_in + base - 1n    n        rtn_array(inx) = early_exit_schedules_(inx + 1 - base).strike_shiftn    n    Next inxn        n    early_exit_strike_shift = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.early_exit_strike_shift"nnEnd FunctionnnPublic Function strike_shift_at_maturity(Optional base As Integer = 1) As Doublenn    strike_shift_at_maturity = autocall_schedules_(UBound(autocall_schedules_)).strike_shiftn    nEnd FunctionnnPublic Function performance_type_at_maturity() As Longnn    performance_type_at_maturity = autocall_schedules_(UBound(autocall_schedules_)).performance_typennEnd Functionn'-->addednnPublic Function percent_strikes_at_maturity(Optional base As Integer = 1) As Double()nnn    Dim rtn_array() As Doublen    Dim inx As Integern    Dim no_of_schedule As Integern    n    On Error Resume Nextn    n    no_of_schedule = UBound(autocall_schedules_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn        raise_err "clsACDealTicket.coupon_on_calls", "Not initialized array"n    End Ifn    n    ReDim rtn_array(base To base + autocall_schedules_(no_of_schedule).no_of_jumps - 1) As Doublen    n    For inx = base To base + autocall_schedules_(no_of_schedule).no_of_jumps - 1n    n        rtn_array(inx) = autocall_schedules_(no_of_schedule).percent_strike(inx + 1 - base)n    n    Next inxn        n    percent_strikes_at_maturity = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.percent_strikes_at_maturity"nnnEnd FunctionnnnnPublic Sub copy_coupon_schedule(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)nn    Dim inx As Integern    n    If no_of_schedule_in > 0 Thenn    n        ReDim monthly_coupon_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        no_of_coupon_schedule = no_of_schedule_inn        n        For inx = 1 To no_of_coupon_schedulen                n            Set monthly_coupon_schedules_(inx) = New clsAutocallSchedulen            n            monthly_coupon_schedules_(inx).call_date = schs(inx).call_daten            monthly_coupon_schedules_(inx).set_percent_strike schs(inx).percent_striken            monthly_coupon_schedules_(inx).set_coupon_on_call schs(inx).coupon_on_calln            monthly_coupon_schedules_(inx).set_strike_value schs(inx).strike_valuen'            monthly_coupon_schedules_(inx).set_strike_value monthly_coupon_schedules_(inx).percent_strike * reference_pricen        n        Next inxn    n    End Ifn    nnEnd Subnn'Public Sub set_early_exit_schedule(no_of_schedule_in As Integer, calldate() As Date, coupon_on_call() As Double)n'n'    Dim a_schedule As clsAutocallSchedulen'    Dim inx As Integern'n'On Error GoTo ErrorHandlern'n'    If no_of_schedule_in >= 1 Thenn'n'        ReDim early_exit_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen'        no_of_early_exit_schedule = no_of_schedule_inn'n'        For inx = 1 To no_of_early_exit_schedulen'n'            Set early_exit_schedules_(inx) = New clsAutocallSchedulen'n'            early_exit_schedules_(inx).call_date = calldate(inx)n'            early_exit_schedules_(inx).set_coupon_on_call coupon_on_call(inx)n'            '<---addedn'            early_exit_schedules_(inx).strike_shift = 0n'            '--->n'n'        Next inxn'    Elsen'n'        ReDim early_exit_schedules_(1 To 1) As clsAutocallSchedule 'Dummy schedulen'        Set early_exit_schedules_(1) = New clsAutocallSchedulen'        no_of_early_exit_schedule = 1n'n'    End Ifn'n'n'n'n'    Exit Subn'n'n'ErrorHandler:n'n'    raise_err "clsACDealTicket.set_early_exit_schedule", Err.descriptionn'n'n'End Subnn'Public Sub set_early_exit_schedule(no_of_schedule_in As Integer, calldate() As Date, coupon_on_call() As Double, strike_shift() As Double, early_exit_touched_flag() As Double)n'Public Sub set_early_exit_schedule(no_of_schedule_in As Integer, calldate() As Date, coupon_on_call() As Double, strike_shift() As Double, early_exit_touched_flag() As Long)n'data type 변경: dll(2018.7.17)nPublic Sub set_early_exit_schedule(no_of_schedule_in As Integer, calldate() As Date, coupon_on_call() As Double, strike_shift() As Double, early_exit_touched_flag() As Long, early_exit_performance_types() As Long, early_exit_barrier_types() As Long)n'dll(2018.8.8)nn    'Dim a_schedule As clsAutocallSchedulen    Dim inx As IntegernnOn Error GoTo ErrorHandlernn    'Preserve 추가 (2023.09.27)n    If no_of_schedule_in >= 1 Thennn        ReDim Preserve early_exit_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        'ReDim early_exit_touched_flag_(1 To no_of_schedule_in) As Doublen        ReDim Preserve early_exit_touched_flag_(1 To no_of_schedule_in) As Long 'data type 변경: dll(2018.7.17)n        ReDim Preserve early_exit_performance_types_(1 To no_of_schedule_in) As Long 'dll(2018.8.8)n        ReDim Preserve early_exit_barrier_types_(1 To no_of_schedule_in) As Long 'dll(2018.8.8)n        no_of_early_exit_schedule = no_of_schedule_innn        For inx = 1 To no_of_early_exit_schedulenn            Set early_exit_schedules_(inx) = New clsAutocallSchedulenn            early_exit_schedules_(inx).call_date = calldate(inx)n            early_exit_schedules_(inx).set_coupon_on_call coupon_on_call(inx)n            '<---addedn            early_exit_schedules_(inx).strike_shift = strike_shift(inx)n            early_exit_touched_flag_(inx) = early_exit_touched_flag(inx)n            early_exit_performance_types_(inx) = early_exit_performance_types(inx) 'dll(2018.8.8)n            early_exit_barrier_types_(inx) = early_exit_barrier_types(inx) 'dll(2018.8.8)n            '--->nn        Next inxn    Elsenn        ReDim Preserve early_exit_schedules_(1 To 1) As clsAutocallSchedule 'Dummy schedulen        Set early_exit_schedules_(1) = New clsAutocallSchedulen        no_of_early_exit_schedule = 1nn    End Ifnnnnn    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.set_early_exit_schedule", Err.descriptionnnnEnd SubnnPublic Sub set_coupon_schedule(no_of_schedule_in As Integer, calldate() As Date, strike_percent() As Double, coupon_on_call() As Double)nn    Dim a_schedule As clsAutocallSchedulen    Dim inx As Integern    nOn Error GoTo ErrorHandlern    n    If no_of_schedule_in >= 1 Thenn    n        ReDim monthly_coupon_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        no_of_coupon_schedule = no_of_schedule_inn                n        For inx = 1 To no_of_coupon_schedulen            n            Set monthly_coupon_schedules_(inx) = New clsAutocallSchedulen         n            monthly_coupon_schedules_(inx).call_date = calldate(inx)n            monthly_coupon_schedules_(inx).set_coupon_on_call coupon_on_call(inx)n            monthly_coupon_schedules_(inx).set_percent_strike strike_percent(inx)n    '        monthly_coupon_schedules_(inx).set_strike_value monthly_coupon_schedules_(inx).percent_strike * reference_pricen        n        Next inxn    Elsen    n        ReDim monthly_coupon_schedules_(1 To 1) As clsAutocallSchedule 'Dummy schedulen        Set monthly_coupon_schedules_(1) = New clsAutocallSchedulen        no_of_coupon_schedule = 1n        n    End Ifn        nn    n    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.set_coupon_schedule"nnnEnd SubnnnPublic Sub copy_schedule(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)nn    Dim inx As Integern    Dim jnx As Integern    n    ReDim autocall_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen    no_of_schedule = no_of_schedule_inn    n    For inx = 1 To no_of_schedulen            n        Set autocall_schedules_(inx) = schs(inx).copy_obj ' clsAutocallSchedulen'n'        autocall_schedules_(inx).call_date = schs(inx).call_daten'n'        For jnx = 1 To autocall_schedules_(inx).coupon_on_calln'        autocall_schedules_(inx).set_coupon_on_call schs(inx).coupon_on_calln'        autocall_schedules_(inx).set_percent_strike schs(inx).percent_striken'        autocall_schedules_(inx).set_strike_value autocall_schedules_(inx).percent_strike * reference_pricen    n    Next inxn    n    nnEnd Subnn''------------------------------------n'' To support 2 index ELSn''------------------------------------n'Public Sub copy_schedule_2(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)n'n'    Dim inx As Integern'n'    ReDim autocall_schedules_2_(1 To no_of_schedule_in) As clsAutocallSchedulen'    no_of_schedule_2 = no_of_schedule_inn'n'    For inx = 1 To no_of_schedule_2n'n'        Set autocall_schedules_(inx) = New clsAutocallSchedulen'n'        autocall_schedules_2_(inx).call_date = schs(inx).call_daten'        autocall_schedules_2_(inx).coupon_on_call = schs(inx).coupon_on_calln'        autocall_schedules_2_(inx).percent_strike = schs(inx).percent_striken'        autocall_schedules_2_(inx).strike_value = autocall_schedules_2_(inx).percent_strike * reference_price_2n'n'    Next inxn'n'n'n'End SubnnnnPublic Sub set_schedule_array(schedules() As clsAutocallSchedule)nnOn Error GoTo ErrorHandlern    n    autocall_schedules_ = schedulesn    n    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.set_schedule_array"nnnEnd SubnnPublic Sub set_schedule(no_of_schedule_in As Integer, calldate() As Date, strike_percent() As Double, coupon_on_call() As Double)nn    Dim a_schedule As clsAutocallSchedulen    Dim inx As Integern    Dim sch_index As Integern    Dim jump_index As Integern    Dim pre_call_date As Daten    nOn Error GoTo ErrorHandlern    n    If no_of_schedule_in >= 1 Thenn    n        Erase autocall_schedules_n    n        'ReDim autocall_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        n        n        pre_call_date = 0n        n        n        For inx = 1 To no_of_schedule_inn        n            If pre_call_date <> calldate(inx) Thenn                jump_index = 0n                sch_index = sch_index + 1n                n                n                n                Set a_schedule = New clsAutocallSchedulen            n                a_schedule.call_date = calldate(inx)n                push_back_clsAutocallSchedule autocall_schedules_, a_schedulen                n                pre_call_date = calldate(inx)n                n            End Ifn            n            jump_index = jump_index + 1n            n            autocall_schedules_(sch_index).set_coupon_on_call coupon_on_call(inx), jump_indexn            autocall_schedules_(sch_index).set_percent_strike strike_percent(inx), jump_indexn'            autocall_schedules_(sch_index).set_strike_value autocall_schedules_(inx).percent_strike * reference_price(inx), jump_indexn        n        Next inxn        n        n        no_of_schedule = sch_indexn        n    Elsen    n        raise_err "clsACDealTicket.setSchedule", "No schedule found"n        n    End Ifn        n    n    Exit SubnnnErrorHandler:nn    raise_err "clsACDealTicket.setSchedule"nnnEnd SubnnPublic Function get_next_call_date(ByVal current_date As Date) As Datenn    Dim tmp_schedule As clsAutocallSchedulen    Dim rtn_value As Daten    n    If get_next_schedule(tmp_schedule, current_date) Thenn        rtn_value = tmp_schedule.call_daten    Elsen        rtn_value = 0n    End Ifn    n    get_next_call_date = rtn_valuennEnd FunctionnnnPublic Function get_next_schedule(next_schedule As clsAutocallSchedule, ByVal current_date As Date) As Booleannn    Dim schedule_exist As Booleann    Dim inx As Integern    n    schedule_exist = Falsen    nOn Error GoTo ErrorHandlern    n    If no_of_schedule >= 1 Thenn    n        For inx = 1 To no_of_schedulen        n            If autocall_schedules_(inx).call_date >= current_date Thenn        n                Set next_schedule = autocall_schedules_(inx)n                schedule_exist = Truen                Exit Forn                n            End Ifn        n        Next inxn            n    Elsen    n        schedule_exist = Falsen    n    End Ifn    n    n    get_next_schedule = schedule_existnnn    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.get_next_schedule"nnEnd FunctionnPublic Function get_prev_schedule(prev_schedule As clsAutocallSchedule, ByVal current_date As Date) As Booleannn    Dim schedule_exist As Booleann    Dim inx As Integern    n    schedule_exist = Falsen    nOn Error GoTo ErrorHandlern    n    If no_of_schedule >= 1 Thenn    n        For inx = 1 To no_of_schedulen        n            If autocall_schedules_(inx).call_date >= current_date Thenn            n                If inx > 1 Thenn        n                    Set prev_schedule = autocall_schedules_(inx - 1)n                    schedule_exist = Truen                Elsen                    schedule_exist = Falsen                End Ifn                n                Exit Forn                n            End Ifn        n        Next inxn            n    Elsen    n        schedule_exist = Falsen    n    End Ifn    n    n    get_prev_schedule = schedule_existnnn    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.get_next_schedule"nnEnd FunctionnnPublic Function get_next_coupon_schedule(next_schedule As clsAutocallSchedule, ByVal current_date As Date) As Booleannn    Dim schedule_exist As Booleann    Dim inx As Integern    n    schedule_exist = Falsen    nOn Error GoTo ErrorHandlern    n    If no_of_coupon_schedule >= 1 Thenn    n        For inx = 1 To no_of_coupon_schedulen        n            If monthly_coupon_schedules_(inx).call_date >= current_date Thenn        n                Set next_schedule = monthly_coupon_schedules_(inx)n                schedule_exist = Truen                Exit Forn                n            End Ifn        n        Next inxn            n    Elsen    n        schedule_exist = Falsen    n    End Ifn    n    n    get_next_coupon_schedule = schedule_existnnn    Exit Functionn    nErrorHandler:nn    raise_err "clsACDealTicket.get_next_coupon_schedule", Err.descriptionnnEnd FunctionnnPublic Function get_call_frequency() As Integernn    Dim call_frequency As Integern    n    If no_of_schedule >= 2 Thenn    n        call_frequency = Round((autocall_schedules_(no_of_schedule).call_date - autocall_schedules_(no_of_schedule - 1).call_date) / 30.4, 0)nn    End Ifn    n    get_call_frequency = call_frequencynnEnd Functionnnn'------------------------------------------------------------nPublic Sub set_to_call_prob_mode(rate As Double, seq As Integer)nn    Dim inx As Integern    n    Me.x_grid = 50n    Me.t_grid = 50n        n    autocall_schedules_(no_of_schedule).set_percent_strike 0.001n    n    monthly_coupon_flag = 0n    ra_flag = 0n    n    For inx = 1 To no_of_schedulen    n        If autocall_schedules_(inx).call_date >= current_date Thenn    n            autocall_schedules_(inx).set_coupon_on_call -1n            n        End Ifn    n    Next inxn    n    If seq <= no_of_schedule Thenn        autocall_schedules_(seq).set_coupon_on_call Exp(rate * (autocall_schedules_(seq).call_date - current_date) / 365) - 1n    Elsen        raise_err "set_to_call_prob_mode", "Invalid call sequence"n    End IfnnEnd Subn'------------------------------------------------------------nPublic Sub set_to_duration_mode(rate As Double)nn    Dim inx As Integern    n    'Me.x_grid = 200n    Me.t_grid = 50n    n    autocall_schedules_(no_of_schedule).set_percent_strike 0.001n    n    monthly_coupon_flag = 0n    ra_flag = 0n    Me.ki_barrier_flag = 0n    ki_adj_pct = 1n    n    For inx = 1 To no_of_schedulen    n        If autocall_schedules_(inx).call_date >= current_date Thenn    n            autocall_schedules_(inx).set_coupon_on_call (autocall_schedules_(inx).call_date - current_date) / 365 * Exp(rate * (autocall_schedules_(inx).call_date - current_date) / 365) - 1n            n        End Ifn    n    Next inxnn    Me.coupon_at_maturity = autocall_schedules_(no_of_schedule).coupon_on_call()nEnd SubnnnPublic Sub copy_early_exit_schedule(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)nn    Dim inx As Integern    n    If no_of_schedule_in > 0 Thenn        n        ReDim early_exit_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen        no_of_early_exit_schedule = no_of_schedule_inn        n        For inx = 1 To no_of_early_exit_schedulen                n            Set early_exit_schedules_(inx) = New clsAutocallSchedulen            n            early_exit_schedules_(inx).call_date = schs(inx).call_daten            early_exit_schedules_(inx).set_coupon_on_call schs(inx).coupon_on_calln            early_exit_schedules_(inx).set_percent_strike schs(inx).percent_striken    '        early_exit_schedules_(inx).set_strike_value schs(inx).strike_value  ' * reference_pricen        n        Next inxn        n    End IfnnEnd SubnnPublic Sub copy_floating_schedule(no_of_schedule_in As Integer, schs() As clsAutocallSchedule)nn    Dim inx As Integern    n    ReDim floating_schedules_(1 To no_of_schedule_in) As clsAutocallSchedulen    no_of_floating_coupon_schedule = no_of_schedule_inn    n    For inx = 1 To no_of_floating_coupon_schedulen            n        Set floating_schedules_(inx) = New clsAutocallSchedulen        n        floating_schedules_(inx).call_date = schs(inx).call_daten        floating_schedules_(inx).set_coupon_on_call schs(inx).coupon_on_calln        floating_schedules_(inx).set_percent_strike schs(inx).percent_striken'        floating_schedules_(inx).set_strike_value schs(inx).strike_value  ' * reference_pricen    n    Next inxn    n    nnEnd Sub