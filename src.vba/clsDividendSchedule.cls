Option ExplicitnnPrivate dividend_schedule_() As clsDividendnPublic ratioDividend As Double '2018.7.19nnPublic ini_div_inx As IntegernPublic div_inx As IntegernnPrivate func As New FunctionsnnPublic Function get_sum_of_div(maturity_date As Date, current_date As Date) As Doublenn    Dim inx As Integern    Dim rtn_value As Doublen    inx = 0n    n    Do While inx <= UBound(dividend_schedule_)n    n        If dividend_schedule_(inx).dividend_date <= maturity_date Thenn            n            If dividend_schedule_(inx).dividend_date > current_date Thenn                n                rtn_value = rtn_value + dividend_schedule_(inx).dividendn            n            End Ifn            n        Elsen        n            Exit Donn        End Ifn        n        inx = inx + 1n    n    Loopn    n    get_sum_of_div = rtn_valuennEnd FunctionnnnPublic Function get_sum_of_div_pvs(maturity_date As Date, current_date As Date, rate_curve As clsRateCurve) As Doublenn    Dim inx As Integern    Dim rtn_value As Doublen    inx = 0n    n    Do While inx <= UBound(dividend_schedule_)n    n        If dividend_schedule_(inx).dividend_date <= maturity_date Thenn            n            If dividend_schedule_(inx).dividend_date > current_date Thenn                n                rtn_value = rtn_value + rate_curve.get_discount_factor(current_date, dividend_schedule_(inx).dividend_date) * dividend_schedule_(inx).dividendn            n            End Ifn            n        Elsen        n            Exit Donn        End Ifn        n        inx = inx + 1n    n    Loopn    n    get_sum_of_div_pvs = rtn_valuennEnd Functionnn'Public Function get_div_dates(Optional base As Integer = 1, Optional max_date As Date = #12/31/2100#, Optional ul_code As String) As Long()n'day_shift 추가 : 2018.12.05nPublic Function get_div_dates(Optional base As Integer = 1, Optional max_date As Date = #12/31/2100#, Optional ul_code As String, Optional day_shift As Long = 0) As Long()nn    Dim inx As Integern    Dim rtn_array() As Longn    n    'ReDim rtn_array(base To UBound(dividend_schedule_) - LBound(dividend_schedule_) + base) As Longn    n    For inx = base To UBound(dividend_schedule_) - LBound(dividend_schedule_) + basen        n        If dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividend_date < max_date Thenn            'push_back_long rtn_array, dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividend_date, 0n            'day_shift 추가 : 2018.12.05n            push_back_long rtn_array, CLng(dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividend_date) + day_shift, 0n            'rtn_array(inx) = dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividend_daten        End Ifn    n    Next inxn    n'    For inx = 0 To Sheet2.Range(ul_code + "_DIV").Cells(1, 5) - 1n'n'    If Sheet2.Range(ul_code + "_DIV").Cells(inx + 1, 3) < max_date Thenn'    push_back_long rtn_array, Sheet2.Range(ul_code + "_DIV").Cells(inx + 1, 3), 0n'    End Ifn'n'    Next inxn    n    get_div_dates = rtn_arraynnEnd FunctionnnPublic Function get_divs(Optional base As Integer = 1, Optional max_date As Date = #12/31/2100#, Optional ul_code As String) As Double()nn    Dim inx As Integern    Dim rtn_array() As Doublen    n    'ReDim rtn_array(base To UBound(dividend_schedule_) - LBound(dividend_schedule_) + base) As Doublen    n    For inx = base To UBound(dividend_schedule_) - LBound(dividend_schedule_) + basen        If dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividend_date < max_date Thenn        n            push_back_double rtn_array, dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividend, 0n            'rtn_array(inx) = dividend_schedule_(inx + LBound(dividend_schedule_) - base).dividendn        End Ifn    Next inxn    n'    For inx = 0 To Sheet2.Range(ul_code + "_DIV").Cells(1, 5) - 1n'n'    If Sheet2.Range(ul_code + "_DIV").Cells(inx + 1, 3) < max_date Thenn'        push_back_double rtn_array, Val(Sheet2.Range(ul_code + "_DIV").Cells(inx + 1, 4)), 0n'    End Ifn'n'    Next inxn    n    get_divs = rtn_arraynnEnd Functionnn'set the div index to be the first div date.nPublic Function initialize_div_inx(current_date As Date) As Booleann    n    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    inx = 0n    n    If Not IsNull(dividend_schedule_) Thenn    n        Do While dividend_schedule_(inx).dividend_date <= current_daten        n            inx = inx + 1n        n        Loopn        n    End Ifn        n    ini_div_inx = inxn    div_inx = inxn        n    Exit Functionn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsDividendSchedule.initialize_div_inx :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Functionn        nEnd FunctionnnPublic Sub rewind_fixing_inx()nn    div_inx = ini_div_inxnnEnd SubnnPublic Function copy_obj() As clsDividendSchedulenn    Dim obj As clsDividendSchedulen    Dim inx As Integern    n    Set obj = New clsDividendSchedulen    n    obj.div_inx = div_inxn    obj.ini_div_inx = ini_div_inxn    n    For inx = LBound(dividend_schedule_) To UBound(dividend_schedule_)n    n        obj.add_dividend_schedule dividend_schedule_(inx)n    n    Next inxnn    Set copy_obj = objnnEnd FunctionnnPublic Function get_dividend(Optional index As Integer = -1) As clsDividendn    n    Dim temp_div As New clsDividendn    nOn Error GoTo ErrorHandlern    n    If index = -1 Thenn    n        index = div_inxn        n    End Ifn    n    If index > UBound(dividend_schedule_) Thenn        n        temp_div.dividend = 0n        temp_div.dividend_date = #12/31/2100#n        n        Set get_dividend = temp_divn        n    Elsen            n        Set get_dividend = dividend_schedule_(index)n        n    End Ifn    n       n    Exit Functionn    nErrorHandler:nn    Err.Raise vbObjectError + 1003, "clsDividendSchedule.get_dividend :" & Chr(13) & Err.source, Err.description '1002 <-- run errorn    Exit FunctionnnEnd FunctionnnnnPublic Function move_next() As Booleannn    div_inx = div_inx + 1n    n    If div_inx > UBound(dividend_schedule_) Thenn    n        move_next = Falsen        n    Elsen        n        move_next = Truen        n    End IfnnEnd FunctionnnnPublic Sub initialize_div(no_of_schedule As Integer, schedule() As Date, dividend_amount() As Double)nn    Dim inx As Integern    Dim temp_schedule As clsDividendn    n    nOn Error GoTo ErrorHandlern        n    n    For inx = 1 To no_of_schedulen    n        Set temp_schedule = New clsDividendn        n        temp_schedule.dividend_date = schedule(inx)n        temp_schedule.dividend = dividend_amount(inx)n        n        add_dividend_schedule temp_schedulen        n    Next inxn    n    Set temp_schedule = New clsDividendn    n    temp_schedule.dividend = 0n    temp_schedule.dividend_date = #12/31/2100#n    n    add_dividend_schedule temp_schedulen    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsDividendSchedule.initialize_div :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn            n    nEnd SubnnPublic Sub add_dividend_schedule(a_dividend As clsDividend)nn    n    nOn Error GoTo ErrorHandlern        nn    If IsNull(dividend_schedule_) Thenn        ReDim dividend_schedule_(1 To 1) As clsDividendn        Set dividend_schedule_(UBound(dividend_schedule_)) = a_dividendn    Elsen        ReDim Preserve dividend_schedule_(LBound(dividend_schedule_) To UBound(dividend_schedule_) + 1) As clsDividendn        Set dividend_schedule_(UBound(dividend_schedule_)) = a_dividendn    End Ifn    n    Exit Subn    nErrorHandler:nn    Err.Raise vbObjectError + 1002, "clsDividendSchedule.add_dividend_schedule :" & Chr(13) & Err.source, Err.description '1002 <-- initialization errorn    Exit Subn                nnEnd Subnn