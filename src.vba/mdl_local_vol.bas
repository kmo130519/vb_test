Option ExplicitnnPrivate Const no_of_indices As Integer = 5nPrivate Const index_names_1 As String = "KOSPI200"nPrivate Const index_names_2 As String = "SPX"nPrivate Const index_names_5 As String = "HSCEI"nPrivate Const index_names_3 As String = "SX5E"nPrivate Const index_names_4 As String = "NKY"nnPublic Function get_vol_mod_alpha(x As Double, beta As Double, fwd As Double, tau As Double, alpha As Double, rho As Double, nu As Double)nn   ' Dim alpha As Doublen    Dim vol_mod As Doublen    Dim z As Doublen    Dim chi As Doublen    n    'alpha = get_alpha(beta, fwd, tau, vol_atm, rho, nu)n    n    If fwd <> x Thenn    n        vol_mod = alpha * (1 + ((1 - beta) ^ 2 / 24 * alpha ^ 2 / (fwd * x) ^ (1 - beta) + 1 / 4 * rho * beta * nu * alpha / (fwd * x) ^ ((1 - beta) / 2) + (2 - 3 * rho ^ 2) / 24 * nu ^ 2) * tau)n        n        vol_mod = vol_mod / ((fwd * x) ^ ((1 - beta) / 2) * (1 + (1 - beta) ^ 2 / 24 * Log(fwd / x) ^ 2 + (1 - beta) ^ 4 / 1920 * Log(fwd / x) ^ 4))n        n        z = nu / alpha * (fwd * x) ^ ((1 - beta) / 2) * Log(fwd / x)n        n        chi = Log((Sqr(1 - 2 * rho * z + z ^ 2) + z - rho) / (1 - rho))n        n        vol_mod = vol_mod * z / chin        n        n    n    Elsen        n        vol_mod = alpha / fwd ^ (1 - beta)n        n        vol_mod = vol_mod * (1 + ((1 - beta) ^ 2 / 24 * alpha ^ 2 / (fwd ^ (2 - 2 * beta)) + 1 / 4 * rho * beta * alpha * nu / fwd ^ (1 - beta) + (2 - 3 * rho ^ 2) / 24 * nu ^ 2) * tau)n        n      n    End Ifn        n    get_vol_mod_alpha = vol_modnnEnd FunctionnnPublic Sub cmd_retrieve_local_vol_surface(Optional market_date As Date = -1, Optional prev_date_in As Date = -1)nnn    Dim eval_date As Daten    Dim prev_date As Daten    n    Dim sabr_surfaces() As clsSABRSurfacen    Dim iv_surfaces()  As clsImpliedVolSurfacen    Dim tmp_implied_vol_surface As clsImpliedVolSurfacen    Dim index_list(1 To no_of_indices) As Stringn    Dim inx As Integern    n    'Dim eff_vol_date As Daten    n    n    n    n    Dim data_count As Integern    nOn Error GoTo ErrorHandlernn'----------------------------n' Check market daten'----------------------------n    If market_date > 0 Thenn    n        shtMarket.Range("market_date").Cells(1, 1).value = market_daten        n    End Ifn    n    If prev_date > 0 Thenn    n        shtMarket.Range("market_date").Cells(1, 2).value = prev_daten        n    End Ifn        n    eval_date = shtMarket.Range("market_date").Cells(1, 1).valuen    prev_date = shtMarket.Range("market_date").Cells(1, 2).valuennn'----------------------------n' Set index namesn'----------------------------n    index_list(1) = index_names_1n    index_list(2) = index_names_2n    index_list(3) = index_names_3n    index_list(4) = index_names_4n    index_list(5) = index_names_5n    n    n'----------------------------n' Retrieve Local vol Surfacesn'----------------------------n    data_count = retrieve_local_vol_surface(sabr_surfaces, index_list, eval_date, shtConfig.Range("tglNeglectCurrentDateVol").value)n    n'    If data_count <= 0 Thenn'        data_count = retrieve_local_vol_surface(sabr_surfaces, index_list, prev_date)n'        If data_count <= 0 Thenn'            MsgBox "No Surface"n'        End Ifn'    End Ifn            nn'----------------------------n' Retrieve vol Surfacesn'----------------------------nnn    ReDim iv_surfaces(1 To no_of_indices) As clsImpliedVolSurfacenn    For inx = 1 To no_of_indicesn    n        Set tmp_implied_vol_surface = New clsImpliedVolSurfacen        tmp_implied_vol_surface.Init_Extract_Vol get_max_date(index_list(inx), eval_date, "UL_VOL_SURFACE"), index_list(inx)n        n'        If Not tmp_implied_vol_surface.initialized Thenn'n'            tmp_implied_vol_surface.Init_Extract_Vol prev_date, index_list(inx)n'n'            If Not tmp_implied_vol_surface.initialized Thenn'                MsgBox "No Surface found for " & index_list(inx)n'            End Ifn'n'        End Ifn        n        If tmp_implied_vol_surface.initialized Thenn        n            Set iv_surfaces(inx) = tmp_implied_vol_surfacen        n        End Ifn        nn    Next inxn    n    shtLocalVol.lstIndices.clearn    n    shtLocalVol.lstIndices.List = index_listn    n    shtLocalVol.lstIndices.Height = 80n    shtLocalVol.lstIndices.width = 80n    n    For inx = 1 To no_of_indicesn        n        clear_data index_list(inx)n        n        Dim tmp_grid As clsPillarGridn        n        Set tmp_grid = New clsPillarGridn        tmp_grid.set_dates iv_surfaces(inx).dates()n        tmp_grid.set_strikes iv_surfaces(inx).strikes()n        n        display_grid index_list(inx), tmp_grid, index_list(inx) & "_Vol_Surface"n        display_iv_surface index_list(inx), iv_surfaces(inx), tmp_grid, eval_datenn        display_grid index_list(inx), sabr_surfaces(inx).local_vol_surface.grid_, index_list(inx) & "_local_Vol_Surface"n        display_local_vol_surface index_list(inx), sabr_surfaces(inx)n        n        'shtLocalVol.lstIndices.AddItem index_list(inx), inx - 1n        shtLocalVol.lstIndices.Selected(inx - 1) = Truen        n        shtLocalVol.Range(index_list(inx) & "_local_Vol_Surface").Cells(-1, 2).value = sabr_surfaces(inx).real_daten    Next inxn    n    n    n    Exit Subn    nErrorHandler:nn    raise_err " cmd_retrieve_local_vol_surface", Err.descriptionnnEnd SubnPublic Sub cmd_save_local_vol_surface()nn    Dim inx As Integern    Dim index_list(1 To no_of_indices) As Stringn    Dim no_of_indices_to_save As Integern    nOn Error GoTo ErrorHandlernn    n    Dim markets(1 To no_of_indices) As clsMarketn    Dim sabr_surfaces() As clsSABRSurfacen    Dim spot() As Doublen    n    no_of_indices_to_save = 0n    n    '-----------------------------------------n    ' READ Surfaces >>>n    '-----------------------------------------n    index_list(1) = index_names_1n    index_list(2) = index_names_2n    index_list(3) = index_names_3n    index_list(4) = index_names_4n    index_list(5) = index_names_5n    n    Set markets(1) = read_kospi_index_market(index_list(1), True)nn    For inx = 2 To no_of_indicesn        Set markets(inx) = read_index_market(index_list(inx), True)n    Next inxn    '-----------------------------------------n    ' <<< READ Surfacesn    '-----------------------------------------n    n    For inx = 1 To no_of_indicesn    n        If shtLocalVol.lstIndices.Selected(inx - 1) Thenn        n            push_back_clsSABRSurface sabr_surfaces, markets(inx).sabr_surface_n            push_back_double spot, markets(inx).s_n            no_of_indices_to_save = no_of_indices_to_save + 1n            n            If Left(index_list(inx), 5) = "KOSPI" Thenn                cmd_save_sabr_ma_krn            Elsen                save_a_sabr_ma index_list(inx)n            End Ifn         n'            Set sabr_surfaces(inx) = markets(inx).sabr_surface_n'            spot(inx) = markets(inx).s_n        n        End Ifn        n    Next inxn    n    save_sabr_surfaces sabr_surfaces, spot, no_of_indices_to_save 'no_of_indicesn    save_sabr_param_loc_grid sabr_surfaces, no_of_indices_to_save 'no_of_indicesnn    Exit Subn    nErrorHandler:nn    raise_err "cmd_save_local_vol_survace", Err.descriptionnnEnd SubnnPrivate Function read_local_vol_dates(Optional seq As Integer = 1) As Date()n    n    Dim rtn_array() As Daten    Dim inx As Integern    n    inx = 0n    n    Do While shtLocalVol.Range("LocalVol_Tenor").Cells(1 + seq, inx + 1).value <> ""n        n        push_back_date rtn_array, shtLocalVol.Range("LocalVol_Tenor").Cells(1 + seq, inx + 1).valuen        inx = inx + 1n    n    Loopn    n    read_local_vol_dates = rtn_arraynnEnd FunctionnnPublic Sub cmd_draw_surface()nn    Dim data_count As Integern    Dim eval_date As Daten    Dim prev_date As Daten    Dim prev_sabr_surfaces() As clsSABRSurfacen    Dim weight As Doublen    Dim local_vol_grid(1 To no_of_indices) As clsPillarGridn    nOn Error GoTo ErrorHandlernn    Dim index_list(1 To no_of_indices) As Stringn    Dim tmp_market(1 To no_of_indices) As clsMarketn    Dim tmp_market2 As clsMarketn    Dim inx As Integern    n    Dim local_vol_dates() As Daten    ngCounter = 1n    n    eval_date = shtMarket.Range("market_date").Cells(1, 1).valuen    local_vol_dates = read_local_vol_dates(1)n    n    index_list(1) = index_names_1n    index_list(2) = index_names_2n    index_list(3) = index_names_3n    index_list(4) = index_names_4n    index_list(5) = index_names_5n    n'------------------------------n    Set tmp_market(1) = read_kospi_index_market(index_list(1), False)nn    Set local_vol_grid(1) = New clsPillarGridn    local_vol_grid(1).initialize tmp_market(1).s_, local_vol_dates, eval_datenn    If shtLocalVol.chkSmoothing Thenn        tmp_market(1).sabr_surface_.set_prev_surface prev_market_set__.market_by_ul(index_list(1)).sabr_surface_n    End Ifnn    tmp_market(1).sabr_surface_.calc_local_vol_surface local_vol_grid(1), shtLocalVol.chkSmoothing, shtLocalVol.Range("LocalVol_Tenor").Cells(2, -1).value 'local_vol_dates, vol_strikesn'------------------------------n    n    For inx = 2 To no_of_indicesn        Set tmp_market(inx) = read_index_market(index_list(inx), False)n        local_vol_dates = read_local_vol_dates(inx)n         n        Set local_vol_grid(inx) = New clsPillarGridn        local_vol_grid(inx).initialize tmp_market(inx).s_, local_vol_dates, eval_daten        n        If shtLocalVol.chkSmoothing Thenn            tmp_market(inx).sabr_surface_.set_prev_surface prev_market_set__.market_by_ul(index_list(inx)).sabr_surface_n        End Ifn        n        tmp_market(inx).sabr_surface_.calc_local_vol_surface local_vol_grid(inx), shtLocalVol.chkSmoothing, shtLocalVol.Range("LocalVol_Tenor").Cells(inx + 1, -1).value  'local_vol_dates, vol_strikesnn    Next inxn    n    n    For inx = 1 To no_of_indicesn    n        If shtLocalVol.lstIndices.Selected(inx - 1) Thenn            clear_data index_list(inx)n            display_grid index_list(inx), tmp_market(inx).sabr_surface_.vol_surface.grid_, index_list(inx) & "_Vol_Surface"  ' .grid_, index_list(inx) & "_Vol_Surface"n            display_vol_surface index_list(inx), tmp_market(inx).sabr_surface_n                                n            If shtLocalVol.chkShift Thenn                    n                 tmp_market(inx).sabr_surface_.shift_surface shtLocalVol.Range(index_list(inx) & "_local_Vol_Surface").Cells(0, 12).valuen                n            End Ifn            n            display_grid index_list(inx), tmp_market(inx).sabr_surface_.local_vol_surface.grid_, index_list(inx) & "_local_Vol_Surface"n            display_local_vol_surface index_list(inx), tmp_market(inx).sabr_surface_n            n        End Ifn        n    Next inxn        n    Exit Subn    nErrorHandler:nn    raise_err "cmd_draw_surface", Err.descriptionnnEnd Subn'n'Private Sub smoothe_local_vol(today_surface As clsSABRSurface, prev_sabr_surface As clsSABRSurface, eval_date As Date, prev_weight As Double)n'n'    Dim inx As Integern'    Dim jnx As Integern'n'    Dim tmp_vol As Doublen'n'On Error GoTo ErrorHandlern'n'    For inx = 1 To today_surface.local_vol_grid_.no_of_datesn'        For jnx = 1 To today_surface.local_vol_grid_.no_of_strikesn'            tmp_vol = prev_sabr_surface.interpolated_local_vol(eval_date, today_surface.local_vol_grid_.strikes(jnx), today_surface.local_vol_grid_.dates(inx))n'            today_surface.set_local_vol tmp_vol * prev_weight + today_surface.local_vol_surface()(inx, jnx) * (1 - prev_weight), inx, jnxn'        Next jnxn'    Next inxn'n'    Exit Subn'n'ErrorHandler:n'n'    'raise_err "smoothe_local_vol", Err.descriptionn'    MsgBox "No data to smooothe.. Continue the process anyway.. "n'n'End SubnnPrivate Sub clear_data(index_name As String, Optional ByVal local_vol_only As Boolean = False)nn    Dim row_count As Integern    Dim local_vol_row_count As Integern    n    n    If Not local_vol_only Thenn        local_vol_row_count = shtLocalVol.Range(index_name & "_Local_Vol_Surface").Cells(0, 1).valuen        shtLocalVol.Range(index_name & "_Local_Vol_Surface").Cells(2, -6).Range("A1:BZ" & local_vol_row_count + 1).ClearContentsn        shtLocalVol.Range(index_name & "_Local_Vol_Surface").Range("B1:BZ1").ClearContentsn    End Ifn    n    n    row_count = shtLocalVol.Range(index_name & "_Vol_Surface").Cells(0, 1).valuen    shtLocalVol.Range(index_name & "_Vol_Surface").Cells(2, -6).Range("A1:BZ" & row_count + 1).ClearContentsn    shtLocalVol.Range(index_name & "_Vol_Surface").Range("B1:BZ1").ClearContentsnnEnd SubnnnPublic Sub display_local_vol_surface(ByVal index_name As String, sabr_surface As clsSABRSurface)nn    Dim inx As Integern    Dim jnx As Integern    Dim the_range As Rangen    nOn Error GoTo ErrorHandlernn    Set the_range = shtLocalVol.Range(index_name & "_local_Vol_Surface")n    n    n    For jnx = 1 To UBound(sabr_surface.local_vol_surface.grid_.get_all_dates()) 'sabr_surface.local_vol_grid_.get_all_dates())n        nn        For inx = 1 To UBound(sabr_surface.local_vol_surface.grid_.get_all_strikes()) '.local_vol_grid_.get_all_strikes())nn            the_range.Cells(1 + jnx, 1 + inx).value = sabr_surface.local_vol_surface.vol_surface()(jnx, inx)n        n        Next inxn    Next jnxn    n    n    For jnx = 1 To sabr_surface.sabr_parameters_loc_.no_of_datesn        the_range.Cells(1 + jnx, -6).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).forwardn        the_range.Cells(1 + jnx, -5).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).alphan        the_range.Cells(1 + jnx, -4).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).betan        the_range.Cells(1 + jnx, -3).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).nun        the_range.Cells(1 + jnx, -2).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).rhon        the_range.Cells(1 + jnx, -1).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).vol_atmn        the_range.Cells(1 + jnx, 0).value = sabr_surface.sabr_parameters_loc_.sabr_param(jnx).taun    Next jnxn    n    Exit Subn    nErrorHandler:nn    raise_err "display_local_vol_surface", Err.descriptionnnEnd SubnnPrivate Sub display_grid(ByVal index_name As String, grid As clsPillarGrid, range_name As String)nn    Dim the_range As Rangen    Dim inx As Integern    Dim jnx As Integern    n    Set the_range = shtLocalVol.Range(range_name)n    n    the_range.Cells(-1, 1).value = index_name & " Index"n    n    For inx = 1 To UBound(grid.get_all_strikes())n    n        the_range.Cells(1, 1 + inx).value = grid.strikes(inx)n    n    Next inxn    n    For inx = 1 To UBound(grid.get_all_dates())n    n        the_range.Cells(1 + inx, 1).value = grid.dates(inx)n    n    Next inxnn    nEnd Subn'n'Public Sub display_iv_surface(ByVal index_name As String, iv_surface As clsImpliedVolSurface, grid As clsPillarGrid, eval_date As Date)n'n'    Dim inx As Integern'    Dim jnx As Integern'    Dim the_range As Rangen'n'On Error GoTo ErrorHandlern'n'    Set the_range = shtLocalVol.Range(index_name & "_Vol_Surface")n'n'    For inx = 1 To UBound(grid.get_all_strikes())n'n'        For jnx = 1 To UBound(grid.get_all_dates())n'n'            the_range.Cells(1 + jnx, 1 + inx).value = iv_surface.Extract_Index_Vol(eval_date, grid.dates(jnx), grid.strikes(inx))n'n'        Next jnxn'n'    Next inxn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "display_iv_surface", Err.descriptionn'n'End SubnnPublic Sub display_vol_surface(ByVal index_name As String, sabr_surface As clsSABRSurface)nn    Dim inx As Integern    Dim jnx As Integern    Dim the_range As Rangen    nOn Error GoTo ErrorHandlernn    Set the_range = shtLocalVol.Range(index_name & "_Vol_Surface")n    n    the_range.Cells(-1, 1).value = index_name & " Index"n    n    For inx = 1 To UBound(sabr_surface.vol_surface.grid_.get_all_strikes())  '.grid().get_all_strikes())n    n        the_range.Cells(1, 1 + inx).value = sabr_surface.vol_surface.grid_.get_all_strikes()(inx)n    n    Next inxn    n    For inx = 1 To UBound(sabr_surface.vol_surface.grid_.get_all_dates()) ' sabr_surface.grid().get_all_dates())n    n        the_range.Cells(1 + inx, 1).value = sabr_surface.vol_surface.grid_.get_all_dates()(inx)n    n    Next inxn    n    For inx = 1 To UBound(sabr_surface.vol_surface.grid_.get_all_strikes())n    n        For jnx = 1 To UBound(sabr_surface.vol_surface.grid_.get_all_dates())n    n         the_range.Cells(1 + jnx, 1 + inx).value = sabr_surface.vol_surface.vol_surface()(jnx, inx)n    n        Next jnxn    n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "display_vol_surface", Err.descriptionnnEnd Subnn