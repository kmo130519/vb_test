'=================================n' Modified onn' 2013-10-14n' 2013-10-21n'=================================nnOption Explicitnn'Private index_id_() As StringnPrivate market_() As clsMarketnnPublic correlation_pair_ As clsCorrelationPairsnn'local correlation 추가 20190327nPublic min_correlation_pair_ As clsCorrelationPairsnn'Public pl_currency_rate_curve_ As clsRateCurvenPrivate pl_currency_rate_curve_() As clsRateCurve '2023.07.26 통화별 할인커브 관리nnPrivate fx_rates_() As clsQuotennPublic Function find_vol_index_ul_code(vol_index_in As String) As Stringnn    Dim rtn_value As Stringn    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    For inx = 1 To UBound(market_)n        n        If market_(inx).vol_index = vol_index_in Thenn        n            rtn_value = market_(inx).index_namen            Exit Forn        End Ifn    n    Next inxn    n    find_vol_index_ul_code = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    find_vol_index_ul_code = ""nnEnd FunctionnnnnnPublic Function get_spot(ul_code() As String) As Double()nn    Dim rtn_array() As Doublen    Dim no_of_array As Integern    Dim inx As Integern    n    no_of_array = get_array_size_string(ul_code)n    n    ReDim rtn_array(1 To no_of_array) As Doublen    n    For inx = 1 To no_of_arrayn        n        rtn_array(inx) = market_by_ul(ul_code(inx)).s_n    n    Next inxn    n    get_spot = rtn_arraynnEnd FunctionnnPublic Function get_no_of_dcfs() As Integern    n    Dim rtn_value As Integern    nOn Error Resume Nextnn    rtn_value = UBound(pl_currency_rate_curve_)n    n    If Err.number = 9 Thenn        rtn_value = 0n    End Ifn    nOn Error GoTo ErrorHandlern        n    n    get_no_of_dcfs = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    raise_err "clsMarketSet.no_of_dcfs", Err.descriptionnnEnd FunctionnnPublic Function get_no_of_markets() As Integern    n    Dim rtn_value As Integern    nOn Error Resume Nextnn    rtn_value = UBound(market_)n    n    If Err.number = 9 Thenn        rtn_value = 0n    End Ifn    nOn Error GoTo ErrorHandlern        n    n    get_no_of_markets = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    raise_err "clsMarketSet.no_of_markets", Err.descriptionnnEnd FunctionnnPublic Sub replace_fx_rate(to_market_set As clsMarketSet)nn    Dim no_of_markets As Integern    Dim inx As Integern    Dim market_index As Integern    nOn Error GoTo ErrorHandlern    n    set_fx_rates to_market_set.get_fx_rates()n    n    Exit Subn    nErrorHandler:nn    raise_err "clsMarketSet.replace_dividend", Err.descriptionnnEnd SubnPublic Sub replace_dividend(to_market_set As clsMarketSet)nn    Dim no_of_markets As Integern    Dim inx As Integern    Dim market_index As Integern    nOn Error GoTo ErrorHandlern    n    no_of_markets = get_no_of_markets()nn    For inx = 1 To no_of_marketsn    n        market_index = to_market_set.find_index(market_(inx).index_name)n    n        If market_index > 0 Thenn        n            If Not to_market_set.market(market_index).div_schedule_ Is Nothing Thenn                Set market_(inx).div_schedule_ = to_market_set.market(market_index).div_schedule_.copy_obj()n            End Ifn            market_(inx).div_yield_ = to_market_set.market(market_index).div_yield_n        End Ifn    n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsMarketSet.replace_dividend", Err.descriptionnnEnd SubnPublic Sub replace_rate(to_market_set As clsMarketSet)nn    Dim no_of_markets As Integern    Dim inx As Integern    Dim market_index As Integern    nOn Error GoTo ErrorHandlernn    '2023-07-26n    no_of_dcfs = get_no_of_dcfs()n    n    For inx = 1 To no_of_dcfsn        Set pl_currency_rate_curve_(inx) = to_market_set.pl_currency_rate_curve_(inx).copy_obj()n    Next inxn    n    no_of_markets = get_no_of_markets()nn    For inx = 1 To no_of_marketsn    n        market_index = to_market_set.find_index(market_(inx).index_name)n    n        If market_index > 0 Thenn            If Not to_market_set.market(market_index).rate_curve_ Is Nothing Thenn                Set market_(inx).rate_curve_ = to_market_set.market(market_index).rate_curve_.copy_obj()n            End Ifn        End Ifn    n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsMarketSet.replace_rate", Err.descriptionnnEnd Subn'n'Public Sub replace_vol_surface(to_market_set As clsMarketSet, inx As Integer) ', Optional local_vol_fwd_shift As Double = 0)n'n'    Dim market_index As Integern'n'On Error GoTo ErrorHandlern'n'n'    market_index = to_market_set.find_index(market_(inx).index_name)n'n'    If market_index > 0 Thenn'n'        If Not to_market_set.market(market_index).heston_parameters_ Is Nothing Thenn'            Set market_(inx).heston_parameters_ = to_market_set.market(market_index).heston_parameters_.copy_obj()n'        End Ifn'n'        If Not to_market_set.market(market_index).sabr_surface_ Is Nothing Thenn'            Set market_(inx).sabr_surface_ = to_market_set.market(market_index).sabr_surface_.copy_obj() '0, to_market_set.market(market_index).s_ - market_(inx).s_)n'        End Ifn'n'        Set market_(inx).iv_surface_ = to_market_set.market(market_index).iv_surface_.copy_obj()n'n'        market_(inx).ul_currency_vol = to_market_set.market(market_index).ul_currency_voln'n'    End Ifn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "clsMarketSet.replace_vol_surface", Err.descriptionn'n'End Subn'n'Public Sub replace_vol_surface_all(to_market_set As clsMarketSet) ', Optional local_vol_fwd_shift As Double = 0)n'n'    Dim no_of_markets As Integern'    Dim inx As Integern'    Dim market_index As Integern'n'On Error GoTo ErrorHandlern'n'    no_of_markets = get_no_of_markets()n'n'    For inx = 1 To no_of_marketsn'n'        replace_vol_surface to_market_set, inxn'n'    Next inxn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "clsMarketSet.replace_vol_surface", Err.descriptionn'n'End Subn'n'n'Public Sub recalibrate_sabr_surface_all(to_market_set As clsMarketSet)n'n'    Dim no_of_markets As Integern'    Dim inx As Integern'    Dim market_index As Integern'n'On Error GoTo ErrorHandlern'n'    no_of_markets = get_no_of_markets()n'n'    For inx = 1 To no_of_marketsn'n'        recalibrate_sabr_surface to_market_set, inxn'n'    Next inxn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "clsMarketSet.recalibrate_sabr_surface_all", Err.descriptionn'n'End Subn'n'n'Public Sub recalibrate_sabr_surface(to_market_set As clsMarketSet, inx As Integer)n'n'    Dim market_index As Integern'n'On Error GoTo ErrorHandlern'n'    market_index = to_market_set.find_index(market_(inx).index_name)n'n'    If market_index > 0 Thenn'n'        If Not to_market_set.market(market_index).sabr_surface_ Is Nothing And Not market_(inx).sabr_surface_ Is Nothing Thenn'                'Set market_(inx).sabr_surface_ = market_(inx).sabr_surface_.copy_obj(0, to_market_set.market(market_index).s_ - market_(inx).s_)n'            market_(inx).sabr_surface_.shift_surface to_market_set.market(market_index).s_n'n'        End Ifn'n'    End Ifn'n'    Exit Subn'n'ErrorHandler:n'n'    raise_err "clsMarketSet.recalibrate_sabr_surface", Err.descriptionn'n'End SubnnPublic Sub bump_ul_price(bump_pct As Double, ul_code As String)nn  n    Dim market_index As Integern    Dim quotes() As clsQuoten    Dim inx As Integern    nOn Error GoTo ErrorHandlern    n    market_index = find_index(ul_code)n    n    If market_index > 0 Thenn        market_(market_index).s_ = market_(market_index).s_ * (1 + bump_pct)n        'added(2018.8.8)n        market_(market_index).refPriceForDividend = market_(market_index).s_n        n        quotes = market(market_index).get_futures_quotes()n        n        For inx = 1 To get_array_size_clsQuote(quotes)n            n            quotes(inx).last_price = quotes(inx).last_price * (1 + bump_pct)n            quotes(inx).theo_price = quotes(inx).theo_price * (1 + bump_pct)n        n        Next inxn        n        market_(market_index).set_futures_quotes quotesnn    End Ifn    n    n    Exit Subn    nErrorHandler:nn    raise_err "clsMarketSet.bump_ul_price", Err.descriptionnnnEnd SubnPublic Sub replace_ul_price(to_market_set As clsMarketSet, inx As Integer)nn    n    Dim market_index As Integern    nOn Error GoTo ErrorHandlern    n    market_index = to_market_set.find_index(market_(inx).index_name)n    n    If market_index > 0 Thenn        market_(inx).s_ = to_market_set.market(market_index).s_n        market_(inx).set_futures_quotes to_market_set.market(market_index).get_futures_quotes()nn    End Ifn    n    n    Exit Subn    nErrorHandler:nn    raise_err "clsMarketSet.replace_ul_price", Err.descriptionnnEnd SubnnnPublic Sub replace_ul_price_all(to_market_set As clsMarketSet)nn    Dim no_of_markets As Integern    Dim inx As Integern    Dim market_index As Integern    nOn Error GoTo ErrorHandlern    n    no_of_markets = get_no_of_markets()nn    For inx = 1 To no_of_marketsn        n        replace_ul_price to_market_set, inxn    n    Next inxn    n    Exit Subn    nErrorHandler:nn    raise_err "clsMarketSet.replace_ul_price", Err.descriptionnnEnd SubnnPublic Sub set_fx_rates(fx_rates() As clsQuote)nn    Dim inx As Integern    n    For inx = 1 To UBound(fx_rates)n    n        set_fx_rate fx_rates(inx).asset_code, fx_rates(inx).last_price, fx_rates(inx).prev_pricen    n    Next inxnnEnd SubnnPublic Sub set_fx_rate(currency_pair As String, rate_value As Double, Optional prev_value As Double)nn    Dim inx As Integern    Dim tmp_obj As clsQuoten    n    inx = find_quote_index(currency_pair, fx_rates_)n    n    If inx < 0 Thenn    n        Set tmp_obj = New clsQuoten        n        tmp_obj.asset_code = currency_pairn        tmp_obj.last_price = rate_valuen        tmp_obj.prev_price = prev_valuen        n        push_back_clsquote fx_rates_, tmp_objn    Elsen        n        fx_rates_(inx).last_price = rate_valuen        fx_rates_(inx).prev_price = prev_valuen    n    End Ifn        nnnnEnd SubnnPublic Function get_fx_rates() As clsQuote()nn  n    nOn Error GoTo ErrorHandlern    nn    n    get_fx_rates = fx_rates_n    n    Exit Functionn    nErrorHandler:nn    raise_err "clsmarketSet.get_fx_rates", Err.descriptionnnEnd FunctionnPublic Function get_fx_rate(currency_pair As String) As Doublenn    Dim rtn_value As Doublen    n    nOn Error GoTo ErrorHandlern    n    If Not find_quote_value(rtn_value, currency_pair, fx_rates_) Thenn        n        rtn_value = 1n    End Ifn    n    get_fx_rate = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    raise_err "clsmarketSet.get_fx_rate", Err.descriptionnnEnd FunctionnnPrivate Function find_quote_index(ByVal asset_code As String, find_from() As clsQuote) As Integernn    Dim rtn_value As Integern    Dim inx As Integern    nOn Error GoTo ErrorHandlernn    rtn_value = -1n    n    For inx = 1 To get_array_size_clsQuote(find_from)n    n        If find_from(inx).asset_code = asset_code Thenn            n            rtn_value = inxn            Exit Forn        n        End Ifn    n    Next inxn    n    find_quote_index = rtn_valuenn    Exit Functionn    nErrorHandler:nn    raise_err "clsMarketSet.find_quote_index", Err.descriptionnnEnd FunctionnnPrivate Function find_quote_value(ByRef price As Double, ByVal asset_code As String, find_from() As clsQuote, Optional prev_price As Boolean = False) As Booleannn    Dim rtn_value As Booleann    Dim inx As Integern    n    n    rtn_value = Falsen    n    inx = find_quote_index(asset_code, find_from)n    n    If inx >= 0 Thenn    n        rtn_value = Truen        n        If prev_price Thenn            price = find_from(inx).prev_pricen        Elsen            price = find_from(inx).last_pricen        End Ifn        n    Elsen    n        rtn_value = Falsen        n    End Ifn            n    n    find_quote_value = rtn_valuen    nnEnd Functionn'Private Function get_array_size_clsQuote(the_array() As clsQuote) As Integern'n'    Dim rtn_value As Integern'n'On Error Resume Nextn'n'    rtn_value = UBound(the_array)n'n'    If Err.number = 9 Thenn'        rtn_value = 0n'    End Ifn'n'n'     get_array_size_clsQuote = rtn_valuen'n'End Functionnn'Public Function index_id(Optional ByVal inx As Integer = 1) As Stringn'n'    index_id = index_id_(inx)n'n''End FunctionnnPublic Function copy_obj(Optional rate_curve_day_shift As Long) As clsMarketSetnn    Dim rtn_obj As clsMarketSetn    Dim inx As Integern    Dim no_of_dcfs As Integern    Dim no_of_markets As Integern    nOn Error Resume Nextnn    no_of_dcfs = UBound(pl_currency_rate_curve_)n    no_of_markets = UBound(market_)nn    If Err.number = 8 Thennn        no_of_markets = 0nn    End IfnnOn Error GoTo ErrorHandlernnn    Set rtn_obj = New clsMarketSetnn    Set rtn_obj.correlation_pair_ = correlation_pair_.copy_objn    Set rtn_obj.min_correlation_pair_ = min_correlation_pair_.copy_obj '2019.3.27n    n    For inx = 1 To no_of_dcfsn        rtn_obj.set_pl_currency_rate_curve inx, pl_currency_rate_curve_(inx).copy_obj(rate_curve_day_shift)n    Next inxn    n    For inx = 1 To no_of_marketsn        rtn_obj.set_market market_(inx).index_name, market_(inx).copy_obj(rate_curve_day_shift)n    Next inxnn    'rtn_obj.set_fx_rates fx_rates_nn    Set copy_obj = rtn_objn    Set rtn_obj = Nothingnn    Exit FunctionnnErrorHandler:nn    raise_err "clsMarketSet.copy_obj", Err.descriptionsnnnEnd FunctionnnnPublic Function dcf_by_ccy(ByVal ccy_code As String) As clsRateCurven    nnOn Error GoTo ErrorHandlern    nn    Set dcf_by_ccy = pl_currency_rate_curve_(get_ccy_idx(ccy_code))n    n    Exit Functionn    nErrorHandler:nn    raise_err "dcf_by_ccy", Err.descriptionnnnEnd FunctionnnnPublic Function market_by_ul(Optional ByVal ul_code As String = "KOSPI200") As clsMarketn    n    Dim market_index As IntegernnOn Error GoTo ErrorHandlernn    market_index = find_index(ul_code)n    n    If market_index > 0 Thennn        Set market_by_ul = market_(market_index)n        n    End Ifn    n    Exit Functionn    nErrorHandler:nn    raise_err "market_by_ul", Err.descriptionnnnEnd FunctionnnnPublic Function market(Optional ByVal inx As Integer = 1) As clsMarketnn    Set market = market_(inx)nnEnd FunctionnnPublic Function s(ByVal inx As Integer) As Doublen    n    s = market_(inx).s_n    n    Exit Functionn    nErrorHandler:nn    raise_err "clsMarketSet.s", Err.descriptionnnEnd FunctionnnnPublic Function s_array() As Double()nn    Dim array_size As Integern    Dim rtn_array() As Doublen    Dim inx As IntegernnOn Error Resume Nextnn    array_size = UBound(market_)n    nOn Error GoTo ErrorHandlern    n    If Err.number = 9 Thenn    n        array_size = 0n        n    Elsen    n        ReDim rtn_array(1 To array_size) As Doublen        n        For inx = 1 To array_sizen        n            rtn_array(inx) = market_(inx).s_n        n        Next inxnnn    End Ifn    n    s_array = rtn_arrayn    n    Exit Functionn    nErrorHandler:nn    raise_err "clsMarketSet.s_array", Err.descriptionnnnEnd FunctionnnPublic Sub set_market(in_index As String, in_market As clsMarket)nn    Dim tmp_index As Integern    n    tmp_index = find_index(in_index)n    n    If tmp_index > 0 Thenn    n        'index_id_(tmp_index) = in_indexn        Set market_(tmp_index) = in_marketn        n    Elsen    n        'push_back_string index_id_, in_indexn        push_back_market market_, in_marketn    n    End IfnnEnd SubnnPublic Sub set_pl_currency_rate_curve(in_index As Integer, in_dcf As clsRateCurve)nn    Dim initial_lbound As Integern    Dim initial_ubound As Integern    n    'Check if the array is initializednOn Error Resume Nextnn    Dim temp_inx As Integern    temp_inx = UBound(pl_currency_rate_curve_)n    n    If (Err.number = 9) Or temp_inx < 0 Thenn        initial_lbound = 1n        initial_ubound = in_indexn    Elsen        initial_lbound = LBound(pl_currency_rate_curve_)n        initial_ubound = max(UBound(pl_currency_rate_curve_), in_index)n    End IfnnOn Error GoTo ErrorHandlernn    ReDim Preserve pl_currency_rate_curve_(initial_lbound To initial_ubound) As clsRateCurven    n    Set pl_currency_rate_curve_(in_index) = in_dcfn    n    Exit Subn    nErrorHandler:nn    raise_err "set_pl_currency_rate_curve"n    nEnd SubnnPublic Function find_index(in_index As String) As Integernn    Dim inx As Integern    Dim array_size As Integern    Dim rtn_value As Integern    nOn Error Resume Nextnn    array_size = UBound(market_)n    n    If Err.number = 9 Thenn    n        rtn_value = 0n        n    Elsen    nOn Error GoTo ErrorHandlern        n        For inx = 1 To array_sizen        n            If market_(inx).index_name = in_index Thenn            n                rtn_value = inxn                n                Exit Forn                n            End Ifn        n        Next inxnn    End Ifn    n    find_index = rtn_valuen    n    Exit Functionn    nErrorHandler:nn    raise_err "clsMarketSet.find_index", Err.descriptionnnnEnd Functionn